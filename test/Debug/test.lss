
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000020b4  00002128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000015d8  00000000  00000000  00002130  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a21  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004129  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004269  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000043d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006022  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00006f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00007e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000080a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <main>
      7a:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <KeyPad_getPressedKey>:
	static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number);
#endif

// Functions

uint8 KeyPad_getPressedKey(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <KeyPad_getPressedKey+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1){
		for(col = 0; col < N_col;col++){
     b40:	1a 82       	std	Y+2, r1	; 0x02
     b42:	4c c0       	rjmp	.+152    	; 0xbdc <KeyPad_getPressedKey+0xa6>
			KEYPAD_PORT_DIR = (0b00010000 << col);
     b44:	ea e3       	ldi	r30, 0x3A	; 58
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	8a 81       	ldd	r24, Y+2	; 0x02
     b4a:	28 2f       	mov	r18, r24
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	80 e1       	ldi	r24, 0x10	; 16
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <KeyPad_getPressedKey+0x22>
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	2a 95       	dec	r18
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <KeyPad_getPressedKey+0x1e>
     b5c:	80 83       	st	Z, r24
			KEYPAD_PORT_OUT = (~(0b00010000 << col));
     b5e:	eb e3       	ldi	r30, 0x3B	; 59
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	80 e1       	ldi	r24, 0x10	; 16
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	02 2e       	mov	r0, r18
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <KeyPad_getPressedKey+0x3e>
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	0a 94       	dec	r0
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <KeyPad_getPressedKey+0x3a>
     b78:	80 95       	com	r24
     b7a:	80 83       	st	Z, r24

			for(row = 0; row < N_row ; row++){
     b7c:	19 82       	std	Y+1, r1	; 0x01
     b7e:	28 c0       	rjmp	.+80     	; 0xbd0 <KeyPad_getPressedKey+0x9a>
				if(bitIsClear(KEYPAD_PORT_IN,row)){
     b80:	e9 e3       	ldi	r30, 0x39	; 57
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a9 01       	movw	r20, r18
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <KeyPad_getPressedKey+0x62>
     b94:	55 95       	asr	r21
     b96:	47 95       	ror	r20
     b98:	8a 95       	dec	r24
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <KeyPad_getPressedKey+0x5e>
     b9c:	ca 01       	movw	r24, r20
     b9e:	81 70       	andi	r24, 0x01	; 1
     ba0:	90 70       	andi	r25, 0x00	; 0
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	91 f4       	brne	.+36     	; 0xbca <KeyPad_getPressedKey+0x94>
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	88 2f       	mov	r24, r24
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	98 2f       	mov	r25, r24
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	89 0f       	add	r24, r25
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret
	while(1){
		for(col = 0; col < N_col;col++){
			KEYPAD_PORT_DIR = (0b00010000 << col);
			KEYPAD_PORT_OUT = (~(0b00010000 << col));

			for(row = 0; row < N_row ; row++){
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	89 83       	std	Y+1, r24	; 0x01
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	84 30       	cpi	r24, 0x04	; 4
     bd4:	a8 f2       	brcs	.-86     	; 0xb80 <KeyPad_getPressedKey+0x4a>
// Functions

uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1){
		for(col = 0; col < N_col;col++){
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	8f 5f       	subi	r24, 0xFF	; 255
     bda:	8a 83       	std	Y+2, r24	; 0x02
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	84 30       	cpi	r24, 0x04	; 4
     be0:	08 f4       	brcc	.+2      	; 0xbe4 <KeyPad_getPressedKey+0xae>
     be2:	b0 cf       	rjmp	.-160    	; 0xb44 <KeyPad_getPressedKey+0xe>
     be4:	ad cf       	rjmp	.-166    	; 0xb40 <KeyPad_getPressedKey+0xa>

00000be6 <KeyPad_4x4_adjustKeyNumber>:
	case 12: return '#'; break;
	}
}

#elif (N_col == 4)
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number){
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	00 d0       	rcall	.+0      	; 0xbec <KeyPad_4x4_adjustKeyNumber+0x6>
     bec:	00 d0       	rcall	.+0      	; 0xbee <KeyPad_4x4_adjustKeyNumber+0x8>
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number){
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	3c 83       	std	Y+4, r19	; 0x04
     bfc:	2b 83       	std	Y+3, r18	; 0x03
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	88 30       	cpi	r24, 0x08	; 8
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <KeyPad_4x4_adjustKeyNumber+0x24>
     c08:	70 c0       	rjmp	.+224    	; 0xcea <KeyPad_4x4_adjustKeyNumber+0x104>
     c0a:	2b 81       	ldd	r18, Y+3	; 0x03
     c0c:	3c 81       	ldd	r19, Y+4	; 0x04
     c0e:	29 30       	cpi	r18, 0x09	; 9
     c10:	31 05       	cpc	r19, r1
     c12:	5c f5       	brge	.+86     	; 0xc6a <KeyPad_4x4_adjustKeyNumber+0x84>
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	84 30       	cpi	r24, 0x04	; 4
     c1a:	91 05       	cpc	r25, r1
     c1c:	09 f4       	brne	.+2      	; 0xc20 <KeyPad_4x4_adjustKeyNumber+0x3a>
     c1e:	59 c0       	rjmp	.+178    	; 0xcd2 <KeyPad_4x4_adjustKeyNumber+0xec>
     c20:	2b 81       	ldd	r18, Y+3	; 0x03
     c22:	3c 81       	ldd	r19, Y+4	; 0x04
     c24:	25 30       	cpi	r18, 0x05	; 5
     c26:	31 05       	cpc	r19, r1
     c28:	9c f4       	brge	.+38     	; 0xc50 <KeyPad_4x4_adjustKeyNumber+0x6a>
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	9c 81       	ldd	r25, Y+4	; 0x04
     c2e:	82 30       	cpi	r24, 0x02	; 2
     c30:	91 05       	cpc	r25, r1
     c32:	09 f4       	brne	.+2      	; 0xc36 <KeyPad_4x4_adjustKeyNumber+0x50>
     c34:	48 c0       	rjmp	.+144    	; 0xcc6 <KeyPad_4x4_adjustKeyNumber+0xe0>
     c36:	2b 81       	ldd	r18, Y+3	; 0x03
     c38:	3c 81       	ldd	r19, Y+4	; 0x04
     c3a:	23 30       	cpi	r18, 0x03	; 3
     c3c:	31 05       	cpc	r19, r1
     c3e:	0c f0       	brlt	.+2      	; 0xc42 <KeyPad_4x4_adjustKeyNumber+0x5c>
     c40:	45 c0       	rjmp	.+138    	; 0xccc <KeyPad_4x4_adjustKeyNumber+0xe6>
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	91 05       	cpc	r25, r1
     c4a:	09 f4       	brne	.+2      	; 0xc4e <KeyPad_4x4_adjustKeyNumber+0x68>
     c4c:	39 c0       	rjmp	.+114    	; 0xcc0 <KeyPad_4x4_adjustKeyNumber+0xda>
     c4e:	68 c0       	rjmp	.+208    	; 0xd20 <KeyPad_4x4_adjustKeyNumber+0x13a>
     c50:	2b 81       	ldd	r18, Y+3	; 0x03
     c52:	3c 81       	ldd	r19, Y+4	; 0x04
     c54:	26 30       	cpi	r18, 0x06	; 6
     c56:	31 05       	cpc	r19, r1
     c58:	09 f4       	brne	.+2      	; 0xc5c <KeyPad_4x4_adjustKeyNumber+0x76>
     c5a:	41 c0       	rjmp	.+130    	; 0xcde <KeyPad_4x4_adjustKeyNumber+0xf8>
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	87 30       	cpi	r24, 0x07	; 7
     c62:	91 05       	cpc	r25, r1
     c64:	0c f0       	brlt	.+2      	; 0xc68 <KeyPad_4x4_adjustKeyNumber+0x82>
     c66:	3e c0       	rjmp	.+124    	; 0xce4 <KeyPad_4x4_adjustKeyNumber+0xfe>
     c68:	37 c0       	rjmp	.+110    	; 0xcd8 <KeyPad_4x4_adjustKeyNumber+0xf2>
     c6a:	2b 81       	ldd	r18, Y+3	; 0x03
     c6c:	3c 81       	ldd	r19, Y+4	; 0x04
     c6e:	2c 30       	cpi	r18, 0x0C	; 12
     c70:	31 05       	cpc	r19, r1
     c72:	09 f4       	brne	.+2      	; 0xc76 <KeyPad_4x4_adjustKeyNumber+0x90>
     c74:	46 c0       	rjmp	.+140    	; 0xd02 <KeyPad_4x4_adjustKeyNumber+0x11c>
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
     c7a:	8d 30       	cpi	r24, 0x0D	; 13
     c7c:	91 05       	cpc	r25, r1
     c7e:	5c f4       	brge	.+22     	; 0xc96 <KeyPad_4x4_adjustKeyNumber+0xb0>
     c80:	2b 81       	ldd	r18, Y+3	; 0x03
     c82:	3c 81       	ldd	r19, Y+4	; 0x04
     c84:	2a 30       	cpi	r18, 0x0A	; 10
     c86:	31 05       	cpc	r19, r1
     c88:	b1 f1       	breq	.+108    	; 0xcf6 <KeyPad_4x4_adjustKeyNumber+0x110>
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	9c 81       	ldd	r25, Y+4	; 0x04
     c8e:	8b 30       	cpi	r24, 0x0B	; 11
     c90:	91 05       	cpc	r25, r1
     c92:	a4 f5       	brge	.+104    	; 0xcfc <KeyPad_4x4_adjustKeyNumber+0x116>
     c94:	2d c0       	rjmp	.+90     	; 0xcf0 <KeyPad_4x4_adjustKeyNumber+0x10a>
     c96:	2b 81       	ldd	r18, Y+3	; 0x03
     c98:	3c 81       	ldd	r19, Y+4	; 0x04
     c9a:	2e 30       	cpi	r18, 0x0E	; 14
     c9c:	31 05       	cpc	r19, r1
     c9e:	b9 f1       	breq	.+110    	; 0xd0e <KeyPad_4x4_adjustKeyNumber+0x128>
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	8e 30       	cpi	r24, 0x0E	; 14
     ca6:	91 05       	cpc	r25, r1
     ca8:	7c f1       	brlt	.+94     	; 0xd08 <KeyPad_4x4_adjustKeyNumber+0x122>
     caa:	2b 81       	ldd	r18, Y+3	; 0x03
     cac:	3c 81       	ldd	r19, Y+4	; 0x04
     cae:	2f 30       	cpi	r18, 0x0F	; 15
     cb0:	31 05       	cpc	r19, r1
     cb2:	81 f1       	breq	.+96     	; 0xd14 <KeyPad_4x4_adjustKeyNumber+0x12e>
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	80 31       	cpi	r24, 0x10	; 16
     cba:	91 05       	cpc	r25, r1
     cbc:	71 f1       	breq	.+92     	; 0xd1a <KeyPad_4x4_adjustKeyNumber+0x134>
     cbe:	30 c0       	rjmp	.+96     	; 0xd20 <KeyPad_4x4_adjustKeyNumber+0x13a>
	case 1: return '7'; break;
     cc0:	97 e3       	ldi	r25, 0x37	; 55
     cc2:	9a 83       	std	Y+2, r25	; 0x02
     cc4:	2f c0       	rjmp	.+94     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 2: return '8'; break;
     cc6:	28 e3       	ldi	r18, 0x38	; 56
     cc8:	2a 83       	std	Y+2, r18	; 0x02
     cca:	2c c0       	rjmp	.+88     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 3: return '9'; break;
     ccc:	39 e3       	ldi	r19, 0x39	; 57
     cce:	3a 83       	std	Y+2, r19	; 0x02
     cd0:	29 c0       	rjmp	.+82     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 4: return '%'; break;
     cd2:	85 e2       	ldi	r24, 0x25	; 37
     cd4:	8a 83       	std	Y+2, r24	; 0x02
     cd6:	26 c0       	rjmp	.+76     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 5: return '4'; break;
     cd8:	94 e3       	ldi	r25, 0x34	; 52
     cda:	9a 83       	std	Y+2, r25	; 0x02
     cdc:	23 c0       	rjmp	.+70     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 6: return '5'; break;
     cde:	25 e3       	ldi	r18, 0x35	; 53
     ce0:	2a 83       	std	Y+2, r18	; 0x02
     ce2:	20 c0       	rjmp	.+64     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 7: return '6'; break;
     ce4:	36 e3       	ldi	r19, 0x36	; 54
     ce6:	3a 83       	std	Y+2, r19	; 0x02
     ce8:	1d c0       	rjmp	.+58     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 8: return '*'; break;
     cea:	8a e2       	ldi	r24, 0x2A	; 42
     cec:	8a 83       	std	Y+2, r24	; 0x02
     cee:	1a c0       	rjmp	.+52     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 9: return '1'; break;
     cf0:	91 e3       	ldi	r25, 0x31	; 49
     cf2:	9a 83       	std	Y+2, r25	; 0x02
     cf4:	17 c0       	rjmp	.+46     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 10: return '2'; break;
     cf6:	22 e3       	ldi	r18, 0x32	; 50
     cf8:	2a 83       	std	Y+2, r18	; 0x02
     cfa:	14 c0       	rjmp	.+40     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 11: return '3'; break;
     cfc:	33 e3       	ldi	r19, 0x33	; 51
     cfe:	3a 83       	std	Y+2, r19	; 0x02
     d00:	11 c0       	rjmp	.+34     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 12: return '-'; break;
     d02:	8d e2       	ldi	r24, 0x2D	; 45
     d04:	8a 83       	std	Y+2, r24	; 0x02
     d06:	0e c0       	rjmp	.+28     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 13: return 'C'; break; // CE or C
     d08:	93 e4       	ldi	r25, 0x43	; 67
     d0a:	9a 83       	std	Y+2, r25	; 0x02
     d0c:	0b c0       	rjmp	.+22     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 14: return '0'; break;
     d0e:	20 e3       	ldi	r18, 0x30	; 48
     d10:	2a 83       	std	Y+2, r18	; 0x02
     d12:	08 c0       	rjmp	.+16     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 15: return '='; break;
     d14:	3d e3       	ldi	r19, 0x3D	; 61
     d16:	3a 83       	std	Y+2, r19	; 0x02
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 16: return '+'; break;
     d1a:	8b e2       	ldi	r24, 0x2B	; 43
     d1c:	8a 83       	std	Y+2, r24	; 0x02
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <KeyPad_4x4_adjustKeyNumber+0x13e>
	default: return button_number;
     d20:	99 81       	ldd	r25, Y+1	; 0x01
     d22:	9a 83       	std	Y+2, r25	; 0x02
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <LCD_init>:
#include "lcd.h"

void LCD_init(void){
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<RS) | (1<<RW) | (1<<E);
     d3c:	a1 e3       	ldi	r26, 0x31	; 49
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e1 e3       	ldi	r30, 0x31	; 49
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	80 67       	ori	r24, 0x70	; 112
     d48:	8c 93       	st	X, r24
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0Xf0;
     d4a:	a4 e3       	ldi	r26, 0x34	; 52
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e4 e3       	ldi	r30, 0x34	; 52
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	80 6f       	ori	r24, 0xF0	; 240
     d56:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0X0f; // IF LOWER PINS ARE USED
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE);
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     d5e:	88 e2       	ldi	r24, 0x28	; 40
     d60:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
			LCD_DATA_PORT_DIR |= 0xff;
			LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
	#endif
	LCD_sendCommand(CURSOR_OFF);
     d64:	8c e0       	ldi	r24, 0x0C	; 12
     d66:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND);
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_sendCommand>
}
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command){
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	c3 56       	subi	r28, 0x63	; 99
     d84:	d0 40       	sbci	r29, 0x00	; 0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	fe 01       	movw	r30, r28
     d92:	ed 59       	subi	r30, 0x9D	; 157
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	80 83       	st	Z, r24
	clearBit(LCD_CTRL_PORT,RS);
     d98:	a2 e3       	ldi	r26, 0x32	; 50
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e2 e3       	ldi	r30, 0x32	; 50
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8f 7e       	andi	r24, 0xEF	; 239
     da4:	8c 93       	st	X, r24
	clearBit(LCD_CTRL_PORT,RW);
     da6:	a2 e3       	ldi	r26, 0x32	; 50
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e2 e3       	ldi	r30, 0x32	; 50
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8f 7d       	andi	r24, 0xDF	; 223
     db2:	8c 93       	st	X, r24
     db4:	fe 01       	movw	r30, r28
     db6:	e1 5a       	subi	r30, 0xA1	; 161
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	a0 e8       	ldi	r26, 0x80	; 128
     dc0:	bf e3       	ldi	r27, 0x3F	; 63
     dc2:	80 83       	st	Z, r24
     dc4:	91 83       	std	Z+1, r25	; 0x01
     dc6:	a2 83       	std	Z+2, r26	; 0x02
     dc8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dca:	8e 01       	movw	r16, r28
     dcc:	05 5a       	subi	r16, 0xA5	; 165
     dce:	1f 4f       	sbci	r17, 0xFF	; 255
     dd0:	fe 01       	movw	r30, r28
     dd2:	e1 5a       	subi	r30, 0xA1	; 161
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	60 81       	ld	r22, Z
     dd8:	71 81       	ldd	r23, Z+1	; 0x01
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	93 81       	ldd	r25, Z+3	; 0x03
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	4a e7       	ldi	r20, 0x7A	; 122
     de4:	53 e4       	ldi	r21, 0x43	; 67
     de6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	f8 01       	movw	r30, r16
     df0:	80 83       	st	Z, r24
     df2:	91 83       	std	Z+1, r25	; 0x01
     df4:	a2 83       	std	Z+2, r26	; 0x02
     df6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     df8:	fe 01       	movw	r30, r28
     dfa:	e5 5a       	subi	r30, 0xA5	; 165
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	60 81       	ld	r22, Z
     e00:	71 81       	ldd	r23, Z+1	; 0x01
     e02:	82 81       	ldd	r24, Z+2	; 0x02
     e04:	93 81       	ldd	r25, Z+3	; 0x03
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	40 e8       	ldi	r20, 0x80	; 128
     e0c:	5f e3       	ldi	r21, 0x3F	; 63
     e0e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e12:	88 23       	and	r24, r24
     e14:	44 f4       	brge	.+16     	; 0xe26 <LCD_sendCommand+0xb0>
		__ticks = 1;
     e16:	fe 01       	movw	r30, r28
     e18:	e7 5a       	subi	r30, 0xA7	; 167
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	80 83       	st	Z, r24
     e24:	64 c0       	rjmp	.+200    	; 0xeee <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     e26:	fe 01       	movw	r30, r28
     e28:	e5 5a       	subi	r30, 0xA5	; 165
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	60 81       	ld	r22, Z
     e2e:	71 81       	ldd	r23, Z+1	; 0x01
     e30:	82 81       	ldd	r24, Z+2	; 0x02
     e32:	93 81       	ldd	r25, Z+3	; 0x03
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	3f ef       	ldi	r19, 0xFF	; 255
     e38:	4f e7       	ldi	r20, 0x7F	; 127
     e3a:	57 e4       	ldi	r21, 0x47	; 71
     e3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e40:	18 16       	cp	r1, r24
     e42:	0c f0       	brlt	.+2      	; 0xe46 <LCD_sendCommand+0xd0>
     e44:	43 c0       	rjmp	.+134    	; 0xecc <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e46:	fe 01       	movw	r30, r28
     e48:	e1 5a       	subi	r30, 0xA1	; 161
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	60 81       	ld	r22, Z
     e4e:	71 81       	ldd	r23, Z+1	; 0x01
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e2       	ldi	r20, 0x20	; 32
     e5a:	51 e4       	ldi	r21, 0x41	; 65
     e5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	8e 01       	movw	r16, r28
     e66:	07 5a       	subi	r16, 0xA7	; 167
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	bc 01       	movw	r22, r24
     e6c:	cd 01       	movw	r24, r26
     e6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	f8 01       	movw	r30, r16
     e78:	91 83       	std	Z+1, r25	; 0x01
     e7a:	80 83       	st	Z, r24
     e7c:	1f c0       	rjmp	.+62     	; 0xebc <LCD_sendCommand+0x146>
     e7e:	fe 01       	movw	r30, r28
     e80:	e9 5a       	subi	r30, 0xA9	; 169
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	89 e1       	ldi	r24, 0x19	; 25
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	91 83       	std	Z+1, r25	; 0x01
     e8a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e8c:	fe 01       	movw	r30, r28
     e8e:	e9 5a       	subi	r30, 0xA9	; 169
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <LCD_sendCommand+0x120>
     e9a:	fe 01       	movw	r30, r28
     e9c:	e9 5a       	subi	r30, 0xA9	; 169
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	91 83       	std	Z+1, r25	; 0x01
     ea2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea4:	de 01       	movw	r26, r28
     ea6:	a7 5a       	subi	r26, 0xA7	; 167
     ea8:	bf 4f       	sbci	r27, 0xFF	; 255
     eaa:	fe 01       	movw	r30, r28
     eac:	e7 5a       	subi	r30, 0xA7	; 167
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	11 96       	adiw	r26, 0x01	; 1
     eb8:	9c 93       	st	X, r25
     eba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ebc:	fe 01       	movw	r30, r28
     ebe:	e7 5a       	subi	r30, 0xA7	; 167
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	d1 f6       	brne	.-76     	; 0xe7e <LCD_sendCommand+0x108>
     eca:	27 c0       	rjmp	.+78     	; 0xf1a <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ecc:	8e 01       	movw	r16, r28
     ece:	07 5a       	subi	r16, 0xA7	; 167
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
     ed2:	fe 01       	movw	r30, r28
     ed4:	e5 5a       	subi	r30, 0xA5	; 165
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	60 81       	ld	r22, Z
     eda:	71 81       	ldd	r23, Z+1	; 0x01
     edc:	82 81       	ldd	r24, Z+2	; 0x02
     ede:	93 81       	ldd	r25, Z+3	; 0x03
     ee0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	f8 01       	movw	r30, r16
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	80 83       	st	Z, r24
     eee:	de 01       	movw	r26, r28
     ef0:	ab 5a       	subi	r26, 0xAB	; 171
     ef2:	bf 4f       	sbci	r27, 0xFF	; 255
     ef4:	fe 01       	movw	r30, r28
     ef6:	e7 5a       	subi	r30, 0xA7	; 167
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	80 81       	ld	r24, Z
     efc:	91 81       	ldd	r25, Z+1	; 0x01
     efe:	8d 93       	st	X+, r24
     f00:	9c 93       	st	X, r25
     f02:	fe 01       	movw	r30, r28
     f04:	eb 5a       	subi	r30, 0xAB	; 171
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	80 81       	ld	r24, Z
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <LCD_sendCommand+0x196>
     f10:	fe 01       	movw	r30, r28
     f12:	eb 5a       	subi	r30, 0xAB	; 171
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	91 83       	std	Z+1, r25	; 0x01
     f18:	80 83       	st	Z, r24
	_delay_ms(1);
	setBit(LCD_CTRL_PORT,E);
     f1a:	a2 e3       	ldi	r26, 0x32	; 50
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e2 e3       	ldi	r30, 0x32	; 50
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	80 64       	ori	r24, 0x40	; 64
     f26:	8c 93       	st	X, r24
     f28:	fe 01       	movw	r30, r28
     f2a:	ef 5a       	subi	r30, 0xAF	; 175
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	a0 e8       	ldi	r26, 0x80	; 128
     f34:	bf e3       	ldi	r27, 0x3F	; 63
     f36:	80 83       	st	Z, r24
     f38:	91 83       	std	Z+1, r25	; 0x01
     f3a:	a2 83       	std	Z+2, r26	; 0x02
     f3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f3e:	8e 01       	movw	r16, r28
     f40:	03 5b       	subi	r16, 0xB3	; 179
     f42:	1f 4f       	sbci	r17, 0xFF	; 255
     f44:	fe 01       	movw	r30, r28
     f46:	ef 5a       	subi	r30, 0xAF	; 175
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	60 81       	ld	r22, Z
     f4c:	71 81       	ldd	r23, Z+1	; 0x01
     f4e:	82 81       	ldd	r24, Z+2	; 0x02
     f50:	93 81       	ldd	r25, Z+3	; 0x03
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	4a e7       	ldi	r20, 0x7A	; 122
     f58:	53 e4       	ldi	r21, 0x43	; 67
     f5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	f8 01       	movw	r30, r16
     f64:	80 83       	st	Z, r24
     f66:	91 83       	std	Z+1, r25	; 0x01
     f68:	a2 83       	std	Z+2, r26	; 0x02
     f6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f6c:	fe 01       	movw	r30, r28
     f6e:	e3 5b       	subi	r30, 0xB3	; 179
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	60 81       	ld	r22, Z
     f74:	71 81       	ldd	r23, Z+1	; 0x01
     f76:	82 81       	ldd	r24, Z+2	; 0x02
     f78:	93 81       	ldd	r25, Z+3	; 0x03
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e8       	ldi	r20, 0x80	; 128
     f80:	5f e3       	ldi	r21, 0x3F	; 63
     f82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f86:	88 23       	and	r24, r24
     f88:	44 f4       	brge	.+16     	; 0xf9a <LCD_sendCommand+0x224>
		__ticks = 1;
     f8a:	fe 01       	movw	r30, r28
     f8c:	e5 5b       	subi	r30, 0xB5	; 181
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
     f98:	64 c0       	rjmp	.+200    	; 0x1062 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
     f9a:	fe 01       	movw	r30, r28
     f9c:	e3 5b       	subi	r30, 0xB3	; 179
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	60 81       	ld	r22, Z
     fa2:	71 81       	ldd	r23, Z+1	; 0x01
     fa4:	82 81       	ldd	r24, Z+2	; 0x02
     fa6:	93 81       	ldd	r25, Z+3	; 0x03
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	3f ef       	ldi	r19, 0xFF	; 255
     fac:	4f e7       	ldi	r20, 0x7F	; 127
     fae:	57 e4       	ldi	r21, 0x47	; 71
     fb0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fb4:	18 16       	cp	r1, r24
     fb6:	0c f0       	brlt	.+2      	; 0xfba <LCD_sendCommand+0x244>
     fb8:	43 c0       	rjmp	.+134    	; 0x1040 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fba:	fe 01       	movw	r30, r28
     fbc:	ef 5a       	subi	r30, 0xAF	; 175
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	60 81       	ld	r22, Z
     fc2:	71 81       	ldd	r23, Z+1	; 0x01
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	93 81       	ldd	r25, Z+3	; 0x03
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e2       	ldi	r20, 0x20	; 32
     fce:	51 e4       	ldi	r21, 0x41	; 65
     fd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	8e 01       	movw	r16, r28
     fda:	05 5b       	subi	r16, 0xB5	; 181
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
     fde:	bc 01       	movw	r22, r24
     fe0:	cd 01       	movw	r24, r26
     fe2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	f8 01       	movw	r30, r16
     fec:	91 83       	std	Z+1, r25	; 0x01
     fee:	80 83       	st	Z, r24
     ff0:	1f c0       	rjmp	.+62     	; 0x1030 <LCD_sendCommand+0x2ba>
     ff2:	fe 01       	movw	r30, r28
     ff4:	e7 5b       	subi	r30, 0xB7	; 183
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	89 e1       	ldi	r24, 0x19	; 25
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	80 83       	st	Z, r24
    1000:	fe 01       	movw	r30, r28
    1002:	e7 5b       	subi	r30, 0xB7	; 183
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <LCD_sendCommand+0x294>
    100e:	fe 01       	movw	r30, r28
    1010:	e7 5b       	subi	r30, 0xB7	; 183
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	91 83       	std	Z+1, r25	; 0x01
    1016:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1018:	de 01       	movw	r26, r28
    101a:	a5 5b       	subi	r26, 0xB5	; 181
    101c:	bf 4f       	sbci	r27, 0xFF	; 255
    101e:	fe 01       	movw	r30, r28
    1020:	e5 5b       	subi	r30, 0xB5	; 181
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	11 96       	adiw	r26, 0x01	; 1
    102c:	9c 93       	st	X, r25
    102e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1030:	fe 01       	movw	r30, r28
    1032:	e5 5b       	subi	r30, 0xB5	; 181
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	80 81       	ld	r24, Z
    1038:	91 81       	ldd	r25, Z+1	; 0x01
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	d1 f6       	brne	.-76     	; 0xff2 <LCD_sendCommand+0x27c>
    103e:	27 c0       	rjmp	.+78     	; 0x108e <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1040:	8e 01       	movw	r16, r28
    1042:	05 5b       	subi	r16, 0xB5	; 181
    1044:	1f 4f       	sbci	r17, 0xFF	; 255
    1046:	fe 01       	movw	r30, r28
    1048:	e3 5b       	subi	r30, 0xB3	; 179
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	60 81       	ld	r22, Z
    104e:	71 81       	ldd	r23, Z+1	; 0x01
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	f8 01       	movw	r30, r16
    105e:	91 83       	std	Z+1, r25	; 0x01
    1060:	80 83       	st	Z, r24
    1062:	de 01       	movw	r26, r28
    1064:	a9 5b       	subi	r26, 0xB9	; 185
    1066:	bf 4f       	sbci	r27, 0xFF	; 255
    1068:	fe 01       	movw	r30, r28
    106a:	e5 5b       	subi	r30, 0xB5	; 181
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	8d 93       	st	X+, r24
    1074:	9c 93       	st	X, r25
    1076:	fe 01       	movw	r30, r28
    1078:	e9 5b       	subi	r30, 0xB9	; 185
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	80 81       	ld	r24, Z
    107e:	91 81       	ldd	r25, Z+1	; 0x01
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <LCD_sendCommand+0x30a>
    1084:	fe 01       	movw	r30, r28
    1086:	e9 5b       	subi	r30, 0xB9	; 185
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	91 83       	std	Z+1, r25	; 0x01
    108c:	80 83       	st	Z, r24
	_delay_ms(1);
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | (command & 0xf0);
    108e:	a5 e3       	ldi	r26, 0x35	; 53
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e5 e3       	ldi	r30, 0x35	; 53
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	98 2f       	mov	r25, r24
    109a:	9f 70       	andi	r25, 0x0F	; 15
    109c:	fe 01       	movw	r30, r28
    109e:	ed 59       	subi	r30, 0x9D	; 157
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	80 81       	ld	r24, Z
    10a4:	80 7f       	andi	r24, 0xF0	; 240
    10a6:	89 2b       	or	r24, r25
    10a8:	8c 93       	st	X, r24
    10aa:	fe 01       	movw	r30, r28
    10ac:	ed 5b       	subi	r30, 0xBD	; 189
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	a0 e8       	ldi	r26, 0x80	; 128
    10b6:	bf e3       	ldi	r27, 0x3F	; 63
    10b8:	80 83       	st	Z, r24
    10ba:	91 83       	std	Z+1, r25	; 0x01
    10bc:	a2 83       	std	Z+2, r26	; 0x02
    10be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c0:	8e 01       	movw	r16, r28
    10c2:	01 5c       	subi	r16, 0xC1	; 193
    10c4:	1f 4f       	sbci	r17, 0xFF	; 255
    10c6:	fe 01       	movw	r30, r28
    10c8:	ed 5b       	subi	r30, 0xBD	; 189
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	60 81       	ld	r22, Z
    10ce:	71 81       	ldd	r23, Z+1	; 0x01
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	4a e7       	ldi	r20, 0x7A	; 122
    10da:	53 e4       	ldi	r21, 0x43	; 67
    10dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	f8 01       	movw	r30, r16
    10e6:	80 83       	st	Z, r24
    10e8:	91 83       	std	Z+1, r25	; 0x01
    10ea:	a2 83       	std	Z+2, r26	; 0x02
    10ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10ee:	fe 01       	movw	r30, r28
    10f0:	ff 96       	adiw	r30, 0x3f	; 63
    10f2:	60 81       	ld	r22, Z
    10f4:	71 81       	ldd	r23, Z+1	; 0x01
    10f6:	82 81       	ldd	r24, Z+2	; 0x02
    10f8:	93 81       	ldd	r25, Z+3	; 0x03
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e8       	ldi	r20, 0x80	; 128
    1100:	5f e3       	ldi	r21, 0x3F	; 63
    1102:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1106:	88 23       	and	r24, r24
    1108:	2c f4       	brge	.+10     	; 0x1114 <LCD_sendCommand+0x39e>
		__ticks = 1;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	9e af       	std	Y+62, r25	; 0x3e
    1110:	8d af       	std	Y+61, r24	; 0x3d
    1112:	46 c0       	rjmp	.+140    	; 0x11a0 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1114:	fe 01       	movw	r30, r28
    1116:	ff 96       	adiw	r30, 0x3f	; 63
    1118:	60 81       	ld	r22, Z
    111a:	71 81       	ldd	r23, Z+1	; 0x01
    111c:	82 81       	ldd	r24, Z+2	; 0x02
    111e:	93 81       	ldd	r25, Z+3	; 0x03
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    112c:	18 16       	cp	r1, r24
    112e:	64 f5       	brge	.+88     	; 0x1188 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1130:	fe 01       	movw	r30, r28
    1132:	ed 5b       	subi	r30, 0xBD	; 189
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	60 81       	ld	r22, Z
    1138:	71 81       	ldd	r23, Z+1	; 0x01
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	93 81       	ldd	r25, Z+3	; 0x03
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e2       	ldi	r20, 0x20	; 32
    1144:	51 e4       	ldi	r21, 0x41	; 65
    1146:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	9e af       	std	Y+62, r25	; 0x3e
    115c:	8d af       	std	Y+61, r24	; 0x3d
    115e:	0f c0       	rjmp	.+30     	; 0x117e <LCD_sendCommand+0x408>
    1160:	89 e1       	ldi	r24, 0x19	; 25
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	9c af       	std	Y+60, r25	; 0x3c
    1166:	8b af       	std	Y+59, r24	; 0x3b
    1168:	8b ad       	ldd	r24, Y+59	; 0x3b
    116a:	9c ad       	ldd	r25, Y+60	; 0x3c
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <LCD_sendCommand+0x3f6>
    1170:	9c af       	std	Y+60, r25	; 0x3c
    1172:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1174:	8d ad       	ldd	r24, Y+61	; 0x3d
    1176:	9e ad       	ldd	r25, Y+62	; 0x3e
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	9e af       	std	Y+62, r25	; 0x3e
    117c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1180:	9e ad       	ldd	r25, Y+62	; 0x3e
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	69 f7       	brne	.-38     	; 0x1160 <LCD_sendCommand+0x3ea>
    1186:	16 c0       	rjmp	.+44     	; 0x11b4 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1188:	fe 01       	movw	r30, r28
    118a:	ff 96       	adiw	r30, 0x3f	; 63
    118c:	60 81       	ld	r22, Z
    118e:	71 81       	ldd	r23, Z+1	; 0x01
    1190:	82 81       	ldd	r24, Z+2	; 0x02
    1192:	93 81       	ldd	r25, Z+3	; 0x03
    1194:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	9e af       	std	Y+62, r25	; 0x3e
    119e:	8d af       	std	Y+61, r24	; 0x3d
    11a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    11a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    11a4:	9a af       	std	Y+58, r25	; 0x3a
    11a6:	89 af       	std	Y+57, r24	; 0x39
    11a8:	89 ad       	ldd	r24, Y+57	; 0x39
    11aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <LCD_sendCommand+0x436>
    11b0:	9a af       	std	Y+58, r25	; 0x3a
    11b2:	89 af       	std	Y+57, r24	; 0x39
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xf0) | ((command & 0xf0) >> 4);
		#endif
		_delay_ms(1);
		clearBit(LCD_CTRL_PORT,E);
    11b4:	a2 e3       	ldi	r26, 0x32	; 50
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e2 e3       	ldi	r30, 0x32	; 50
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8f 7b       	andi	r24, 0xBF	; 191
    11c0:	8c 93       	st	X, r24
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a0 e8       	ldi	r26, 0x80	; 128
    11c8:	bf e3       	ldi	r27, 0x3F	; 63
    11ca:	8d ab       	std	Y+53, r24	; 0x35
    11cc:	9e ab       	std	Y+54, r25	; 0x36
    11ce:	af ab       	std	Y+55, r26	; 0x37
    11d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d2:	6d a9       	ldd	r22, Y+53	; 0x35
    11d4:	7e a9       	ldd	r23, Y+54	; 0x36
    11d6:	8f a9       	ldd	r24, Y+55	; 0x37
    11d8:	98 ad       	ldd	r25, Y+56	; 0x38
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	4a e7       	ldi	r20, 0x7A	; 122
    11e0:	53 e4       	ldi	r21, 0x43	; 67
    11e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	89 ab       	std	Y+49, r24	; 0x31
    11ec:	9a ab       	std	Y+50, r25	; 0x32
    11ee:	ab ab       	std	Y+51, r26	; 0x33
    11f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11f2:	69 a9       	ldd	r22, Y+49	; 0x31
    11f4:	7a a9       	ldd	r23, Y+50	; 0x32
    11f6:	8b a9       	ldd	r24, Y+51	; 0x33
    11f8:	9c a9       	ldd	r25, Y+52	; 0x34
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e8       	ldi	r20, 0x80	; 128
    1200:	5f e3       	ldi	r21, 0x3F	; 63
    1202:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1206:	88 23       	and	r24, r24
    1208:	2c f4       	brge	.+10     	; 0x1214 <LCD_sendCommand+0x49e>
		__ticks = 1;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	98 ab       	std	Y+48, r25	; 0x30
    1210:	8f a7       	std	Y+47, r24	; 0x2f
    1212:	3f c0       	rjmp	.+126    	; 0x1292 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1214:	69 a9       	ldd	r22, Y+49	; 0x31
    1216:	7a a9       	ldd	r23, Y+50	; 0x32
    1218:	8b a9       	ldd	r24, Y+51	; 0x33
    121a:	9c a9       	ldd	r25, Y+52	; 0x34
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	3f ef       	ldi	r19, 0xFF	; 255
    1220:	4f e7       	ldi	r20, 0x7F	; 127
    1222:	57 e4       	ldi	r21, 0x47	; 71
    1224:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1228:	18 16       	cp	r1, r24
    122a:	4c f5       	brge	.+82     	; 0x127e <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122c:	6d a9       	ldd	r22, Y+53	; 0x35
    122e:	7e a9       	ldd	r23, Y+54	; 0x36
    1230:	8f a9       	ldd	r24, Y+55	; 0x37
    1232:	98 ad       	ldd	r25, Y+56	; 0x38
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e2       	ldi	r20, 0x20	; 32
    123a:	51 e4       	ldi	r21, 0x41	; 65
    123c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	bc 01       	movw	r22, r24
    1246:	cd 01       	movw	r24, r26
    1248:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	98 ab       	std	Y+48, r25	; 0x30
    1252:	8f a7       	std	Y+47, r24	; 0x2f
    1254:	0f c0       	rjmp	.+30     	; 0x1274 <LCD_sendCommand+0x4fe>
    1256:	89 e1       	ldi	r24, 0x19	; 25
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9e a7       	std	Y+46, r25	; 0x2e
    125c:	8d a7       	std	Y+45, r24	; 0x2d
    125e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1260:	9e a5       	ldd	r25, Y+46	; 0x2e
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <LCD_sendCommand+0x4ec>
    1266:	9e a7       	std	Y+46, r25	; 0x2e
    1268:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126a:	8f a5       	ldd	r24, Y+47	; 0x2f
    126c:	98 a9       	ldd	r25, Y+48	; 0x30
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	98 ab       	std	Y+48, r25	; 0x30
    1272:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1274:	8f a5       	ldd	r24, Y+47	; 0x2f
    1276:	98 a9       	ldd	r25, Y+48	; 0x30
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	69 f7       	brne	.-38     	; 0x1256 <LCD_sendCommand+0x4e0>
    127c:	14 c0       	rjmp	.+40     	; 0x12a6 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    127e:	69 a9       	ldd	r22, Y+49	; 0x31
    1280:	7a a9       	ldd	r23, Y+50	; 0x32
    1282:	8b a9       	ldd	r24, Y+51	; 0x33
    1284:	9c a9       	ldd	r25, Y+52	; 0x34
    1286:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	98 ab       	std	Y+48, r25	; 0x30
    1290:	8f a7       	std	Y+47, r24	; 0x2f
    1292:	8f a5       	ldd	r24, Y+47	; 0x2f
    1294:	98 a9       	ldd	r25, Y+48	; 0x30
    1296:	9c a7       	std	Y+44, r25	; 0x2c
    1298:	8b a7       	std	Y+43, r24	; 0x2b
    129a:	8b a5       	ldd	r24, Y+43	; 0x2b
    129c:	9c a5       	ldd	r25, Y+44	; 0x2c
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <LCD_sendCommand+0x528>
    12a2:	9c a7       	std	Y+44, r25	; 0x2c
    12a4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		setBit(LCD_CTRL_PORT,E);
    12a6:	a2 e3       	ldi	r26, 0x32	; 50
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e2 e3       	ldi	r30, 0x32	; 50
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	80 64       	ori	r24, 0x40	; 64
    12b2:	8c 93       	st	X, r24
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a0 e8       	ldi	r26, 0x80	; 128
    12ba:	bf e3       	ldi	r27, 0x3F	; 63
    12bc:	8f a3       	std	Y+39, r24	; 0x27
    12be:	98 a7       	std	Y+40, r25	; 0x28
    12c0:	a9 a7       	std	Y+41, r26	; 0x29
    12c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c4:	6f a1       	ldd	r22, Y+39	; 0x27
    12c6:	78 a5       	ldd	r23, Y+40	; 0x28
    12c8:	89 a5       	ldd	r24, Y+41	; 0x29
    12ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	4a e7       	ldi	r20, 0x7A	; 122
    12d2:	53 e4       	ldi	r21, 0x43	; 67
    12d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	8b a3       	std	Y+35, r24	; 0x23
    12de:	9c a3       	std	Y+36, r25	; 0x24
    12e0:	ad a3       	std	Y+37, r26	; 0x25
    12e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12e4:	6b a1       	ldd	r22, Y+35	; 0x23
    12e6:	7c a1       	ldd	r23, Y+36	; 0x24
    12e8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ea:	9e a1       	ldd	r25, Y+38	; 0x26
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e8       	ldi	r20, 0x80	; 128
    12f2:	5f e3       	ldi	r21, 0x3F	; 63
    12f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12f8:	88 23       	and	r24, r24
    12fa:	2c f4       	brge	.+10     	; 0x1306 <LCD_sendCommand+0x590>
		__ticks = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	9a a3       	std	Y+34, r25	; 0x22
    1302:	89 a3       	std	Y+33, r24	; 0x21
    1304:	3f c0       	rjmp	.+126    	; 0x1384 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1306:	6b a1       	ldd	r22, Y+35	; 0x23
    1308:	7c a1       	ldd	r23, Y+36	; 0x24
    130a:	8d a1       	ldd	r24, Y+37	; 0x25
    130c:	9e a1       	ldd	r25, Y+38	; 0x26
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	3f ef       	ldi	r19, 0xFF	; 255
    1312:	4f e7       	ldi	r20, 0x7F	; 127
    1314:	57 e4       	ldi	r21, 0x47	; 71
    1316:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    131a:	18 16       	cp	r1, r24
    131c:	4c f5       	brge	.+82     	; 0x1370 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131e:	6f a1       	ldd	r22, Y+39	; 0x27
    1320:	78 a5       	ldd	r23, Y+40	; 0x28
    1322:	89 a5       	ldd	r24, Y+41	; 0x29
    1324:	9a a5       	ldd	r25, Y+42	; 0x2a
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e2       	ldi	r20, 0x20	; 32
    132c:	51 e4       	ldi	r21, 0x41	; 65
    132e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
    1346:	0f c0       	rjmp	.+30     	; 0x1366 <LCD_sendCommand+0x5f0>
    1348:	89 e1       	ldi	r24, 0x19	; 25
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	98 a3       	std	Y+32, r25	; 0x20
    134e:	8f 8f       	std	Y+31, r24	; 0x1f
    1350:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1352:	98 a1       	ldd	r25, Y+32	; 0x20
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <LCD_sendCommand+0x5de>
    1358:	98 a3       	std	Y+32, r25	; 0x20
    135a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135c:	89 a1       	ldd	r24, Y+33	; 0x21
    135e:	9a a1       	ldd	r25, Y+34	; 0x22
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	9a a3       	std	Y+34, r25	; 0x22
    1364:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1366:	89 a1       	ldd	r24, Y+33	; 0x21
    1368:	9a a1       	ldd	r25, Y+34	; 0x22
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	69 f7       	brne	.-38     	; 0x1348 <LCD_sendCommand+0x5d2>
    136e:	14 c0       	rjmp	.+40     	; 0x1398 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1370:	6b a1       	ldd	r22, Y+35	; 0x23
    1372:	7c a1       	ldd	r23, Y+36	; 0x24
    1374:	8d a1       	ldd	r24, Y+37	; 0x25
    1376:	9e a1       	ldd	r25, Y+38	; 0x26
    1378:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	9a a3       	std	Y+34, r25	; 0x22
    1382:	89 a3       	std	Y+33, r24	; 0x21
    1384:	89 a1       	ldd	r24, Y+33	; 0x21
    1386:	9a a1       	ldd	r25, Y+34	; 0x22
    1388:	9e 8f       	std	Y+30, r25	; 0x1e
    138a:	8d 8f       	std	Y+29, r24	; 0x1d
    138c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    138e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <LCD_sendCommand+0x61a>
    1394:	9e 8f       	std	Y+30, r25	; 0x1e
    1396:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | ((command&0x0f)<< 4);
    1398:	a5 e3       	ldi	r26, 0x35	; 53
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e5 e3       	ldi	r30, 0x35	; 53
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	28 2f       	mov	r18, r24
    13a4:	2f 70       	andi	r18, 0x0F	; 15
    13a6:	fe 01       	movw	r30, r28
    13a8:	ed 59       	subi	r30, 0x9D	; 157
    13aa:	ff 4f       	sbci	r31, 0xFF	; 255
    13ac:	80 81       	ld	r24, Z
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	82 95       	swap	r24
    13b4:	92 95       	swap	r25
    13b6:	90 7f       	andi	r25, 0xF0	; 240
    13b8:	98 27       	eor	r25, r24
    13ba:	80 7f       	andi	r24, 0xF0	; 240
    13bc:	98 27       	eor	r25, r24
    13be:	82 2b       	or	r24, r18
    13c0:	8c 93       	st	X, r24
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 e8       	ldi	r26, 0x80	; 128
    13c8:	bf e3       	ldi	r27, 0x3F	; 63
    13ca:	89 8f       	std	Y+25, r24	; 0x19
    13cc:	9a 8f       	std	Y+26, r25	; 0x1a
    13ce:	ab 8f       	std	Y+27, r26	; 0x1b
    13d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d2:	69 8d       	ldd	r22, Y+25	; 0x19
    13d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a e7       	ldi	r20, 0x7A	; 122
    13e0:	53 e4       	ldi	r21, 0x43	; 67
    13e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	8d 8b       	std	Y+21, r24	; 0x15
    13ec:	9e 8b       	std	Y+22, r25	; 0x16
    13ee:	af 8b       	std	Y+23, r26	; 0x17
    13f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13f2:	6d 89       	ldd	r22, Y+21	; 0x15
    13f4:	7e 89       	ldd	r23, Y+22	; 0x16
    13f6:	8f 89       	ldd	r24, Y+23	; 0x17
    13f8:	98 8d       	ldd	r25, Y+24	; 0x18
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1406:	88 23       	and	r24, r24
    1408:	2c f4       	brge	.+10     	; 0x1414 <LCD_sendCommand+0x69e>
		__ticks = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9c 8b       	std	Y+20, r25	; 0x14
    1410:	8b 8b       	std	Y+19, r24	; 0x13
    1412:	3f c0       	rjmp	.+126    	; 0x1492 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1414:	6d 89       	ldd	r22, Y+21	; 0x15
    1416:	7e 89       	ldd	r23, Y+22	; 0x16
    1418:	8f 89       	ldd	r24, Y+23	; 0x17
    141a:	98 8d       	ldd	r25, Y+24	; 0x18
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	4f e7       	ldi	r20, 0x7F	; 127
    1422:	57 e4       	ldi	r21, 0x47	; 71
    1424:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1428:	18 16       	cp	r1, r24
    142a:	4c f5       	brge	.+82     	; 0x147e <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	69 8d       	ldd	r22, Y+25	; 0x19
    142e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	51 e4       	ldi	r21, 0x41	; 65
    143c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9c 8b       	std	Y+20, r25	; 0x14
    1452:	8b 8b       	std	Y+19, r24	; 0x13
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <LCD_sendCommand+0x6fe>
    1456:	89 e1       	ldi	r24, 0x19	; 25
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	9a 8b       	std	Y+18, r25	; 0x12
    145c:	89 8b       	std	Y+17, r24	; 0x11
    145e:	89 89       	ldd	r24, Y+17	; 0x11
    1460:	9a 89       	ldd	r25, Y+18	; 0x12
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <LCD_sendCommand+0x6ec>
    1466:	9a 8b       	std	Y+18, r25	; 0x12
    1468:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146a:	8b 89       	ldd	r24, Y+19	; 0x13
    146c:	9c 89       	ldd	r25, Y+20	; 0x14
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	9c 8b       	std	Y+20, r25	; 0x14
    1472:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1474:	8b 89       	ldd	r24, Y+19	; 0x13
    1476:	9c 89       	ldd	r25, Y+20	; 0x14
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	69 f7       	brne	.-38     	; 0x1456 <LCD_sendCommand+0x6e0>
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147e:	6d 89       	ldd	r22, Y+21	; 0x15
    1480:	7e 89       	ldd	r23, Y+22	; 0x16
    1482:	8f 89       	ldd	r24, Y+23	; 0x17
    1484:	98 8d       	ldd	r25, Y+24	; 0x18
    1486:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9c 8b       	std	Y+20, r25	; 0x14
    1490:	8b 8b       	std	Y+19, r24	; 0x13
    1492:	8b 89       	ldd	r24, Y+19	; 0x13
    1494:	9c 89       	ldd	r25, Y+20	; 0x14
    1496:	98 8b       	std	Y+16, r25	; 0x10
    1498:	8f 87       	std	Y+15, r24	; 0x0f
    149a:	8f 85       	ldd	r24, Y+15	; 0x0f
    149c:	98 89       	ldd	r25, Y+16	; 0x10
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <LCD_sendCommand+0x728>
    14a2:	98 8b       	std	Y+16, r25	; 0x10
    14a4:	8f 87       	std	Y+15, r24	; 0x0f
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xf0) | (command & 0x0f);
		#endif
		_delay_ms(1);
		clearBit(LCD_CTRL_PORT,E);
    14a6:	a2 e3       	ldi	r26, 0x32	; 50
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e2 e3       	ldi	r30, 0x32	; 50
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	8f 7b       	andi	r24, 0xBF	; 191
    14b2:	8c 93       	st	X, r24
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	a0 e8       	ldi	r26, 0x80	; 128
    14ba:	bf e3       	ldi	r27, 0x3F	; 63
    14bc:	8b 87       	std	Y+11, r24	; 0x0b
    14be:	9c 87       	std	Y+12, r25	; 0x0c
    14c0:	ad 87       	std	Y+13, r26	; 0x0d
    14c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	4a e7       	ldi	r20, 0x7A	; 122
    14d2:	53 e4       	ldi	r21, 0x43	; 67
    14d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	8f 83       	std	Y+7, r24	; 0x07
    14de:	98 87       	std	Y+8, r25	; 0x08
    14e0:	a9 87       	std	Y+9, r26	; 0x09
    14e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14e4:	6f 81       	ldd	r22, Y+7	; 0x07
    14e6:	78 85       	ldd	r23, Y+8	; 0x08
    14e8:	89 85       	ldd	r24, Y+9	; 0x09
    14ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e8       	ldi	r20, 0x80	; 128
    14f2:	5f e3       	ldi	r21, 0x3F	; 63
    14f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14f8:	88 23       	and	r24, r24
    14fa:	2c f4       	brge	.+10     	; 0x1506 <LCD_sendCommand+0x790>
		__ticks = 1;
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
    1504:	3f c0       	rjmp	.+126    	; 0x1584 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1506:	6f 81       	ldd	r22, Y+7	; 0x07
    1508:	78 85       	ldd	r23, Y+8	; 0x08
    150a:	89 85       	ldd	r24, Y+9	; 0x09
    150c:	9a 85       	ldd	r25, Y+10	; 0x0a
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	3f ef       	ldi	r19, 0xFF	; 255
    1512:	4f e7       	ldi	r20, 0x7F	; 127
    1514:	57 e4       	ldi	r21, 0x47	; 71
    1516:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    151a:	18 16       	cp	r1, r24
    151c:	4c f5       	brge	.+82     	; 0x1570 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1520:	7c 85       	ldd	r23, Y+12	; 0x0c
    1522:	8d 85       	ldd	r24, Y+13	; 0x0d
    1524:	9e 85       	ldd	r25, Y+14	; 0x0e
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e2       	ldi	r20, 0x20	; 32
    152c:	51 e4       	ldi	r21, 0x41	; 65
    152e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	bc 01       	movw	r22, r24
    1538:	cd 01       	movw	r24, r26
    153a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	9e 83       	std	Y+6, r25	; 0x06
    1544:	8d 83       	std	Y+5, r24	; 0x05
    1546:	0f c0       	rjmp	.+30     	; 0x1566 <LCD_sendCommand+0x7f0>
    1548:	89 e1       	ldi	r24, 0x19	; 25
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	8b 83       	std	Y+3, r24	; 0x03
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <LCD_sendCommand+0x7de>
    1558:	9c 83       	std	Y+4, r25	; 0x04
    155a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	69 f7       	brne	.-38     	; 0x1548 <LCD_sendCommand+0x7d2>
    156e:	14 c0       	rjmp	.+40     	; 0x1598 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1570:	6f 81       	ldd	r22, Y+7	; 0x07
    1572:	78 85       	ldd	r23, Y+8	; 0x08
    1574:	89 85       	ldd	r24, Y+9	; 0x09
    1576:	9a 85       	ldd	r25, Y+10	; 0x0a
    1578:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	9e 83       	std	Y+6, r25	; 0x06
    1582:	8d 83       	std	Y+5, r24	; 0x05
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	9a 83       	std	Y+2, r25	; 0x02
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	f1 f7       	brne	.-4      	; 0x1590 <LCD_sendCommand+0x81a>
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = command;
		_delay_ms(1);
		clearBit(LCD_CTRL_PORT,E);
		_delay_ms(1);
	#endif
}
    1598:	cd 59       	subi	r28, 0x9D	; 157
    159a:	df 4f       	sbci	r29, 0xFF	; 255
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	08 95       	ret

000015b0 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data){
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	c3 56       	subi	r28, 0x63	; 99
    15be:	d0 40       	sbci	r29, 0x00	; 0
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	fe 01       	movw	r30, r28
    15cc:	ed 59       	subi	r30, 0x9D	; 157
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	80 83       	st	Z, r24
	setBit(LCD_CTRL_PORT,RS);
    15d2:	a2 e3       	ldi	r26, 0x32	; 50
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e2 e3       	ldi	r30, 0x32	; 50
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	80 61       	ori	r24, 0x10	; 16
    15de:	8c 93       	st	X, r24
	clearBit(LCD_CTRL_PORT,RW);
    15e0:	a2 e3       	ldi	r26, 0x32	; 50
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e2 e3       	ldi	r30, 0x32	; 50
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8f 7d       	andi	r24, 0xDF	; 223
    15ec:	8c 93       	st	X, r24
    15ee:	fe 01       	movw	r30, r28
    15f0:	e1 5a       	subi	r30, 0xA1	; 161
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a0 e8       	ldi	r26, 0x80	; 128
    15fa:	bf e3       	ldi	r27, 0x3F	; 63
    15fc:	80 83       	st	Z, r24
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	a2 83       	std	Z+2, r26	; 0x02
    1602:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1604:	8e 01       	movw	r16, r28
    1606:	05 5a       	subi	r16, 0xA5	; 165
    1608:	1f 4f       	sbci	r17, 0xFF	; 255
    160a:	fe 01       	movw	r30, r28
    160c:	e1 5a       	subi	r30, 0xA1	; 161
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a e7       	ldi	r20, 0x7A	; 122
    161e:	53 e4       	ldi	r21, 0x43	; 67
    1620:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	f8 01       	movw	r30, r16
    162a:	80 83       	st	Z, r24
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	a2 83       	std	Z+2, r26	; 0x02
    1630:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1632:	fe 01       	movw	r30, r28
    1634:	e5 5a       	subi	r30, 0xA5	; 165
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	60 81       	ld	r22, Z
    163a:	71 81       	ldd	r23, Z+1	; 0x01
    163c:	82 81       	ldd	r24, Z+2	; 0x02
    163e:	93 81       	ldd	r25, Z+3	; 0x03
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e8       	ldi	r20, 0x80	; 128
    1646:	5f e3       	ldi	r21, 0x3F	; 63
    1648:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    164c:	88 23       	and	r24, r24
    164e:	44 f4       	brge	.+16     	; 0x1660 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1650:	fe 01       	movw	r30, r28
    1652:	e7 5a       	subi	r30, 0xA7	; 167
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
    165e:	64 c0       	rjmp	.+200    	; 0x1728 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1660:	fe 01       	movw	r30, r28
    1662:	e5 5a       	subi	r30, 0xA5	; 165
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	60 81       	ld	r22, Z
    1668:	71 81       	ldd	r23, Z+1	; 0x01
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	3f ef       	ldi	r19, 0xFF	; 255
    1672:	4f e7       	ldi	r20, 0x7F	; 127
    1674:	57 e4       	ldi	r21, 0x47	; 71
    1676:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    167a:	18 16       	cp	r1, r24
    167c:	0c f0       	brlt	.+2      	; 0x1680 <LCD_displayCharacter+0xd0>
    167e:	43 c0       	rjmp	.+134    	; 0x1706 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1680:	fe 01       	movw	r30, r28
    1682:	e1 5a       	subi	r30, 0xA1	; 161
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	60 81       	ld	r22, Z
    1688:	71 81       	ldd	r23, Z+1	; 0x01
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e2       	ldi	r20, 0x20	; 32
    1694:	51 e4       	ldi	r21, 0x41	; 65
    1696:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	8e 01       	movw	r16, r28
    16a0:	07 5a       	subi	r16, 0xA7	; 167
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	f8 01       	movw	r30, r16
    16b2:	91 83       	std	Z+1, r25	; 0x01
    16b4:	80 83       	st	Z, r24
    16b6:	1f c0       	rjmp	.+62     	; 0x16f6 <LCD_displayCharacter+0x146>
    16b8:	fe 01       	movw	r30, r28
    16ba:	e9 5a       	subi	r30, 0xA9	; 169
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	89 e1       	ldi	r24, 0x19	; 25
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	80 83       	st	Z, r24
    16c6:	fe 01       	movw	r30, r28
    16c8:	e9 5a       	subi	r30, 0xA9	; 169
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	80 81       	ld	r24, Z
    16ce:	91 81       	ldd	r25, Z+1	; 0x01
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <LCD_displayCharacter+0x120>
    16d4:	fe 01       	movw	r30, r28
    16d6:	e9 5a       	subi	r30, 0xA9	; 169
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16de:	de 01       	movw	r26, r28
    16e0:	a7 5a       	subi	r26, 0xA7	; 167
    16e2:	bf 4f       	sbci	r27, 0xFF	; 255
    16e4:	fe 01       	movw	r30, r28
    16e6:	e7 5a       	subi	r30, 0xA7	; 167
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	80 81       	ld	r24, Z
    16ec:	91 81       	ldd	r25, Z+1	; 0x01
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	11 96       	adiw	r26, 0x01	; 1
    16f2:	9c 93       	st	X, r25
    16f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f6:	fe 01       	movw	r30, r28
    16f8:	e7 5a       	subi	r30, 0xA7	; 167
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	80 81       	ld	r24, Z
    16fe:	91 81       	ldd	r25, Z+1	; 0x01
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	d1 f6       	brne	.-76     	; 0x16b8 <LCD_displayCharacter+0x108>
    1704:	27 c0       	rjmp	.+78     	; 0x1754 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1706:	8e 01       	movw	r16, r28
    1708:	07 5a       	subi	r16, 0xA7	; 167
    170a:	1f 4f       	sbci	r17, 0xFF	; 255
    170c:	fe 01       	movw	r30, r28
    170e:	e5 5a       	subi	r30, 0xA5	; 165
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	f8 01       	movw	r30, r16
    1724:	91 83       	std	Z+1, r25	; 0x01
    1726:	80 83       	st	Z, r24
    1728:	de 01       	movw	r26, r28
    172a:	ab 5a       	subi	r26, 0xAB	; 171
    172c:	bf 4f       	sbci	r27, 0xFF	; 255
    172e:	fe 01       	movw	r30, r28
    1730:	e7 5a       	subi	r30, 0xA7	; 167
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	8d 93       	st	X+, r24
    173a:	9c 93       	st	X, r25
    173c:	fe 01       	movw	r30, r28
    173e:	eb 5a       	subi	r30, 0xAB	; 171
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	80 81       	ld	r24, Z
    1744:	91 81       	ldd	r25, Z+1	; 0x01
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <LCD_displayCharacter+0x196>
    174a:	fe 01       	movw	r30, r28
    174c:	eb 5a       	subi	r30, 0xAB	; 171
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	80 83       	st	Z, r24
	_delay_ms(1);
	setBit(LCD_CTRL_PORT,E);
    1754:	a2 e3       	ldi	r26, 0x32	; 50
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e2 e3       	ldi	r30, 0x32	; 50
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	80 64       	ori	r24, 0x40	; 64
    1760:	8c 93       	st	X, r24
    1762:	fe 01       	movw	r30, r28
    1764:	ef 5a       	subi	r30, 0xAF	; 175
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a0 e8       	ldi	r26, 0x80	; 128
    176e:	bf e3       	ldi	r27, 0x3F	; 63
    1770:	80 83       	st	Z, r24
    1772:	91 83       	std	Z+1, r25	; 0x01
    1774:	a2 83       	std	Z+2, r26	; 0x02
    1776:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1778:	8e 01       	movw	r16, r28
    177a:	03 5b       	subi	r16, 0xB3	; 179
    177c:	1f 4f       	sbci	r17, 0xFF	; 255
    177e:	fe 01       	movw	r30, r28
    1780:	ef 5a       	subi	r30, 0xAF	; 175
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	4a e7       	ldi	r20, 0x7A	; 122
    1792:	53 e4       	ldi	r21, 0x43	; 67
    1794:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	f8 01       	movw	r30, r16
    179e:	80 83       	st	Z, r24
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	a2 83       	std	Z+2, r26	; 0x02
    17a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17a6:	fe 01       	movw	r30, r28
    17a8:	e3 5b       	subi	r30, 0xB3	; 179
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	60 81       	ld	r22, Z
    17ae:	71 81       	ldd	r23, Z+1	; 0x01
    17b0:	82 81       	ldd	r24, Z+2	; 0x02
    17b2:	93 81       	ldd	r25, Z+3	; 0x03
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	44 f4       	brge	.+16     	; 0x17d4 <LCD_displayCharacter+0x224>
		__ticks = 1;
    17c4:	fe 01       	movw	r30, r28
    17c6:	e5 5b       	subi	r30, 0xB5	; 181
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24
    17d2:	64 c0       	rjmp	.+200    	; 0x189c <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    17d4:	fe 01       	movw	r30, r28
    17d6:	e3 5b       	subi	r30, 0xB3	; 179
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	4f e7       	ldi	r20, 0x7F	; 127
    17e8:	57 e4       	ldi	r21, 0x47	; 71
    17ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17ee:	18 16       	cp	r1, r24
    17f0:	0c f0       	brlt	.+2      	; 0x17f4 <LCD_displayCharacter+0x244>
    17f2:	43 c0       	rjmp	.+134    	; 0x187a <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f4:	fe 01       	movw	r30, r28
    17f6:	ef 5a       	subi	r30, 0xAF	; 175
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8e 01       	movw	r16, r28
    1814:	05 5b       	subi	r16, 0xB5	; 181
    1816:	1f 4f       	sbci	r17, 0xFF	; 255
    1818:	bc 01       	movw	r22, r24
    181a:	cd 01       	movw	r24, r26
    181c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	f8 01       	movw	r30, r16
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	1f c0       	rjmp	.+62     	; 0x186a <LCD_displayCharacter+0x2ba>
    182c:	fe 01       	movw	r30, r28
    182e:	e7 5b       	subi	r30, 0xB7	; 183
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	89 e1       	ldi	r24, 0x19	; 25
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	80 83       	st	Z, r24
    183a:	fe 01       	movw	r30, r28
    183c:	e7 5b       	subi	r30, 0xB7	; 183
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <LCD_displayCharacter+0x294>
    1848:	fe 01       	movw	r30, r28
    184a:	e7 5b       	subi	r30, 0xB7	; 183
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1852:	de 01       	movw	r26, r28
    1854:	a5 5b       	subi	r26, 0xB5	; 181
    1856:	bf 4f       	sbci	r27, 0xFF	; 255
    1858:	fe 01       	movw	r30, r28
    185a:	e5 5b       	subi	r30, 0xB5	; 181
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	11 96       	adiw	r26, 0x01	; 1
    1866:	9c 93       	st	X, r25
    1868:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186a:	fe 01       	movw	r30, r28
    186c:	e5 5b       	subi	r30, 0xB5	; 181
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	d1 f6       	brne	.-76     	; 0x182c <LCD_displayCharacter+0x27c>
    1878:	27 c0       	rjmp	.+78     	; 0x18c8 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187a:	8e 01       	movw	r16, r28
    187c:	05 5b       	subi	r16, 0xB5	; 181
    187e:	1f 4f       	sbci	r17, 0xFF	; 255
    1880:	fe 01       	movw	r30, r28
    1882:	e3 5b       	subi	r30, 0xB3	; 179
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	f8 01       	movw	r30, r16
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	80 83       	st	Z, r24
    189c:	de 01       	movw	r26, r28
    189e:	a9 5b       	subi	r26, 0xB9	; 185
    18a0:	bf 4f       	sbci	r27, 0xFF	; 255
    18a2:	fe 01       	movw	r30, r28
    18a4:	e5 5b       	subi	r30, 0xB5	; 181
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	8d 93       	st	X+, r24
    18ae:	9c 93       	st	X, r25
    18b0:	fe 01       	movw	r30, r28
    18b2:	e9 5b       	subi	r30, 0xB9	; 185
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <LCD_displayCharacter+0x30a>
    18be:	fe 01       	movw	r30, r28
    18c0:	e9 5b       	subi	r30, 0xB9	; 185
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
	_delay_ms(1);
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | (data&0xf0);
    18c8:	a5 e3       	ldi	r26, 0x35	; 53
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e3       	ldi	r30, 0x35	; 53
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	98 2f       	mov	r25, r24
    18d4:	9f 70       	andi	r25, 0x0F	; 15
    18d6:	fe 01       	movw	r30, r28
    18d8:	ed 59       	subi	r30, 0x9D	; 157
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 81       	ld	r24, Z
    18de:	80 7f       	andi	r24, 0xF0	; 240
    18e0:	89 2b       	or	r24, r25
    18e2:	8c 93       	st	X, r24
    18e4:	fe 01       	movw	r30, r28
    18e6:	ed 5b       	subi	r30, 0xBD	; 189
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a0 e8       	ldi	r26, 0x80	; 128
    18f0:	bf e3       	ldi	r27, 0x3F	; 63
    18f2:	80 83       	st	Z, r24
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	a2 83       	std	Z+2, r26	; 0x02
    18f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fa:	8e 01       	movw	r16, r28
    18fc:	01 5c       	subi	r16, 0xC1	; 193
    18fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1900:	fe 01       	movw	r30, r28
    1902:	ed 5b       	subi	r30, 0xBD	; 189
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	93 81       	ldd	r25, Z+3	; 0x03
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	4a e7       	ldi	r20, 0x7A	; 122
    1914:	53 e4       	ldi	r21, 0x43	; 67
    1916:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	f8 01       	movw	r30, r16
    1920:	80 83       	st	Z, r24
    1922:	91 83       	std	Z+1, r25	; 0x01
    1924:	a2 83       	std	Z+2, r26	; 0x02
    1926:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1928:	fe 01       	movw	r30, r28
    192a:	ff 96       	adiw	r30, 0x3f	; 63
    192c:	60 81       	ld	r22, Z
    192e:	71 81       	ldd	r23, Z+1	; 0x01
    1930:	82 81       	ldd	r24, Z+2	; 0x02
    1932:	93 81       	ldd	r25, Z+3	; 0x03
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e8       	ldi	r20, 0x80	; 128
    193a:	5f e3       	ldi	r21, 0x3F	; 63
    193c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1940:	88 23       	and	r24, r24
    1942:	2c f4       	brge	.+10     	; 0x194e <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9e af       	std	Y+62, r25	; 0x3e
    194a:	8d af       	std	Y+61, r24	; 0x3d
    194c:	46 c0       	rjmp	.+140    	; 0x19da <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    194e:	fe 01       	movw	r30, r28
    1950:	ff 96       	adiw	r30, 0x3f	; 63
    1952:	60 81       	ld	r22, Z
    1954:	71 81       	ldd	r23, Z+1	; 0x01
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1966:	18 16       	cp	r1, r24
    1968:	64 f5       	brge	.+88     	; 0x19c2 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	fe 01       	movw	r30, r28
    196c:	ed 5b       	subi	r30, 0xBD	; 189
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e2       	ldi	r20, 0x20	; 32
    197e:	51 e4       	ldi	r21, 0x41	; 65
    1980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	bc 01       	movw	r22, r24
    198a:	cd 01       	movw	r24, r26
    198c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	9e af       	std	Y+62, r25	; 0x3e
    1996:	8d af       	std	Y+61, r24	; 0x3d
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <LCD_displayCharacter+0x408>
    199a:	89 e1       	ldi	r24, 0x19	; 25
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9c af       	std	Y+60, r25	; 0x3c
    19a0:	8b af       	std	Y+59, r24	; 0x3b
    19a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    19a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <LCD_displayCharacter+0x3f6>
    19aa:	9c af       	std	Y+60, r25	; 0x3c
    19ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    19b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	9e af       	std	Y+62, r25	; 0x3e
    19b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	69 f7       	brne	.-38     	; 0x199a <LCD_displayCharacter+0x3ea>
    19c0:	16 c0       	rjmp	.+44     	; 0x19ee <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c2:	fe 01       	movw	r30, r28
    19c4:	ff 96       	adiw	r30, 0x3f	; 63
    19c6:	60 81       	ld	r22, Z
    19c8:	71 81       	ldd	r23, Z+1	; 0x01
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	9e af       	std	Y+62, r25	; 0x3e
    19d8:	8d af       	std	Y+61, r24	; 0x3d
    19da:	8d ad       	ldd	r24, Y+61	; 0x3d
    19dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    19de:	9a af       	std	Y+58, r25	; 0x3a
    19e0:	89 af       	std	Y+57, r24	; 0x39
    19e2:	89 ad       	ldd	r24, Y+57	; 0x39
    19e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <LCD_displayCharacter+0x436>
    19ea:	9a af       	std	Y+58, r25	; 0x3a
    19ec:	89 af       	std	Y+57, r24	; 0x39
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xf0) | ((data&0xf0)>>4);
		#endif
			_delay_ms(1);
			clearBit(LCD_CTRL_PORT,E);
    19ee:	a2 e3       	ldi	r26, 0x32	; 50
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e2 e3       	ldi	r30, 0x32	; 50
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	8f 7b       	andi	r24, 0xBF	; 191
    19fa:	8c 93       	st	X, r24
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a0 e8       	ldi	r26, 0x80	; 128
    1a02:	bf e3       	ldi	r27, 0x3F	; 63
    1a04:	8d ab       	std	Y+53, r24	; 0x35
    1a06:	9e ab       	std	Y+54, r25	; 0x36
    1a08:	af ab       	std	Y+55, r26	; 0x37
    1a0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a10:	8f a9       	ldd	r24, Y+55	; 0x37
    1a12:	98 ad       	ldd	r25, Y+56	; 0x38
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a e7       	ldi	r20, 0x7A	; 122
    1a1a:	53 e4       	ldi	r21, 0x43	; 67
    1a1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	89 ab       	std	Y+49, r24	; 0x31
    1a26:	9a ab       	std	Y+50, r25	; 0x32
    1a28:	ab ab       	std	Y+51, r26	; 0x33
    1a2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a30:	8b a9       	ldd	r24, Y+51	; 0x33
    1a32:	9c a9       	ldd	r25, Y+52	; 0x34
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e8       	ldi	r20, 0x80	; 128
    1a3a:	5f e3       	ldi	r21, 0x3F	; 63
    1a3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a40:	88 23       	and	r24, r24
    1a42:	2c f4       	brge	.+10     	; 0x1a4e <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	98 ab       	std	Y+48, r25	; 0x30
    1a4a:	8f a7       	std	Y+47, r24	; 0x2f
    1a4c:	3f c0       	rjmp	.+126    	; 0x1acc <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1a4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a50:	7a a9       	ldd	r23, Y+50	; 0x32
    1a52:	8b a9       	ldd	r24, Y+51	; 0x33
    1a54:	9c a9       	ldd	r25, Y+52	; 0x34
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	3f ef       	ldi	r19, 0xFF	; 255
    1a5a:	4f e7       	ldi	r20, 0x7F	; 127
    1a5c:	57 e4       	ldi	r21, 0x47	; 71
    1a5e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a62:	18 16       	cp	r1, r24
    1a64:	4c f5       	brge	.+82     	; 0x1ab8 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a66:	6d a9       	ldd	r22, Y+53	; 0x35
    1a68:	7e a9       	ldd	r23, Y+54	; 0x36
    1a6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e2       	ldi	r20, 0x20	; 32
    1a74:	51 e4       	ldi	r21, 0x41	; 65
    1a76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	98 ab       	std	Y+48, r25	; 0x30
    1a8c:	8f a7       	std	Y+47, r24	; 0x2f
    1a8e:	0f c0       	rjmp	.+30     	; 0x1aae <LCD_displayCharacter+0x4fe>
    1a90:	89 e1       	ldi	r24, 0x19	; 25
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9e a7       	std	Y+46, r25	; 0x2e
    1a96:	8d a7       	std	Y+45, r24	; 0x2d
    1a98:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <LCD_displayCharacter+0x4ec>
    1aa0:	9e a7       	std	Y+46, r25	; 0x2e
    1aa2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa6:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	98 ab       	std	Y+48, r25	; 0x30
    1aac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ab0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	69 f7       	brne	.-38     	; 0x1a90 <LCD_displayCharacter+0x4e0>
    1ab6:	14 c0       	rjmp	.+40     	; 0x1ae0 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aba:	7a a9       	ldd	r23, Y+50	; 0x32
    1abc:	8b a9       	ldd	r24, Y+51	; 0x33
    1abe:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	98 ab       	std	Y+48, r25	; 0x30
    1aca:	8f a7       	std	Y+47, r24	; 0x2f
    1acc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ace:	98 a9       	ldd	r25, Y+48	; 0x30
    1ad0:	9c a7       	std	Y+44, r25	; 0x2c
    1ad2:	8b a7       	std	Y+43, r24	; 0x2b
    1ad4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ad6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <LCD_displayCharacter+0x528>
    1adc:	9c a7       	std	Y+44, r25	; 0x2c
    1ade:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			setBit(LCD_CTRL_PORT,E);
    1ae0:	a2 e3       	ldi	r26, 0x32	; 50
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e2 e3       	ldi	r30, 0x32	; 50
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	80 64       	ori	r24, 0x40	; 64
    1aec:	8c 93       	st	X, r24
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a0 e8       	ldi	r26, 0x80	; 128
    1af4:	bf e3       	ldi	r27, 0x3F	; 63
    1af6:	8f a3       	std	Y+39, r24	; 0x27
    1af8:	98 a7       	std	Y+40, r25	; 0x28
    1afa:	a9 a7       	std	Y+41, r26	; 0x29
    1afc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afe:	6f a1       	ldd	r22, Y+39	; 0x27
    1b00:	78 a5       	ldd	r23, Y+40	; 0x28
    1b02:	89 a5       	ldd	r24, Y+41	; 0x29
    1b04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4a e7       	ldi	r20, 0x7A	; 122
    1b0c:	53 e4       	ldi	r21, 0x43	; 67
    1b0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	8b a3       	std	Y+35, r24	; 0x23
    1b18:	9c a3       	std	Y+36, r25	; 0x24
    1b1a:	ad a3       	std	Y+37, r26	; 0x25
    1b1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b20:	7c a1       	ldd	r23, Y+36	; 0x24
    1b22:	8d a1       	ldd	r24, Y+37	; 0x25
    1b24:	9e a1       	ldd	r25, Y+38	; 0x26
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <LCD_displayCharacter+0x590>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9a a3       	std	Y+34, r25	; 0x22
    1b3c:	89 a3       	std	Y+33, r24	; 0x21
    1b3e:	3f c0       	rjmp	.+126    	; 0x1bbe <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1b40:	6b a1       	ldd	r22, Y+35	; 0x23
    1b42:	7c a1       	ldd	r23, Y+36	; 0x24
    1b44:	8d a1       	ldd	r24, Y+37	; 0x25
    1b46:	9e a1       	ldd	r25, Y+38	; 0x26
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	3f ef       	ldi	r19, 0xFF	; 255
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	57 e4       	ldi	r21, 0x47	; 71
    1b50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	4c f5       	brge	.+82     	; 0x1baa <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	6f a1       	ldd	r22, Y+39	; 0x27
    1b5a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b5c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	51 e4       	ldi	r21, 0x41	; 65
    1b68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9a a3       	std	Y+34, r25	; 0x22
    1b7e:	89 a3       	std	Y+33, r24	; 0x21
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <LCD_displayCharacter+0x5f0>
    1b82:	89 e1       	ldi	r24, 0x19	; 25
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	98 a3       	std	Y+32, r25	; 0x20
    1b88:	8f 8f       	std	Y+31, r24	; 0x1f
    1b8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b8c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <LCD_displayCharacter+0x5de>
    1b92:	98 a3       	std	Y+32, r25	; 0x20
    1b94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b96:	89 a1       	ldd	r24, Y+33	; 0x21
    1b98:	9a a1       	ldd	r25, Y+34	; 0x22
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	9a a3       	std	Y+34, r25	; 0x22
    1b9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	69 f7       	brne	.-38     	; 0x1b82 <LCD_displayCharacter+0x5d2>
    1ba8:	14 c0       	rjmp	.+40     	; 0x1bd2 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1baa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bac:	7c a1       	ldd	r23, Y+36	; 0x24
    1bae:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9a a3       	std	Y+34, r25	; 0x22
    1bbc:	89 a3       	std	Y+33, r24	; 0x21
    1bbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc2:	9e 8f       	std	Y+30, r25	; 0x1e
    1bc4:	8d 8f       	std	Y+29, r24	; 0x1d
    1bc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bc8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <LCD_displayCharacter+0x61a>
    1bce:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | ((data&0x0f)<<4);
    1bd2:	a5 e3       	ldi	r26, 0x35	; 53
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e5 e3       	ldi	r30, 0x35	; 53
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	28 2f       	mov	r18, r24
    1bde:	2f 70       	andi	r18, 0x0F	; 15
    1be0:	fe 01       	movw	r30, r28
    1be2:	ed 59       	subi	r30, 0x9D	; 157
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	80 81       	ld	r24, Z
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	82 95       	swap	r24
    1bee:	92 95       	swap	r25
    1bf0:	90 7f       	andi	r25, 0xF0	; 240
    1bf2:	98 27       	eor	r25, r24
    1bf4:	80 7f       	andi	r24, 0xF0	; 240
    1bf6:	98 27       	eor	r25, r24
    1bf8:	82 2b       	or	r24, r18
    1bfa:	8c 93       	st	X, r24
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	a0 e8       	ldi	r26, 0x80	; 128
    1c02:	bf e3       	ldi	r27, 0x3F	; 63
    1c04:	89 8f       	std	Y+25, r24	; 0x19
    1c06:	9a 8f       	std	Y+26, r25	; 0x1a
    1c08:	ab 8f       	std	Y+27, r26	; 0x1b
    1c0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	4a e7       	ldi	r20, 0x7A	; 122
    1c1a:	53 e4       	ldi	r21, 0x43	; 67
    1c1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	8d 8b       	std	Y+21, r24	; 0x15
    1c26:	9e 8b       	std	Y+22, r25	; 0x16
    1c28:	af 8b       	std	Y+23, r26	; 0x17
    1c2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c30:	8f 89       	ldd	r24, Y+23	; 0x17
    1c32:	98 8d       	ldd	r25, Y+24	; 0x18
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 e8       	ldi	r20, 0x80	; 128
    1c3a:	5f e3       	ldi	r21, 0x3F	; 63
    1c3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c40:	88 23       	and	r24, r24
    1c42:	2c f4       	brge	.+10     	; 0x1c4e <LCD_displayCharacter+0x69e>
		__ticks = 1;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	9c 8b       	std	Y+20, r25	; 0x14
    1c4a:	8b 8b       	std	Y+19, r24	; 0x13
    1c4c:	3f c0       	rjmp	.+126    	; 0x1ccc <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    1c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c50:	7e 89       	ldd	r23, Y+22	; 0x16
    1c52:	8f 89       	ldd	r24, Y+23	; 0x17
    1c54:	98 8d       	ldd	r25, Y+24	; 0x18
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	3f ef       	ldi	r19, 0xFF	; 255
    1c5a:	4f e7       	ldi	r20, 0x7F	; 127
    1c5c:	57 e4       	ldi	r21, 0x47	; 71
    1c5e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c62:	18 16       	cp	r1, r24
    1c64:	4c f5       	brge	.+82     	; 0x1cb8 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c66:	69 8d       	ldd	r22, Y+25	; 0x19
    1c68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e2       	ldi	r20, 0x20	; 32
    1c74:	51 e4       	ldi	r21, 0x41	; 65
    1c76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	bc 01       	movw	r22, r24
    1c80:	cd 01       	movw	r24, r26
    1c82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	9c 8b       	std	Y+20, r25	; 0x14
    1c8c:	8b 8b       	std	Y+19, r24	; 0x13
    1c8e:	0f c0       	rjmp	.+30     	; 0x1cae <LCD_displayCharacter+0x6fe>
    1c90:	89 e1       	ldi	r24, 0x19	; 25
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	9a 8b       	std	Y+18, r25	; 0x12
    1c96:	89 8b       	std	Y+17, r24	; 0x11
    1c98:	89 89       	ldd	r24, Y+17	; 0x11
    1c9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <LCD_displayCharacter+0x6ec>
    1ca0:	9a 8b       	std	Y+18, r25	; 0x12
    1ca2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	9c 8b       	std	Y+20, r25	; 0x14
    1cac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cae:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	69 f7       	brne	.-38     	; 0x1c90 <LCD_displayCharacter+0x6e0>
    1cb6:	14 c0       	rjmp	.+40     	; 0x1ce0 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cba:	7e 89       	ldd	r23, Y+22	; 0x16
    1cbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
    1ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cce:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd0:	98 8b       	std	Y+16, r25	; 0x10
    1cd2:	8f 87       	std	Y+15, r24	; 0x0f
    1cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd6:	98 89       	ldd	r25, Y+16	; 0x10
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <LCD_displayCharacter+0x728>
    1cdc:	98 8b       	std	Y+16, r25	; 0x10
    1cde:	8f 87       	std	Y+15, r24	; 0x0f
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xf0) | (data&0x0f);
		#endif
		_delay_ms(1);
		clearBit(LCD_CTRL_PORT,E);
    1ce0:	a2 e3       	ldi	r26, 0x32	; 50
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e2 e3       	ldi	r30, 0x32	; 50
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	8f 7b       	andi	r24, 0xBF	; 191
    1cec:	8c 93       	st	X, r24
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	a0 e8       	ldi	r26, 0x80	; 128
    1cf4:	bf e3       	ldi	r27, 0x3F	; 63
    1cf6:	8b 87       	std	Y+11, r24	; 0x0b
    1cf8:	9c 87       	std	Y+12, r25	; 0x0c
    1cfa:	ad 87       	std	Y+13, r26	; 0x0d
    1cfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	4a e7       	ldi	r20, 0x7A	; 122
    1d0c:	53 e4       	ldi	r21, 0x43	; 67
    1d0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	8f 83       	std	Y+7, r24	; 0x07
    1d18:	98 87       	std	Y+8, r25	; 0x08
    1d1a:	a9 87       	std	Y+9, r26	; 0x09
    1d1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d20:	78 85       	ldd	r23, Y+8	; 0x08
    1d22:	89 85       	ldd	r24, Y+9	; 0x09
    1d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	5f e3       	ldi	r21, 0x3F	; 63
    1d2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d32:	88 23       	and	r24, r24
    1d34:	2c f4       	brge	.+10     	; 0x1d40 <LCD_displayCharacter+0x790>
		__ticks = 1;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	3f c0       	rjmp	.+126    	; 0x1dbe <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    1d40:	6f 81       	ldd	r22, Y+7	; 0x07
    1d42:	78 85       	ldd	r23, Y+8	; 0x08
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	4f e7       	ldi	r20, 0x7F	; 127
    1d4e:	57 e4       	ldi	r21, 0x47	; 71
    1d50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d54:	18 16       	cp	r1, r24
    1d56:	4c f5       	brge	.+82     	; 0x1daa <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e2       	ldi	r20, 0x20	; 32
    1d66:	51 e4       	ldi	r21, 0x41	; 65
    1d68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	0f c0       	rjmp	.+30     	; 0x1da0 <LCD_displayCharacter+0x7f0>
    1d82:	89 e1       	ldi	r24, 0x19	; 25
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9c 83       	std	Y+4, r25	; 0x04
    1d88:	8b 83       	std	Y+3, r24	; 0x03
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <LCD_displayCharacter+0x7de>
    1d92:	9c 83       	std	Y+4, r25	; 0x04
    1d94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	9e 81       	ldd	r25, Y+6	; 0x06
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	69 f7       	brne	.-38     	; 0x1d82 <LCD_displayCharacter+0x7d2>
    1da8:	14 c0       	rjmp	.+40     	; 0x1dd2 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1daa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dac:	78 85       	ldd	r23, Y+8	; 0x08
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <LCD_displayCharacter+0x81a>
    1dce:	9a 83       	std	Y+2, r25	; 0x02
    1dd0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		clearBit(LCD_CTRL_PORT,E);
		_delay_ms(1);
	#endif

}
    1dd2:	cd 59       	subi	r28, 0x9D	; 157
    1dd4:	df 4f       	sbci	r29, 0xFF	; 255
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	08 95       	ret

00001dea <LCD_displayString>:
void LCD_displayString(const char *Str){
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <LCD_displayString+0x6>
    1df0:	0f 92       	push	r0
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	9b 83       	std	Y+3, r25	; 0x03
    1df8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1dfa:	19 82       	std	Y+1, r1	; 0x01
    1dfc:	0e c0       	rjmp	.+28     	; 0x1e1a <LCD_displayString+0x30>
	while(Str[i] != '\0'){
		LCD_displayCharacter(Str[i]);
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	9b 81       	ldd	r25, Y+3	; 0x03
    1e08:	fc 01       	movw	r30, r24
    1e0a:	e2 0f       	add	r30, r18
    1e0c:	f3 1f       	adc	r31, r19
    1e0e:	80 81       	ld	r24, Z
    1e10:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_displayCharacter>
		i++;
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	8f 5f       	subi	r24, 0xFF	; 255
    1e18:	89 83       	std	Y+1, r24	; 0x01
	#endif

}
void LCD_displayString(const char *Str){
	uint8 i = 0;
	while(Str[i] != '\0'){
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	9b 81       	ldd	r25, Y+3	; 0x03
    1e24:	fc 01       	movw	r30, r24
    1e26:	e2 0f       	add	r30, r18
    1e28:	f3 1f       	adc	r31, r19
    1e2a:	80 81       	ld	r24, Z
    1e2c:	88 23       	and	r24, r24
    1e2e:	39 f7       	brne	.-50     	; 0x1dfe <LCD_displayString+0x14>
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col){
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <LCD_goToRowColumn+0x6>
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <LCD_goToRowColumn+0x8>
    1e44:	0f 92       	push	r0
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
    1e4c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	switch(row){
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	3d 83       	std	Y+5, r19	; 0x05
    1e56:	2c 83       	std	Y+4, r18	; 0x04
    1e58:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	91 05       	cpc	r25, r1
    1e60:	c1 f0       	breq	.+48     	; 0x1e92 <LCD_goToRowColumn+0x56>
    1e62:	2c 81       	ldd	r18, Y+4	; 0x04
    1e64:	3d 81       	ldd	r19, Y+5	; 0x05
    1e66:	22 30       	cpi	r18, 0x02	; 2
    1e68:	31 05       	cpc	r19, r1
    1e6a:	2c f4       	brge	.+10     	; 0x1e76 <LCD_goToRowColumn+0x3a>
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	61 f0       	breq	.+24     	; 0x1e8c <LCD_goToRowColumn+0x50>
    1e74:	19 c0       	rjmp	.+50     	; 0x1ea8 <LCD_goToRowColumn+0x6c>
    1e76:	2c 81       	ldd	r18, Y+4	; 0x04
    1e78:	3d 81       	ldd	r19, Y+5	; 0x05
    1e7a:	22 30       	cpi	r18, 0x02	; 2
    1e7c:	31 05       	cpc	r19, r1
    1e7e:	69 f0       	breq	.+26     	; 0x1e9a <LCD_goToRowColumn+0x5e>
    1e80:	8c 81       	ldd	r24, Y+4	; 0x04
    1e82:	9d 81       	ldd	r25, Y+5	; 0x05
    1e84:	83 30       	cpi	r24, 0x03	; 3
    1e86:	91 05       	cpc	r25, r1
    1e88:	61 f0       	breq	.+24     	; 0x1ea2 <LCD_goToRowColumn+0x66>
    1e8a:	0e c0       	rjmp	.+28     	; 0x1ea8 <LCD_goToRowColumn+0x6c>
	case 0: Address = col; break;
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	0b c0       	rjmp	.+22     	; 0x1ea8 <LCD_goToRowColumn+0x6c>
	case 1: Address = col+0x40; break;
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	80 5c       	subi	r24, 0xC0	; 192
    1e96:	89 83       	std	Y+1, r24	; 0x01
    1e98:	07 c0       	rjmp	.+14     	; 0x1ea8 <LCD_goToRowColumn+0x6c>
	case 2: Address = col+0x10; break;
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	80 5f       	subi	r24, 0xF0	; 240
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	03 c0       	rjmp	.+6      	; 0x1ea8 <LCD_goToRowColumn+0x6c>
	case 3: Address = col+0x50; break;
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	80 5b       	subi	r24, 0xB0	; 176
    1ea6:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	80 68       	ori	r24, 0x80	; 128
    1eac:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_sendCommand>
}
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <LCD_displayStringRowColumn+0x6>
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <LCD_displayStringRowColumn+0x8>
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	6a 83       	std	Y+2, r22	; 0x02
    1ed0:	5c 83       	std	Y+4, r21	; 0x04
    1ed2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row, col);
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ed8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_goToRowColumn>
	LCD_displayString(Str);
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_displayString>
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <LCD_intgerToString>:
void LCD_intgerToString(int data){
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	62 97       	sbiw	r28, 0x12	; 18
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	9a 8b       	std	Y+18, r25	; 0x12
    1f08:	89 8b       	std	Y+17, r24	; 0x11
	char str[16];
	itoa(data,str,10); // 10 is for decimal, if 2 the binary
    1f0a:	89 89       	ldd	r24, Y+17	; 0x11
    1f0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f0e:	9e 01       	movw	r18, r28
    1f10:	2f 5f       	subi	r18, 0xFF	; 255
    1f12:	3f 4f       	sbci	r19, 0xFF	; 255
    1f14:	b9 01       	movw	r22, r18
    1f16:	4a e0       	ldi	r20, 0x0A	; 10
    1f18:	50 e0       	ldi	r21, 0x00	; 0
    1f1a:	0e 94 13 10 	call	0x2026	; 0x2026 <itoa>
	LCD_displayString(str);
    1f1e:	ce 01       	movw	r24, r28
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_displayString>
}
    1f26:	62 96       	adiw	r28, 0x12	; 18
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <LCD_integerToStringRowCol>:
void LCD_integerToStringRowCol(int row, int col,int data){
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <LCD_integerToStringRowCol+0x6>
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <LCD_integerToStringRowCol+0x8>
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <LCD_integerToStringRowCol+0xa>
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	9a 83       	std	Y+2, r25	; 0x02
    1f48:	89 83       	std	Y+1, r24	; 0x01
    1f4a:	7c 83       	std	Y+4, r23	; 0x04
    1f4c:	6b 83       	std	Y+3, r22	; 0x03
    1f4e:	5e 83       	std	Y+6, r21	; 0x06
    1f50:	4d 83       	std	Y+5, r20	; 0x05
	LCD_goToRowColumn(row, col);
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9b 81       	ldd	r25, Y+3	; 0x03
    1f56:	69 2f       	mov	r22, r25
    1f58:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_goToRowColumn>
	LCD_intgerToString(data);
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f60:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_intgerToString>
}
    1f64:	26 96       	adiw	r28, 0x06	; 6
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <LCD_clearScreen>:
void LCD_clearScreen(void){
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_sendCommand>
}
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <main>:
#include "lcd.h"
#include "keypad.h"

int main(int argc, char **argv) {
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <main+0x6>
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <main+0x8>
    1f92:	0f 92       	push	r0
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	9b 83       	std	Y+3, r25	; 0x03
    1f9a:	8a 83       	std	Y+2, r24	; 0x02
    1f9c:	7d 83       	std	Y+5, r23	; 0x05
    1f9e:	6c 83       	std	Y+4, r22	; 0x04
	LCD_init();
    1fa0:	0e 94 9a 06 	call	0xd34	; 0xd34 <LCD_init>
	uint8 key;


	for (;;){
		key = KeyPad_getPressedKey();
    1fa4:	0e 94 9b 05 	call	0xb36	; 0xb36 <KeyPad_getPressedKey>
    1fa8:	89 83       	std	Y+1, r24	; 0x01
		if(key){
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	88 23       	and	r24, r24
    1fae:	d1 f3       	breq	.-12     	; 0x1fa4 <main+0x1a>
			LCD_displayCharacter(key);
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_displayCharacter>
    1fb6:	f6 cf       	rjmp	.-20     	; 0x1fa4 <main+0x1a>

00001fb8 <__prologue_saves__>:
    1fb8:	2f 92       	push	r2
    1fba:	3f 92       	push	r3
    1fbc:	4f 92       	push	r4
    1fbe:	5f 92       	push	r5
    1fc0:	6f 92       	push	r6
    1fc2:	7f 92       	push	r7
    1fc4:	8f 92       	push	r8
    1fc6:	9f 92       	push	r9
    1fc8:	af 92       	push	r10
    1fca:	bf 92       	push	r11
    1fcc:	cf 92       	push	r12
    1fce:	df 92       	push	r13
    1fd0:	ef 92       	push	r14
    1fd2:	ff 92       	push	r15
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	ca 1b       	sub	r28, r26
    1fe2:	db 0b       	sbc	r29, r27
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	09 94       	ijmp

00001ff0 <__epilogue_restores__>:
    1ff0:	2a 88       	ldd	r2, Y+18	; 0x12
    1ff2:	39 88       	ldd	r3, Y+17	; 0x11
    1ff4:	48 88       	ldd	r4, Y+16	; 0x10
    1ff6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ff8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ffa:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ffc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ffe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2000:	aa 84       	ldd	r10, Y+10	; 0x0a
    2002:	b9 84       	ldd	r11, Y+9	; 0x09
    2004:	c8 84       	ldd	r12, Y+8	; 0x08
    2006:	df 80       	ldd	r13, Y+7	; 0x07
    2008:	ee 80       	ldd	r14, Y+6	; 0x06
    200a:	fd 80       	ldd	r15, Y+5	; 0x05
    200c:	0c 81       	ldd	r16, Y+4	; 0x04
    200e:	1b 81       	ldd	r17, Y+3	; 0x03
    2010:	aa 81       	ldd	r26, Y+2	; 0x02
    2012:	b9 81       	ldd	r27, Y+1	; 0x01
    2014:	ce 0f       	add	r28, r30
    2016:	d1 1d       	adc	r29, r1
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	ed 01       	movw	r28, r26
    2024:	08 95       	ret

00002026 <itoa>:
    2026:	fb 01       	movw	r30, r22
    2028:	9f 01       	movw	r18, r30
    202a:	e8 94       	clt
    202c:	42 30       	cpi	r20, 0x02	; 2
    202e:	c4 f0       	brlt	.+48     	; 0x2060 <itoa+0x3a>
    2030:	45 32       	cpi	r20, 0x25	; 37
    2032:	b4 f4       	brge	.+44     	; 0x2060 <itoa+0x3a>
    2034:	4a 30       	cpi	r20, 0x0A	; 10
    2036:	29 f4       	brne	.+10     	; 0x2042 <itoa+0x1c>
    2038:	97 fb       	bst	r25, 7
    203a:	1e f4       	brtc	.+6      	; 0x2042 <itoa+0x1c>
    203c:	90 95       	com	r25
    203e:	81 95       	neg	r24
    2040:	9f 4f       	sbci	r25, 0xFF	; 255
    2042:	64 2f       	mov	r22, r20
    2044:	77 27       	eor	r23, r23
    2046:	0e 94 44 10 	call	0x2088	; 0x2088 <__udivmodhi4>
    204a:	80 5d       	subi	r24, 0xD0	; 208
    204c:	8a 33       	cpi	r24, 0x3A	; 58
    204e:	0c f0       	brlt	.+2      	; 0x2052 <itoa+0x2c>
    2050:	89 5d       	subi	r24, 0xD9	; 217
    2052:	81 93       	st	Z+, r24
    2054:	cb 01       	movw	r24, r22
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	a1 f7       	brne	.-24     	; 0x2042 <itoa+0x1c>
    205a:	16 f4       	brtc	.+4      	; 0x2060 <itoa+0x3a>
    205c:	5d e2       	ldi	r21, 0x2D	; 45
    205e:	51 93       	st	Z+, r21
    2060:	10 82       	st	Z, r1
    2062:	c9 01       	movw	r24, r18
    2064:	0c 94 34 10 	jmp	0x2068	; 0x2068 <strrev>

00002068 <strrev>:
    2068:	dc 01       	movw	r26, r24
    206a:	fc 01       	movw	r30, r24
    206c:	67 2f       	mov	r22, r23
    206e:	71 91       	ld	r23, Z+
    2070:	77 23       	and	r23, r23
    2072:	e1 f7       	brne	.-8      	; 0x206c <strrev+0x4>
    2074:	32 97       	sbiw	r30, 0x02	; 2
    2076:	04 c0       	rjmp	.+8      	; 0x2080 <strrev+0x18>
    2078:	7c 91       	ld	r23, X
    207a:	6d 93       	st	X+, r22
    207c:	70 83       	st	Z, r23
    207e:	62 91       	ld	r22, -Z
    2080:	ae 17       	cp	r26, r30
    2082:	bf 07       	cpc	r27, r31
    2084:	c8 f3       	brcs	.-14     	; 0x2078 <strrev+0x10>
    2086:	08 95       	ret

00002088 <__udivmodhi4>:
    2088:	aa 1b       	sub	r26, r26
    208a:	bb 1b       	sub	r27, r27
    208c:	51 e1       	ldi	r21, 0x11	; 17
    208e:	07 c0       	rjmp	.+14     	; 0x209e <__udivmodhi4_ep>

00002090 <__udivmodhi4_loop>:
    2090:	aa 1f       	adc	r26, r26
    2092:	bb 1f       	adc	r27, r27
    2094:	a6 17       	cp	r26, r22
    2096:	b7 07       	cpc	r27, r23
    2098:	10 f0       	brcs	.+4      	; 0x209e <__udivmodhi4_ep>
    209a:	a6 1b       	sub	r26, r22
    209c:	b7 0b       	sbc	r27, r23

0000209e <__udivmodhi4_ep>:
    209e:	88 1f       	adc	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	5a 95       	dec	r21
    20a4:	a9 f7       	brne	.-22     	; 0x2090 <__udivmodhi4_loop>
    20a6:	80 95       	com	r24
    20a8:	90 95       	com	r25
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	08 95       	ret

000020b0 <_exit>:
    20b0:	f8 94       	cli

000020b2 <__stop_program>:
    20b2:	ff cf       	rjmp	.-2      	; 0x20b2 <__stop_program>
