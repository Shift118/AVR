
CompareMode_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001be  2**0
                  ALLOC
  2 .stab         000003b4  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000070a  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  74:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:
#include <avr/io.h>
#include <avr/interrupt.h>
int count = 0;
ISR(TIMER0_COMP_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	df 93       	push	r29
  8c:	cf 93       	push	r28
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
	count++;
  92:	80 91 60 00 	lds	r24, 0x0060
  96:	90 91 61 00 	lds	r25, 0x0061
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	90 93 61 00 	sts	0x0061, r25
  a0:	80 93 60 00 	sts	0x0060, r24
}
  a4:	cf 91       	pop	r28
  a6:	df 91       	pop	r29
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <main>:
int main(int argc, char **argv) {
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	00 d0       	rcall	.+0      	; 0xbc <main+0x6>
  bc:	00 d0       	rcall	.+0      	; 0xbe <main+0x8>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	9a 83       	std	Y+2, r25	; 0x02
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	7c 83       	std	Y+4, r23	; 0x04
  c8:	6b 83       	std	Y+3, r22	; 0x03
	DDRC |= (1<<PC0);
  ca:	a4 e3       	ldi	r26, 0x34	; 52
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e4 e3       	ldi	r30, 0x34	; 52
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	8c 93       	st	X, r24
	PORTC &= ~(1<<PC0);
  d8:	a5 e3       	ldi	r26, 0x35	; 53
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e5 e3       	ldi	r30, 0x35	; 53
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	8c 93       	st	X, r24
	////////////////////////////
	SREG |= (1<<7);
  e6:	af e5       	ldi	r26, 0x5F	; 95
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	ef e5       	ldi	r30, 0x5F	; 95
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	8c 93       	st	X, r24
	TCCR0 |= (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
  f4:	a3 e5       	ldi	r26, 0x53	; 83
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e3 e5       	ldi	r30, 0x53	; 83
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8d 68       	ori	r24, 0x8D	; 141
 100:	8c 93       	st	X, r24
	TIMSK |= (1<<OCIE0);
 102:	a9 e5       	ldi	r26, 0x59	; 89
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e9 e5       	ldi	r30, 0x59	; 89
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	8c 93       	st	X, r24
	TCNT0 = 0;
 110:	e2 e5       	ldi	r30, 0x52	; 82
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	10 82       	st	Z, r1
	OCR0 = 243;
 116:	ec e5       	ldi	r30, 0x5C	; 92
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	83 ef       	ldi	r24, 0xF3	; 243
 11c:	80 83       	st	Z, r24
	for(;;){
		if(count == 4){
 11e:	80 91 60 00 	lds	r24, 0x0060
 122:	90 91 61 00 	lds	r25, 0x0061
 126:	84 30       	cpi	r24, 0x04	; 4
 128:	91 05       	cpc	r25, r1
 12a:	c9 f7       	brne	.-14     	; 0x11e <main+0x68>
			PORTC ^= (1<<PC0);
 12c:	a5 e3       	ldi	r26, 0x35	; 53
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e5 e3       	ldi	r30, 0x35	; 53
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	90 81       	ld	r25, Z
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	89 27       	eor	r24, r25
 13a:	8c 93       	st	X, r24
			count = 0;
 13c:	10 92 61 00 	sts	0x0061, r1
 140:	10 92 60 00 	sts	0x0060, r1
 144:	ec cf       	rjmp	.-40     	; 0x11e <main+0x68>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
