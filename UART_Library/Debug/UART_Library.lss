
UART_Library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000200  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000080f  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "uart.h"
int main(int argc, char **argv) {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	9a 83       	std	Y+2, r25	; 0x02
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	7c 83       	std	Y+4, r23	; 0x04
  7e:	6b 83       	std	Y+3, r22	; 0x03
  80:	ff cf       	rjmp	.-2      	; 0x80 <main+0x14>

00000082 <UART_init>:
#include "uart.h"
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL)))-1)

void UART_init(){
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1<<U2X);
  8a:	eb e2       	ldi	r30, 0x2B	; 43
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	80 83       	st	Z, r24
	UCSRB = (1<<TXEN)|(1<<RXEN); // The flags are set automatically no need for interrupt
  92:	ea e2       	ldi	r30, 0x2A	; 42
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	80 83       	st	Z, r24
	UCSRC = (1<<URSEL) | (1<<UCSZ1)| (1<<UCSZ0);
  9a:	e0 e4       	ldi	r30, 0x40	; 64
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 83       	st	Z, r24
	// UBRR is about 2bytes divided to UBRR_High & UBRR_Low
	// Therefore if you have a data more than 1 byte then store this data in  UBRR_High
	// Since URSEL is the first bit in UBRR then it will be set to 0;
	UBRRH = BAUD_PRESCALE >> 8;
  a2:	e0 e4       	ldi	r30, 0x40	; 64
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
  a8:	e9 e2       	ldi	r30, 0x29	; 41
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	80 83       	st	Z, r24
}
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

000000b6 <UART_sendByte>:
void UART_sendByte(uint8 data){
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	0f 92       	push	r0
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	89 83       	std	Y+1, r24	; 0x01
	UDR = data; //Transmit
  c2:	ec e2       	ldi	r30, 0x2C	; 44
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	80 83       	st	Z, r24
	while(bitIsClear(UCSRA,TXC)); // Wait for transmit flag
  ca:	eb e2       	ldi	r30, 0x2B	; 43
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 2f       	mov	r24, r24
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	80 74       	andi	r24, 0x40	; 64
  d6:	90 70       	andi	r25, 0x00	; 0
  d8:	00 97       	sbiw	r24, 0x00	; 0
  da:	b9 f3       	breq	.-18     	; 0xca <UART_sendByte+0x14>
	setBit(UCSRA,TXC); //Clear flag
  dc:	ab e2       	ldi	r26, 0x2B	; 43
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	eb e2       	ldi	r30, 0x2B	; 43
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	8c 93       	st	X, r24
}
  ea:	0f 90       	pop	r0
  ec:	cf 91       	pop	r28
  ee:	df 91       	pop	r29
  f0:	08 95       	ret

000000f2 <UART_recieveByte>:
uint8 UART_recieveByte(){
  f2:	df 93       	push	r29
  f4:	cf 93       	push	r28
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
	while(bitIsClear(UCSRA,RXC)){}
  fa:	eb e2       	ldi	r30, 0x2B	; 43
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	88 23       	and	r24, r24
 102:	dc f7       	brge	.-10     	; 0xfa <UART_recieveByte+0x8>
	setBit(UCSRA,RXC);
 104:	ab e2       	ldi	r26, 0x2B	; 43
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	eb e2       	ldi	r30, 0x2B	; 43
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	8c 93       	st	X, r24
	return UDR;
 112:	ec e2       	ldi	r30, 0x2C	; 44
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
}
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	08 95       	ret

0000011e <UART_sendString>:
void UART_sendString(uint8 *Str){
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	00 d0       	rcall	.+0      	; 0x124 <UART_sendString+0x6>
 124:	0f 92       	push	r0
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	9b 83       	std	Y+3, r25	; 0x03
 12c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 12e:	19 82       	std	Y+1, r1	; 0x01
 130:	0e c0       	rjmp	.+28     	; 0x14e <UART_sendString+0x30>
	while(Str[i] != '\0'){
		UART_sendByte(Str[i]);
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	28 2f       	mov	r18, r24
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	9b 81       	ldd	r25, Y+3	; 0x03
 13c:	fc 01       	movw	r30, r24
 13e:	e2 0f       	add	r30, r18
 140:	f3 1f       	adc	r31, r19
 142:	80 81       	ld	r24, Z
 144:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART_sendByte>
		i++;
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	89 83       	std	Y+1, r24	; 0x01
	setBit(UCSRA,RXC);
	return UDR;
}
void UART_sendString(uint8 *Str){
	uint8 i = 0;
	while(Str[i] != '\0'){
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	28 2f       	mov	r18, r24
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	9b 81       	ldd	r25, Y+3	; 0x03
 158:	fc 01       	movw	r30, r24
 15a:	e2 0f       	add	r30, r18
 15c:	f3 1f       	adc	r31, r19
 15e:	80 81       	ld	r24, Z
 160:	88 23       	and	r24, r24
 162:	39 f7       	brne	.-50     	; 0x132 <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}
	UART_sendByte('#');
 164:	83 e2       	ldi	r24, 0x23	; 35
 166:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART_sendByte>
}
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	cf 91       	pop	r28
 172:	df 91       	pop	r29
 174:	08 95       	ret

00000176 <UART_recieveString>:
void UART_recieveString(uint8 * Str){
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	df 93       	push	r29
 17c:	cf 93       	push	r28
 17e:	00 d0       	rcall	.+0      	; 0x180 <UART_recieveString+0xa>
 180:	0f 92       	push	r0
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	9b 83       	std	Y+3, r25	; 0x03
 188:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 18a:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte(); // Checks if there is even a msg
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	9b 81       	ldd	r25, Y+3	; 0x03
 196:	8c 01       	movw	r16, r24
 198:	02 0f       	add	r16, r18
 19a:	13 1f       	adc	r17, r19
 19c:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_recieveByte>
 1a0:	f8 01       	movw	r30, r16
 1a2:	80 83       	st	Z, r24
 1a4:	0f c0       	rjmp	.+30     	; 0x1c4 <UART_recieveString+0x4e>
	while(Str[i] != '#'){ // The agreed stop symbol because there is no representation in data.
		i++;
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	9b 81       	ldd	r25, Y+3	; 0x03
 1b6:	8c 01       	movw	r16, r24
 1b8:	02 0f       	add	r16, r18
 1ba:	13 1f       	adc	r17, r19
 1bc:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_recieveByte>
 1c0:	f8 01       	movw	r30, r16
 1c2:	80 83       	st	Z, r24
	UART_sendByte('#');
}
void UART_recieveString(uint8 * Str){
	uint8 i = 0;
	Str[i] = UART_recieveByte(); // Checks if there is even a msg
	while(Str[i] != '#'){ // The agreed stop symbol because there is no representation in data.
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	9b 81       	ldd	r25, Y+3	; 0x03
 1ce:	fc 01       	movw	r30, r24
 1d0:	e2 0f       	add	r30, r18
 1d2:	f3 1f       	adc	r31, r19
 1d4:	80 81       	ld	r24, Z
 1d6:	83 32       	cpi	r24, 0x23	; 35
 1d8:	31 f7       	brne	.-52     	; 0x1a6 <UART_recieveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0'; // let the agreed stop sign be the end of the string.
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	28 2f       	mov	r18, r24
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	9b 81       	ldd	r25, Y+3	; 0x03
 1e4:	fc 01       	movw	r30, r24
 1e6:	e2 0f       	add	r30, r18
 1e8:	f3 1f       	adc	r31, r19
 1ea:	10 82       	st	Z, r1
}
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	08 95       	ret

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
