
SPI_Library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000708  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000824  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "spi.h"

int main(int argc, char **argv) {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	9a 83       	std	Y+2, r25	; 0x02
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	7c 83       	std	Y+4, r23	; 0x04
  7e:	6b 83       	std	Y+3, r22	; 0x03
  80:	ff cf       	rjmp	.-2      	; 0x80 <main+0x14>

00000082 <SPI_initMaster>:
#include "spi.h"

void SPI_initMaster(){
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	setBit(DDRB,PB4);  //SS
  8a:	a7 e3       	ldi	r26, 0x37	; 55
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e7 e3       	ldi	r30, 0x37	; 55
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	80 61       	ori	r24, 0x10	; 16
  96:	8c 93       	st	X, r24
	setBit(DDRB,PB5);  //MOSI
  98:	a7 e3       	ldi	r26, 0x37	; 55
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	e7 e3       	ldi	r30, 0x37	; 55
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	8c 93       	st	X, r24
	clearBit(DDRB,PB6);  //MISO
  a6:	a7 e3       	ldi	r26, 0x37	; 55
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e7 e3       	ldi	r30, 0x37	; 55
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8f 7b       	andi	r24, 0xBF	; 191
  b2:	8c 93       	st	X, r24
	setBit(DDRB,PB7);  //SCK "clock"
  b4:	a7 e3       	ldi	r26, 0x37	; 55
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e7 e3       	ldi	r30, 0x37	; 55
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	8c 93       	st	X, r24

	SPCR = (1<<SPE) | (1<<MSTR); //Enable SPI and Master + choose_spi clock
  c2:	ed e2       	ldi	r30, 0x2D	; 45
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 e5       	ldi	r24, 0x50	; 80
  c8:	80 83       	st	Z, r24
}
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	08 95       	ret

000000d0 <SPI_initSlave>:
void SPI_initSlave(){
  d0:	df 93       	push	r29
  d2:	cf 93       	push	r28
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	clearBit(DDRB,PB4);  //SS
  d8:	a7 e3       	ldi	r26, 0x37	; 55
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e7 e3       	ldi	r30, 0x37	; 55
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	8c 93       	st	X, r24
	clearBit(DDRB,PB5);  //MOSI
  e6:	a7 e3       	ldi	r26, 0x37	; 55
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	e7 e3       	ldi	r30, 0x37	; 55
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	8f 7d       	andi	r24, 0xDF	; 223
  f2:	8c 93       	st	X, r24
	setBit(DDRB,PB6);  //MISO
  f4:	a7 e3       	ldi	r26, 0x37	; 55
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e7 e3       	ldi	r30, 0x37	; 55
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	8c 93       	st	X, r24
	clearBit(DDRB,PB7);  //SCK "clock"
 102:	a7 e3       	ldi	r26, 0x37	; 55
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e7 e3       	ldi	r30, 0x37	; 55
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8f 77       	andi	r24, 0x7F	; 127
 10e:	8c 93       	st	X, r24

	SPCR = (1<<SPE); //Enable SPI + choose_spi clock
 110:	ed e2       	ldi	r30, 0x2D	; 45
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
}
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	08 95       	ret

0000011e <SPI_sendByte>:
void SPI_sendByte(uint8 data){
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	0f 92       	push	r0
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
 12a:	ef e2       	ldi	r30, 0x2F	; 47
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	80 83       	st	Z, r24
	while(bitIsClear(SPSR,SPIF)){} // Wait for transfer complete flag
 132:	ee e2       	ldi	r30, 0x2E	; 46
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	88 23       	and	r24, r24
 13a:	dc f7       	brge	.-10     	; 0x132 <SPI_sendByte+0x14>
}
 13c:	0f 90       	pop	r0
 13e:	cf 91       	pop	r28
 140:	df 91       	pop	r29
 142:	08 95       	ret

00000144 <SPI_recieveByte>:
uint8 SPI_recieveByte(){
 144:	df 93       	push	r29
 146:	cf 93       	push	r28
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
	while(bitIsClear(SPSR,SPIF)){} // Wait for Data Receive complete flag
 14c:	ee e2       	ldi	r30, 0x2E	; 46
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 23       	and	r24, r24
 154:	dc f7       	brge	.-10     	; 0x14c <SPI_recieveByte+0x8>
	return SPDR; // return data
 156:	ef e2       	ldi	r30, 0x2F	; 47
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
}
 15c:	cf 91       	pop	r28
 15e:	df 91       	pop	r29
 160:	08 95       	ret

00000162 <SPI_sendString>:
void SPI_sendString(uint8 * Str){
 162:	df 93       	push	r29
 164:	cf 93       	push	r28
 166:	00 d0       	rcall	.+0      	; 0x168 <SPI_sendString+0x6>
 168:	0f 92       	push	r0
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	9b 83       	std	Y+3, r25	; 0x03
 170:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 172:	19 82       	std	Y+1, r1	; 0x01
 174:	10 c0       	rjmp	.+32     	; 0x196 <SPI_sendString+0x34>
	while(Str[i] !='\0'){
		SPI_recieveByte(Str[i]);
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	9b 81       	ldd	r25, Y+3	; 0x03
 180:	fc 01       	movw	r30, r24
 182:	e2 0f       	add	r30, r18
 184:	f3 1f       	adc	r31, r19
 186:	80 81       	ld	r24, Z
 188:	88 2f       	mov	r24, r24
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_recieveByte>
		i++;
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	89 83       	std	Y+1, r24	; 0x01
	while(bitIsClear(SPSR,SPIF)){} // Wait for Data Receive complete flag
	return SPDR; // return data
}
void SPI_sendString(uint8 * Str){
	uint8 i = 0;
	while(Str[i] !='\0'){
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	28 2f       	mov	r18, r24
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	9b 81       	ldd	r25, Y+3	; 0x03
 1a0:	fc 01       	movw	r30, r24
 1a2:	e2 0f       	add	r30, r18
 1a4:	f3 1f       	adc	r31, r19
 1a6:	80 81       	ld	r24, Z
 1a8:	88 23       	and	r24, r24
 1aa:	29 f7       	brne	.-54     	; 0x176 <SPI_sendString+0x14>
		SPI_recieveByte(Str[i]);
		i++;
	}
}
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	cf 91       	pop	r28
 1b4:	df 91       	pop	r29
 1b6:	08 95       	ret

000001b8 <SPI_recieveString>:
void SPI_recieveString(uint8 * Str){
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	df 93       	push	r29
 1be:	cf 93       	push	r28
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <SPI_recieveString+0xa>
 1c2:	0f 92       	push	r0
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	9b 83       	std	Y+3, r25	; 0x03
 1ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 1cc:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = SPI_recieveByte();
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	8a 81       	ldd	r24, Y+2	; 0x02
 1d6:	9b 81       	ldd	r25, Y+3	; 0x03
 1d8:	8c 01       	movw	r16, r24
 1da:	02 0f       	add	r16, r18
 1dc:	13 1f       	adc	r17, r19
 1de:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_recieveByte>
 1e2:	f8 01       	movw	r30, r16
 1e4:	80 83       	st	Z, r24
 1e6:	0f c0       	rjmp	.+30     	; 0x206 <SPI_recieveString+0x4e>
	while(Str[i] != '#'){
		i++;
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = SPI_recieveByte();
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	8a 81       	ldd	r24, Y+2	; 0x02
 1f6:	9b 81       	ldd	r25, Y+3	; 0x03
 1f8:	8c 01       	movw	r16, r24
 1fa:	02 0f       	add	r16, r18
 1fc:	13 1f       	adc	r17, r19
 1fe:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_recieveByte>
 202:	f8 01       	movw	r30, r16
 204:	80 83       	st	Z, r24
	}
}
void SPI_recieveString(uint8 * Str){
	uint8 i = 0;
	Str[i] = SPI_recieveByte();
	while(Str[i] != '#'){
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	28 2f       	mov	r18, r24
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	9b 81       	ldd	r25, Y+3	; 0x03
 210:	fc 01       	movw	r30, r24
 212:	e2 0f       	add	r30, r18
 214:	f3 1f       	adc	r31, r19
 216:	80 81       	ld	r24, Z
 218:	83 32       	cpi	r24, 0x23	; 35
 21a:	31 f7       	brne	.-52     	; 0x1e8 <SPI_recieveString+0x30>
		i++;
		Str[i] = SPI_recieveByte();
	}
	Str[i] = '\0';
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	28 2f       	mov	r18, r24
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	8a 81       	ldd	r24, Y+2	; 0x02
 224:	9b 81       	ldd	r25, Y+3	; 0x03
 226:	fc 01       	movw	r30, r24
 228:	e2 0f       	add	r30, r18
 22a:	f3 1f       	adc	r31, r19
 22c:	10 82       	st	Z, r1
}
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	cf 91       	pop	r28
 236:	df 91       	pop	r29
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	08 95       	ret

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
