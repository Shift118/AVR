
ADC_AnalogInput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000564  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007a1  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:
#include "adc.h"

void ADC_init(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0; // We need all pins to be equal to 0
  74:	e7 e2       	ldi	r30, 0x27	; 39
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0); //I am working on 1M Hz then use prescale = 8
  7a:	a6 e2       	ldi	r26, 0x26	; 38
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	e6 e2       	ldi	r30, 0x26	; 38
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 81       	ld	r24, Z
  84:	83 68       	ori	r24, 0x83	; 131
  86:	8c 93       	st	X, r24
	// 125 Khz is the valid range of ADC
}
  88:	cf 91       	pop	r28
  8a:	df 91       	pop	r29
  8c:	08 95       	ret

0000008e <ADC_readChannel>:
uint16 ADC_readChannel(uint8 channel_num){
  8e:	df 93       	push	r29
  90:	cf 93       	push	r28
  92:	0f 92       	push	r0
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; // Because I only need 3bits to which channel I want
  9a:	89 81       	ldd	r24, Y+1	; 0x01
  9c:	87 70       	andi	r24, 0x07	; 7
  9e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; // To clear the first 5 bits in the ADMUX
  a0:	a7 e2       	ldi	r26, 0x27	; 39
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e7 e2       	ldi	r30, 0x27	; 39
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 7e       	andi	r24, 0xE0	; 224
  ac:	8c 93       	st	X, r24
	ADMUX |= channel_num; // Select the wanted channel.
  ae:	a7 e2       	ldi	r26, 0x27	; 39
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e7 e2       	ldi	r30, 0x27	; 39
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	89 2b       	or	r24, r25
  bc:	8c 93       	st	X, r24
	setBit(ADCSRA,ADSC); // Start Conversion
  be:	a6 e2       	ldi	r26, 0x26	; 38
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	e6 e2       	ldi	r30, 0x26	; 38
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	8c 93       	st	X, r24
	while(bitIsClear(ADCSRA,ADIF)); // While flag has not triggered wait
  cc:	e6 e2       	ldi	r30, 0x26	; 38
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 2f       	mov	r24, r24
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	80 71       	andi	r24, 0x10	; 16
  d8:	90 70       	andi	r25, 0x00	; 0
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	b9 f3       	breq	.-18     	; 0xcc <ADC_readChannel+0x3e>
	setBit(ADCSRA,ADIF); // Clear the flag by setting it. As written in the datasheet.
  de:	a6 e2       	ldi	r26, 0x26	; 38
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	e6 e2       	ldi	r30, 0x26	; 38
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	8c 93       	st	X, r24
	return ADC;
  ec:	e4 e2       	ldi	r30, 0x24	; 36
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	91 81       	ldd	r25, Z+1	; 0x01
}
  f4:	0f 90       	pop	r0
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <main>:
#include "adc.h"
int main(int argc, char **argv) {
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	00 d0       	rcall	.+0      	; 0x102 <main+0x6>
 102:	00 d0       	rcall	.+0      	; 0x104 <main+0x8>
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01
 10c:	7c 83       	std	Y+4, r23	; 0x04
 10e:	6b 83       	std	Y+3, r22	; 0x03
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x14>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
