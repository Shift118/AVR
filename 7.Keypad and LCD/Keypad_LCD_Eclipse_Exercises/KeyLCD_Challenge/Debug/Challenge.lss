
Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002194  00002208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000016b0  00000000  00000000  0000222c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a69  00000000  00000000  000038dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004345  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004485  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000045f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000623e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007129  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000082c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008a93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 e7       	ldi	r26, 0x79	; 121
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	89 e7       	ldi	r24, 0x79	; 121
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:

#include "lcd.h"
#include "keypad.h"

int main(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2f 97       	sbiw	r28, 0x0f	; 15
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	unsigned char key;
	LCD_init();
     b4a:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_init>
	LCD_displayStringRowColumn(0,0,"Challenge");
     b4e:	20 e6       	ldi	r18, 0x60	; 96
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	a9 01       	movw	r20, r18
     b58:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Keypad 4x4");
     b5c:	2a e6       	ldi	r18, 0x6A	; 106
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	a9 01       	movw	r20, r18
     b66:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2,0,"LCD");
     b6a:	25 e7       	ldi	r18, 0x75	; 117
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	a9 01       	movw	r20, r18
     b74:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_displayStringRowColumn>
	LCD_goToRowColumn(3,0);
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_goToRowColumn>
    while(1)
    {
		/* if any switch pressed for more than 500 ms it counts more than one press */  
		key = KeyPad_getPressedKey(); /* get the pressed key number */
     b80:	0e 94 42 06 	call	0xc84	; 0xc84 <KeyPad_getPressedKey>
     b84:	8f 87       	std	Y+15, r24	; 0x0f
		if((key <= 9) && (key >= 0))
     b86:	8f 85       	ldd	r24, Y+15	; 0x0f
     b88:	8a 30       	cpi	r24, 0x0A	; 10
     b8a:	30 f4       	brcc	.+12     	; 0xb98 <main+0x62>
		{
			LCD_intgerToString(key); /* display the pressed keypad switch */
     b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_intgerToString>
     b96:	03 c0       	rjmp	.+6      	; 0xb9e <main+0x68>
		}
		else
		{
			LCD_displayCharacter(key); /* display the pressed keypad switch */ 
     b98:	8f 85       	ldd	r24, Y+15	; 0x0f
     b9a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_displayCharacter>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	aa ef       	ldi	r26, 0xFA	; 250
     ba4:	b3 e4       	ldi	r27, 0x43	; 67
     ba6:	8b 87       	std	Y+11, r24	; 0x0b
     ba8:	9c 87       	std	Y+12, r25	; 0x0c
     baa:	ad 87       	std	Y+13, r26	; 0x0d
     bac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bae:	6b 85       	ldd	r22, Y+11	; 0x0b
     bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	4a e7       	ldi	r20, 0x7A	; 122
     bbc:	53 e4       	ldi	r21, 0x43	; 67
     bbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	8f 83       	std	Y+7, r24	; 0x07
     bc8:	98 87       	std	Y+8, r25	; 0x08
     bca:	a9 87       	std	Y+9, r26	; 0x09
     bcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bce:	6f 81       	ldd	r22, Y+7	; 0x07
     bd0:	78 85       	ldd	r23, Y+8	; 0x08
     bd2:	89 85       	ldd	r24, Y+9	; 0x09
     bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e8       	ldi	r20, 0x80	; 128
     bdc:	5f e3       	ldi	r21, 0x3F	; 63
     bde:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     be2:	88 23       	and	r24, r24
     be4:	2c f4       	brge	.+10     	; 0xbf0 <main+0xba>
		__ticks = 1;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
     bee:	3f c0       	rjmp	.+126    	; 0xc6e <main+0x138>
	else if (__tmp > 65535)
     bf0:	6f 81       	ldd	r22, Y+7	; 0x07
     bf2:	78 85       	ldd	r23, Y+8	; 0x08
     bf4:	89 85       	ldd	r24, Y+9	; 0x09
     bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	3f ef       	ldi	r19, 0xFF	; 255
     bfc:	4f e7       	ldi	r20, 0x7F	; 127
     bfe:	57 e4       	ldi	r21, 0x47	; 71
     c00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c04:	18 16       	cp	r1, r24
     c06:	4c f5       	brge	.+82     	; 0xc5a <main+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c08:	6b 85       	ldd	r22, Y+11	; 0x0b
     c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e2       	ldi	r20, 0x20	; 32
     c16:	51 e4       	ldi	r21, 0x41	; 65
     c18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	bc 01       	movw	r22, r24
     c22:	cd 01       	movw	r24, r26
     c24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	9e 83       	std	Y+6, r25	; 0x06
     c2e:	8d 83       	std	Y+5, r24	; 0x05
     c30:	0f c0       	rjmp	.+30     	; 0xc50 <main+0x11a>
     c32:	89 e1       	ldi	r24, 0x19	; 25
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <main+0x108>
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c46:	8d 81       	ldd	r24, Y+5	; 0x05
     c48:	9e 81       	ldd	r25, Y+6	; 0x06
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c50:	8d 81       	ldd	r24, Y+5	; 0x05
     c52:	9e 81       	ldd	r25, Y+6	; 0x06
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	69 f7       	brne	.-38     	; 0xc32 <main+0xfc>
     c58:	93 cf       	rjmp	.-218    	; 0xb80 <main+0x4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5a:	6f 81       	ldd	r22, Y+7	; 0x07
     c5c:	78 85       	ldd	r23, Y+8	; 0x08
     c5e:	89 85       	ldd	r24, Y+9	; 0x09
     c60:	9a 85       	ldd	r25, Y+10	; 0x0a
     c62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	9e 83       	std	Y+6, r25	; 0x06
     c6c:	8d 83       	std	Y+5, r24	; 0x05
     c6e:	8d 81       	ldd	r24, Y+5	; 0x05
     c70:	9e 81       	ldd	r25, Y+6	; 0x06
     c72:	9a 83       	std	Y+2, r25	; 0x02
     c74:	89 83       	std	Y+1, r24	; 0x01
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <main+0x144>
     c7e:	9a 83       	std	Y+2, r25	; 0x02
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	7e cf       	rjmp	.-260    	; 0xb80 <main+0x4a>

00000c84 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	00 d0       	rcall	.+0      	; 0xc8a <KeyPad_getPressedKey+0x6>
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     c8e:	1a 82       	std	Y+2, r1	; 0x02
     c90:	4c c0       	rjmp	.+152    	; 0xd2a <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     c92:	ea e3       	ldi	r30, 0x3A	; 58
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	80 e1       	ldi	r24, 0x10	; 16
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <KeyPad_getPressedKey+0x22>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	2a 95       	dec	r18
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <KeyPad_getPressedKey+0x1e>
     caa:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
     cac:	eb e3       	ldi	r30, 0x3B	; 59
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	80 e1       	ldi	r24, 0x10	; 16
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 2e       	mov	r0, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <KeyPad_getPressedKey+0x3e>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <KeyPad_getPressedKey+0x3a>
     cc6:	80 95       	com	r24
     cc8:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
     cca:	19 82       	std	Y+1, r1	; 0x01
     ccc:	28 c0       	rjmp	.+80     	; 0xd1e <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     cce:	e9 e3       	ldi	r30, 0x39	; 57
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a9 01       	movw	r20, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <KeyPad_getPressedKey+0x62>
     ce2:	55 95       	asr	r21
     ce4:	47 95       	ror	r20
     ce6:	8a 95       	dec	r24
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <KeyPad_getPressedKey+0x5e>
     cea:	ca 01       	movw	r24, r20
     cec:	81 70       	andi	r24, 0x01	; 1
     cee:	90 70       	andi	r25, 0x00	; 0
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	91 f4       	brne	.+36     	; 0xd18 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	88 2f       	mov	r24, r24
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	98 2f       	mov	r25, r24
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	89 0f       	add	r24, r25
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	0e 94 9a 06 	call	0xd34	; 0xd34 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	8f 5f       	subi	r24, 0xFF	; 255
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	84 30       	cpi	r24, 0x04	; 4
     d22:	a8 f2       	brcs	.-86     	; 0xcce <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	8f 5f       	subi	r24, 0xFF	; 255
     d28:	8a 83       	std	Y+2, r24	; 0x02
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	84 30       	cpi	r24, 0x04	; 4
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <KeyPad_getPressedKey+0xae>
     d30:	b0 cf       	rjmp	.-160    	; 0xc92 <KeyPad_getPressedKey+0xe>
     d32:	ad cf       	rjmp	.-166    	; 0xc8e <KeyPad_getPressedKey+0xa>

00000d34 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	00 d0       	rcall	.+0      	; 0xd3a <KeyPad_4x4_adjustKeyNumber+0x6>
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <KeyPad_4x4_adjustKeyNumber+0x8>
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	3c 83       	std	Y+4, r19	; 0x04
     d4a:	2b 83       	std	Y+3, r18	; 0x03
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	88 30       	cpi	r24, 0x08	; 8
     d52:	91 05       	cpc	r25, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <KeyPad_4x4_adjustKeyNumber+0x24>
     d56:	70 c0       	rjmp	.+224    	; 0xe38 <KeyPad_4x4_adjustKeyNumber+0x104>
     d58:	2b 81       	ldd	r18, Y+3	; 0x03
     d5a:	3c 81       	ldd	r19, Y+4	; 0x04
     d5c:	29 30       	cpi	r18, 0x09	; 9
     d5e:	31 05       	cpc	r19, r1
     d60:	5c f5       	brge	.+86     	; 0xdb8 <KeyPad_4x4_adjustKeyNumber+0x84>
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	84 30       	cpi	r24, 0x04	; 4
     d68:	91 05       	cpc	r25, r1
     d6a:	09 f4       	brne	.+2      	; 0xd6e <KeyPad_4x4_adjustKeyNumber+0x3a>
     d6c:	59 c0       	rjmp	.+178    	; 0xe20 <KeyPad_4x4_adjustKeyNumber+0xec>
     d6e:	2b 81       	ldd	r18, Y+3	; 0x03
     d70:	3c 81       	ldd	r19, Y+4	; 0x04
     d72:	25 30       	cpi	r18, 0x05	; 5
     d74:	31 05       	cpc	r19, r1
     d76:	9c f4       	brge	.+38     	; 0xd9e <KeyPad_4x4_adjustKeyNumber+0x6a>
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	9c 81       	ldd	r25, Y+4	; 0x04
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	91 05       	cpc	r25, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <KeyPad_4x4_adjustKeyNumber+0x50>
     d82:	48 c0       	rjmp	.+144    	; 0xe14 <KeyPad_4x4_adjustKeyNumber+0xe0>
     d84:	2b 81       	ldd	r18, Y+3	; 0x03
     d86:	3c 81       	ldd	r19, Y+4	; 0x04
     d88:	23 30       	cpi	r18, 0x03	; 3
     d8a:	31 05       	cpc	r19, r1
     d8c:	0c f0       	brlt	.+2      	; 0xd90 <KeyPad_4x4_adjustKeyNumber+0x5c>
     d8e:	45 c0       	rjmp	.+138    	; 0xe1a <KeyPad_4x4_adjustKeyNumber+0xe6>
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	91 05       	cpc	r25, r1
     d98:	09 f4       	brne	.+2      	; 0xd9c <KeyPad_4x4_adjustKeyNumber+0x68>
     d9a:	39 c0       	rjmp	.+114    	; 0xe0e <KeyPad_4x4_adjustKeyNumber+0xda>
     d9c:	67 c0       	rjmp	.+206    	; 0xe6c <KeyPad_4x4_adjustKeyNumber+0x138>
     d9e:	2b 81       	ldd	r18, Y+3	; 0x03
     da0:	3c 81       	ldd	r19, Y+4	; 0x04
     da2:	26 30       	cpi	r18, 0x06	; 6
     da4:	31 05       	cpc	r19, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <KeyPad_4x4_adjustKeyNumber+0x76>
     da8:	41 c0       	rjmp	.+130    	; 0xe2c <KeyPad_4x4_adjustKeyNumber+0xf8>
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	87 30       	cpi	r24, 0x07	; 7
     db0:	91 05       	cpc	r25, r1
     db2:	0c f0       	brlt	.+2      	; 0xdb6 <KeyPad_4x4_adjustKeyNumber+0x82>
     db4:	3e c0       	rjmp	.+124    	; 0xe32 <KeyPad_4x4_adjustKeyNumber+0xfe>
     db6:	37 c0       	rjmp	.+110    	; 0xe26 <KeyPad_4x4_adjustKeyNumber+0xf2>
     db8:	2b 81       	ldd	r18, Y+3	; 0x03
     dba:	3c 81       	ldd	r19, Y+4	; 0x04
     dbc:	2c 30       	cpi	r18, 0x0C	; 12
     dbe:	31 05       	cpc	r19, r1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <KeyPad_4x4_adjustKeyNumber+0x90>
     dc2:	46 c0       	rjmp	.+140    	; 0xe50 <KeyPad_4x4_adjustKeyNumber+0x11c>
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	8d 30       	cpi	r24, 0x0D	; 13
     dca:	91 05       	cpc	r25, r1
     dcc:	5c f4       	brge	.+22     	; 0xde4 <KeyPad_4x4_adjustKeyNumber+0xb0>
     dce:	2b 81       	ldd	r18, Y+3	; 0x03
     dd0:	3c 81       	ldd	r19, Y+4	; 0x04
     dd2:	2a 30       	cpi	r18, 0x0A	; 10
     dd4:	31 05       	cpc	r19, r1
     dd6:	b1 f1       	breq	.+108    	; 0xe44 <KeyPad_4x4_adjustKeyNumber+0x110>
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	9c 81       	ldd	r25, Y+4	; 0x04
     ddc:	8b 30       	cpi	r24, 0x0B	; 11
     dde:	91 05       	cpc	r25, r1
     de0:	a4 f5       	brge	.+104    	; 0xe4a <KeyPad_4x4_adjustKeyNumber+0x116>
     de2:	2d c0       	rjmp	.+90     	; 0xe3e <KeyPad_4x4_adjustKeyNumber+0x10a>
     de4:	2b 81       	ldd	r18, Y+3	; 0x03
     de6:	3c 81       	ldd	r19, Y+4	; 0x04
     de8:	2e 30       	cpi	r18, 0x0E	; 14
     dea:	31 05       	cpc	r19, r1
     dec:	b9 f1       	breq	.+110    	; 0xe5c <KeyPad_4x4_adjustKeyNumber+0x128>
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	8e 30       	cpi	r24, 0x0E	; 14
     df4:	91 05       	cpc	r25, r1
     df6:	7c f1       	brlt	.+94     	; 0xe56 <KeyPad_4x4_adjustKeyNumber+0x122>
     df8:	2b 81       	ldd	r18, Y+3	; 0x03
     dfa:	3c 81       	ldd	r19, Y+4	; 0x04
     dfc:	2f 30       	cpi	r18, 0x0F	; 15
     dfe:	31 05       	cpc	r19, r1
     e00:	79 f1       	breq	.+94     	; 0xe60 <KeyPad_4x4_adjustKeyNumber+0x12c>
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	9c 81       	ldd	r25, Y+4	; 0x04
     e06:	80 31       	cpi	r24, 0x10	; 16
     e08:	91 05       	cpc	r25, r1
     e0a:	69 f1       	breq	.+90     	; 0xe66 <KeyPad_4x4_adjustKeyNumber+0x132>
     e0c:	2f c0       	rjmp	.+94     	; 0xe6c <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
     e0e:	97 e0       	ldi	r25, 0x07	; 7
     e10:	9a 83       	std	Y+2, r25	; 0x02
     e12:	2e c0       	rjmp	.+92     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
     e14:	28 e0       	ldi	r18, 0x08	; 8
     e16:	2a 83       	std	Y+2, r18	; 0x02
     e18:	2b c0       	rjmp	.+86     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
     e1a:	39 e0       	ldi	r19, 0x09	; 9
     e1c:	3a 83       	std	Y+2, r19	; 0x02
     e1e:	28 c0       	rjmp	.+80     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
     e20:	85 e2       	ldi	r24, 0x25	; 37
     e22:	8a 83       	std	Y+2, r24	; 0x02
     e24:	25 c0       	rjmp	.+74     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
     e26:	94 e0       	ldi	r25, 0x04	; 4
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	22 c0       	rjmp	.+68     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     e2c:	25 e0       	ldi	r18, 0x05	; 5
     e2e:	2a 83       	std	Y+2, r18	; 0x02
     e30:	1f c0       	rjmp	.+62     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
     e32:	36 e0       	ldi	r19, 0x06	; 6
     e34:	3a 83       	std	Y+2, r19	; 0x02
     e36:	1c c0       	rjmp	.+56     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     e38:	8a e2       	ldi	r24, 0x2A	; 42
     e3a:	8a 83       	std	Y+2, r24	; 0x02
     e3c:	19 c0       	rjmp	.+50     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	16 c0       	rjmp	.+44     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
     e44:	22 e0       	ldi	r18, 0x02	; 2
     e46:	2a 83       	std	Y+2, r18	; 0x02
     e48:	13 c0       	rjmp	.+38     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
     e4a:	33 e0       	ldi	r19, 0x03	; 3
     e4c:	3a 83       	std	Y+2, r19	; 0x02
     e4e:	10 c0       	rjmp	.+32     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     e50:	8d e2       	ldi	r24, 0x2D	; 45
     e52:	8a 83       	std	Y+2, r24	; 0x02
     e54:	0d c0       	rjmp	.+26     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     e56:	9d e0       	ldi	r25, 0x0D	; 13
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	0a c0       	rjmp	.+20     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
     e5c:	1a 82       	std	Y+2, r1	; 0x02
     e5e:	08 c0       	rjmp	.+16     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     e60:	2d e3       	ldi	r18, 0x3D	; 61
     e62:	2a 83       	std	Y+2, r18	; 0x02
     e64:	05 c0       	rjmp	.+10     	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     e66:	3b e2       	ldi	r19, 0x2B	; 43
     e68:	3a 83       	std	Y+2, r19	; 0x02
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	8a 83       	std	Y+2, r24	; 0x02
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     e88:	a1 e3       	ldi	r26, 0x31	; 49
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e1 e3       	ldi	r30, 0x31	; 49
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 67       	ori	r24, 0x70	; 112
     e94:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
     e96:	a4 e3       	ldi	r26, 0x34	; 52
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e4 e3       	ldi	r30, 0x34	; 52
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	80 6f       	ori	r24, 0xF0	; 240
     ea2:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	0e 94 61 07 	call	0xec2	; 0xec2 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
     eaa:	88 e2       	ldi	r24, 0x28	; 40
     eac:	0e 94 61 07 	call	0xec2	; 0xec2 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     eb0:	8c e0       	ldi	r24, 0x0C	; 12
     eb2:	0e 94 61 07 	call	0xec2	; 0xec2 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	0e 94 61 07 	call	0xec2	; 0xec2 <LCD_sendCommand>
}
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	c3 56       	subi	r28, 0x63	; 99
     ed0:	d0 40       	sbci	r29, 0x00	; 0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	fe 01       	movw	r30, r28
     ede:	ed 59       	subi	r30, 0x9D	; 157
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     ee4:	a2 e3       	ldi	r26, 0x32	; 50
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e2 e3       	ldi	r30, 0x32	; 50
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8f 7e       	andi	r24, 0xEF	; 239
     ef0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     ef2:	a2 e3       	ldi	r26, 0x32	; 50
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e2 e3       	ldi	r30, 0x32	; 50
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8f 7d       	andi	r24, 0xDF	; 223
     efe:	8c 93       	st	X, r24
     f00:	fe 01       	movw	r30, r28
     f02:	e1 5a       	subi	r30, 0xA1	; 161
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	a0 e8       	ldi	r26, 0x80	; 128
     f0c:	bf e3       	ldi	r27, 0x3F	; 63
     f0e:	80 83       	st	Z, r24
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	a2 83       	std	Z+2, r26	; 0x02
     f14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f16:	8e 01       	movw	r16, r28
     f18:	05 5a       	subi	r16, 0xA5	; 165
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
     f1c:	fe 01       	movw	r30, r28
     f1e:	e1 5a       	subi	r30, 0xA1	; 161
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	60 81       	ld	r22, Z
     f24:	71 81       	ldd	r23, Z+1	; 0x01
     f26:	82 81       	ldd	r24, Z+2	; 0x02
     f28:	93 81       	ldd	r25, Z+3	; 0x03
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	4a e7       	ldi	r20, 0x7A	; 122
     f30:	53 e4       	ldi	r21, 0x43	; 67
     f32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	f8 01       	movw	r30, r16
     f3c:	80 83       	st	Z, r24
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	a2 83       	std	Z+2, r26	; 0x02
     f42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f44:	fe 01       	movw	r30, r28
     f46:	e5 5a       	subi	r30, 0xA5	; 165
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	60 81       	ld	r22, Z
     f4c:	71 81       	ldd	r23, Z+1	; 0x01
     f4e:	82 81       	ldd	r24, Z+2	; 0x02
     f50:	93 81       	ldd	r25, Z+3	; 0x03
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e8       	ldi	r20, 0x80	; 128
     f58:	5f e3       	ldi	r21, 0x3F	; 63
     f5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f5e:	88 23       	and	r24, r24
     f60:	44 f4       	brge	.+16     	; 0xf72 <LCD_sendCommand+0xb0>
		__ticks = 1;
     f62:	fe 01       	movw	r30, r28
     f64:	e7 5a       	subi	r30, 0xA7	; 167
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	91 83       	std	Z+1, r25	; 0x01
     f6e:	80 83       	st	Z, r24
     f70:	64 c0       	rjmp	.+200    	; 0x103a <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     f72:	fe 01       	movw	r30, r28
     f74:	e5 5a       	subi	r30, 0xA5	; 165
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	60 81       	ld	r22, Z
     f7a:	71 81       	ldd	r23, Z+1	; 0x01
     f7c:	82 81       	ldd	r24, Z+2	; 0x02
     f7e:	93 81       	ldd	r25, Z+3	; 0x03
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	3f ef       	ldi	r19, 0xFF	; 255
     f84:	4f e7       	ldi	r20, 0x7F	; 127
     f86:	57 e4       	ldi	r21, 0x47	; 71
     f88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f8c:	18 16       	cp	r1, r24
     f8e:	0c f0       	brlt	.+2      	; 0xf92 <LCD_sendCommand+0xd0>
     f90:	43 c0       	rjmp	.+134    	; 0x1018 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f92:	fe 01       	movw	r30, r28
     f94:	e1 5a       	subi	r30, 0xA1	; 161
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	60 81       	ld	r22, Z
     f9a:	71 81       	ldd	r23, Z+1	; 0x01
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	93 81       	ldd	r25, Z+3	; 0x03
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e2       	ldi	r20, 0x20	; 32
     fa6:	51 e4       	ldi	r21, 0x41	; 65
     fa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	8e 01       	movw	r16, r28
     fb2:	07 5a       	subi	r16, 0xA7	; 167
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	bc 01       	movw	r22, r24
     fb8:	cd 01       	movw	r24, r26
     fba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	f8 01       	movw	r30, r16
     fc4:	91 83       	std	Z+1, r25	; 0x01
     fc6:	80 83       	st	Z, r24
     fc8:	1f c0       	rjmp	.+62     	; 0x1008 <LCD_sendCommand+0x146>
     fca:	fe 01       	movw	r30, r28
     fcc:	e9 5a       	subi	r30, 0xA9	; 169
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	89 e1       	ldi	r24, 0x19	; 25
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
     fd8:	fe 01       	movw	r30, r28
     fda:	e9 5a       	subi	r30, 0xA9	; 169
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	80 81       	ld	r24, Z
     fe0:	91 81       	ldd	r25, Z+1	; 0x01
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <LCD_sendCommand+0x120>
     fe6:	fe 01       	movw	r30, r28
     fe8:	e9 5a       	subi	r30, 0xA9	; 169
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	91 83       	std	Z+1, r25	; 0x01
     fee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff0:	de 01       	movw	r26, r28
     ff2:	a7 5a       	subi	r26, 0xA7	; 167
     ff4:	bf 4f       	sbci	r27, 0xFF	; 255
     ff6:	fe 01       	movw	r30, r28
     ff8:	e7 5a       	subi	r30, 0xA7	; 167
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	11 96       	adiw	r26, 0x01	; 1
    1004:	9c 93       	st	X, r25
    1006:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1008:	fe 01       	movw	r30, r28
    100a:	e7 5a       	subi	r30, 0xA7	; 167
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	80 81       	ld	r24, Z
    1010:	91 81       	ldd	r25, Z+1	; 0x01
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	d1 f6       	brne	.-76     	; 0xfca <LCD_sendCommand+0x108>
    1016:	27 c0       	rjmp	.+78     	; 0x1066 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1018:	8e 01       	movw	r16, r28
    101a:	07 5a       	subi	r16, 0xA7	; 167
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	fe 01       	movw	r30, r28
    1020:	e5 5a       	subi	r30, 0xA5	; 165
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	60 81       	ld	r22, Z
    1026:	71 81       	ldd	r23, Z+1	; 0x01
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	f8 01       	movw	r30, r16
    1036:	91 83       	std	Z+1, r25	; 0x01
    1038:	80 83       	st	Z, r24
    103a:	de 01       	movw	r26, r28
    103c:	ab 5a       	subi	r26, 0xAB	; 171
    103e:	bf 4f       	sbci	r27, 0xFF	; 255
    1040:	fe 01       	movw	r30, r28
    1042:	e7 5a       	subi	r30, 0xA7	; 167
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	8d 93       	st	X+, r24
    104c:	9c 93       	st	X, r25
    104e:	fe 01       	movw	r30, r28
    1050:	eb 5a       	subi	r30, 0xAB	; 171
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	f1 f7       	brne	.-4      	; 0x1058 <LCD_sendCommand+0x196>
    105c:	fe 01       	movw	r30, r28
    105e:	eb 5a       	subi	r30, 0xAB	; 171
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1066:	a2 e3       	ldi	r26, 0x32	; 50
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e2 e3       	ldi	r30, 0x32	; 50
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	80 64       	ori	r24, 0x40	; 64
    1072:	8c 93       	st	X, r24
    1074:	fe 01       	movw	r30, r28
    1076:	ef 5a       	subi	r30, 0xAF	; 175
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e8       	ldi	r26, 0x80	; 128
    1080:	bf e3       	ldi	r27, 0x3F	; 63
    1082:	80 83       	st	Z, r24
    1084:	91 83       	std	Z+1, r25	; 0x01
    1086:	a2 83       	std	Z+2, r26	; 0x02
    1088:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	8e 01       	movw	r16, r28
    108c:	03 5b       	subi	r16, 0xB3	; 179
    108e:	1f 4f       	sbci	r17, 0xFF	; 255
    1090:	fe 01       	movw	r30, r28
    1092:	ef 5a       	subi	r30, 0xAF	; 175
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	60 81       	ld	r22, Z
    1098:	71 81       	ldd	r23, Z+1	; 0x01
    109a:	82 81       	ldd	r24, Z+2	; 0x02
    109c:	93 81       	ldd	r25, Z+3	; 0x03
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	4a e7       	ldi	r20, 0x7A	; 122
    10a4:	53 e4       	ldi	r21, 0x43	; 67
    10a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	f8 01       	movw	r30, r16
    10b0:	80 83       	st	Z, r24
    10b2:	91 83       	std	Z+1, r25	; 0x01
    10b4:	a2 83       	std	Z+2, r26	; 0x02
    10b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10b8:	fe 01       	movw	r30, r28
    10ba:	e3 5b       	subi	r30, 0xB3	; 179
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	60 81       	ld	r22, Z
    10c0:	71 81       	ldd	r23, Z+1	; 0x01
    10c2:	82 81       	ldd	r24, Z+2	; 0x02
    10c4:	93 81       	ldd	r25, Z+3	; 0x03
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e8       	ldi	r20, 0x80	; 128
    10cc:	5f e3       	ldi	r21, 0x3F	; 63
    10ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10d2:	88 23       	and	r24, r24
    10d4:	44 f4       	brge	.+16     	; 0x10e6 <LCD_sendCommand+0x224>
		__ticks = 1;
    10d6:	fe 01       	movw	r30, r28
    10d8:	e5 5b       	subi	r30, 0xB5	; 181
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	91 83       	std	Z+1, r25	; 0x01
    10e2:	80 83       	st	Z, r24
    10e4:	64 c0       	rjmp	.+200    	; 0x11ae <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    10e6:	fe 01       	movw	r30, r28
    10e8:	e3 5b       	subi	r30, 0xB3	; 179
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	60 81       	ld	r22, Z
    10ee:	71 81       	ldd	r23, Z+1	; 0x01
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	93 81       	ldd	r25, Z+3	; 0x03
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	3f ef       	ldi	r19, 0xFF	; 255
    10f8:	4f e7       	ldi	r20, 0x7F	; 127
    10fa:	57 e4       	ldi	r21, 0x47	; 71
    10fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1100:	18 16       	cp	r1, r24
    1102:	0c f0       	brlt	.+2      	; 0x1106 <LCD_sendCommand+0x244>
    1104:	43 c0       	rjmp	.+134    	; 0x118c <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1106:	fe 01       	movw	r30, r28
    1108:	ef 5a       	subi	r30, 0xAF	; 175
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	82 81       	ldd	r24, Z+2	; 0x02
    1112:	93 81       	ldd	r25, Z+3	; 0x03
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e2       	ldi	r20, 0x20	; 32
    111a:	51 e4       	ldi	r21, 0x41	; 65
    111c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	8e 01       	movw	r16, r28
    1126:	05 5b       	subi	r16, 0xB5	; 181
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
    112a:	bc 01       	movw	r22, r24
    112c:	cd 01       	movw	r24, r26
    112e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	f8 01       	movw	r30, r16
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	80 83       	st	Z, r24
    113c:	1f c0       	rjmp	.+62     	; 0x117c <LCD_sendCommand+0x2ba>
    113e:	fe 01       	movw	r30, r28
    1140:	e7 5b       	subi	r30, 0xB7	; 183
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	89 e1       	ldi	r24, 0x19	; 25
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	80 83       	st	Z, r24
    114c:	fe 01       	movw	r30, r28
    114e:	e7 5b       	subi	r30, 0xB7	; 183
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	80 81       	ld	r24, Z
    1154:	91 81       	ldd	r25, Z+1	; 0x01
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <LCD_sendCommand+0x294>
    115a:	fe 01       	movw	r30, r28
    115c:	e7 5b       	subi	r30, 0xB7	; 183
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	91 83       	std	Z+1, r25	; 0x01
    1162:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1164:	de 01       	movw	r26, r28
    1166:	a5 5b       	subi	r26, 0xB5	; 181
    1168:	bf 4f       	sbci	r27, 0xFF	; 255
    116a:	fe 01       	movw	r30, r28
    116c:	e5 5b       	subi	r30, 0xB5	; 181
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	80 81       	ld	r24, Z
    1172:	91 81       	ldd	r25, Z+1	; 0x01
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	11 96       	adiw	r26, 0x01	; 1
    1178:	9c 93       	st	X, r25
    117a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117c:	fe 01       	movw	r30, r28
    117e:	e5 5b       	subi	r30, 0xB5	; 181
    1180:	ff 4f       	sbci	r31, 0xFF	; 255
    1182:	80 81       	ld	r24, Z
    1184:	91 81       	ldd	r25, Z+1	; 0x01
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	d1 f6       	brne	.-76     	; 0x113e <LCD_sendCommand+0x27c>
    118a:	27 c0       	rjmp	.+78     	; 0x11da <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    118c:	8e 01       	movw	r16, r28
    118e:	05 5b       	subi	r16, 0xB5	; 181
    1190:	1f 4f       	sbci	r17, 0xFF	; 255
    1192:	fe 01       	movw	r30, r28
    1194:	e3 5b       	subi	r30, 0xB3	; 179
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	60 81       	ld	r22, Z
    119a:	71 81       	ldd	r23, Z+1	; 0x01
    119c:	82 81       	ldd	r24, Z+2	; 0x02
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	f8 01       	movw	r30, r16
    11aa:	91 83       	std	Z+1, r25	; 0x01
    11ac:	80 83       	st	Z, r24
    11ae:	de 01       	movw	r26, r28
    11b0:	a9 5b       	subi	r26, 0xB9	; 185
    11b2:	bf 4f       	sbci	r27, 0xFF	; 255
    11b4:	fe 01       	movw	r30, r28
    11b6:	e5 5b       	subi	r30, 0xB5	; 181
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	80 81       	ld	r24, Z
    11bc:	91 81       	ldd	r25, Z+1	; 0x01
    11be:	8d 93       	st	X+, r24
    11c0:	9c 93       	st	X, r25
    11c2:	fe 01       	movw	r30, r28
    11c4:	e9 5b       	subi	r30, 0xB9	; 185
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	80 81       	ld	r24, Z
    11ca:	91 81       	ldd	r25, Z+1	; 0x01
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <LCD_sendCommand+0x30a>
    11d0:	fe 01       	movw	r30, r28
    11d2:	e9 5b       	subi	r30, 0xB9	; 185
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	91 83       	std	Z+1, r25	; 0x01
    11d8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    11da:	a5 e3       	ldi	r26, 0x35	; 53
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e5 e3       	ldi	r30, 0x35	; 53
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	98 2f       	mov	r25, r24
    11e6:	9f 70       	andi	r25, 0x0F	; 15
    11e8:	fe 01       	movw	r30, r28
    11ea:	ed 59       	subi	r30, 0x9D	; 157
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	80 81       	ld	r24, Z
    11f0:	80 7f       	andi	r24, 0xF0	; 240
    11f2:	89 2b       	or	r24, r25
    11f4:	8c 93       	st	X, r24
    11f6:	fe 01       	movw	r30, r28
    11f8:	ed 5b       	subi	r30, 0xBD	; 189
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a0 e8       	ldi	r26, 0x80	; 128
    1202:	bf e3       	ldi	r27, 0x3F	; 63
    1204:	80 83       	st	Z, r24
    1206:	91 83       	std	Z+1, r25	; 0x01
    1208:	a2 83       	std	Z+2, r26	; 0x02
    120a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120c:	8e 01       	movw	r16, r28
    120e:	01 5c       	subi	r16, 0xC1	; 193
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	fe 01       	movw	r30, r28
    1214:	ed 5b       	subi	r30, 0xBD	; 189
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	93 81       	ldd	r25, Z+3	; 0x03
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	4a e7       	ldi	r20, 0x7A	; 122
    1226:	53 e4       	ldi	r21, 0x43	; 67
    1228:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	f8 01       	movw	r30, r16
    1232:	80 83       	st	Z, r24
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	a2 83       	std	Z+2, r26	; 0x02
    1238:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    123a:	fe 01       	movw	r30, r28
    123c:	ff 96       	adiw	r30, 0x3f	; 63
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e8       	ldi	r20, 0x80	; 128
    124c:	5f e3       	ldi	r21, 0x3F	; 63
    124e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1252:	88 23       	and	r24, r24
    1254:	2c f4       	brge	.+10     	; 0x1260 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9e af       	std	Y+62, r25	; 0x3e
    125c:	8d af       	std	Y+61, r24	; 0x3d
    125e:	46 c0       	rjmp	.+140    	; 0x12ec <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1260:	fe 01       	movw	r30, r28
    1262:	ff 96       	adiw	r30, 0x3f	; 63
    1264:	60 81       	ld	r22, Z
    1266:	71 81       	ldd	r23, Z+1	; 0x01
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	3f ef       	ldi	r19, 0xFF	; 255
    1270:	4f e7       	ldi	r20, 0x7F	; 127
    1272:	57 e4       	ldi	r21, 0x47	; 71
    1274:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1278:	18 16       	cp	r1, r24
    127a:	64 f5       	brge	.+88     	; 0x12d4 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127c:	fe 01       	movw	r30, r28
    127e:	ed 5b       	subi	r30, 0xBD	; 189
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e2       	ldi	r20, 0x20	; 32
    1290:	51 e4       	ldi	r21, 0x41	; 65
    1292:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	bc 01       	movw	r22, r24
    129c:	cd 01       	movw	r24, r26
    129e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9e af       	std	Y+62, r25	; 0x3e
    12a8:	8d af       	std	Y+61, r24	; 0x3d
    12aa:	0f c0       	rjmp	.+30     	; 0x12ca <LCD_sendCommand+0x408>
    12ac:	89 e1       	ldi	r24, 0x19	; 25
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9c af       	std	Y+60, r25	; 0x3c
    12b2:	8b af       	std	Y+59, r24	; 0x3b
    12b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    12b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <LCD_sendCommand+0x3f6>
    12bc:	9c af       	std	Y+60, r25	; 0x3c
    12be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    12c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	9e af       	std	Y+62, r25	; 0x3e
    12c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    12cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	69 f7       	brne	.-38     	; 0x12ac <LCD_sendCommand+0x3ea>
    12d2:	16 c0       	rjmp	.+44     	; 0x1300 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d4:	fe 01       	movw	r30, r28
    12d6:	ff 96       	adiw	r30, 0x3f	; 63
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	9e af       	std	Y+62, r25	; 0x3e
    12ea:	8d af       	std	Y+61, r24	; 0x3d
    12ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    12ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    12f0:	9a af       	std	Y+58, r25	; 0x3a
    12f2:	89 af       	std	Y+57, r24	; 0x39
    12f4:	89 ad       	ldd	r24, Y+57	; 0x39
    12f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <LCD_sendCommand+0x436>
    12fc:	9a af       	std	Y+58, r25	; 0x3a
    12fe:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1300:	a2 e3       	ldi	r26, 0x32	; 50
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e2 e3       	ldi	r30, 0x32	; 50
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8f 7b       	andi	r24, 0xBF	; 191
    130c:	8c 93       	st	X, r24
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a0 e8       	ldi	r26, 0x80	; 128
    1314:	bf e3       	ldi	r27, 0x3F	; 63
    1316:	8d ab       	std	Y+53, r24	; 0x35
    1318:	9e ab       	std	Y+54, r25	; 0x36
    131a:	af ab       	std	Y+55, r26	; 0x37
    131c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131e:	6d a9       	ldd	r22, Y+53	; 0x35
    1320:	7e a9       	ldd	r23, Y+54	; 0x36
    1322:	8f a9       	ldd	r24, Y+55	; 0x37
    1324:	98 ad       	ldd	r25, Y+56	; 0x38
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	4a e7       	ldi	r20, 0x7A	; 122
    132c:	53 e4       	ldi	r21, 0x43	; 67
    132e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	89 ab       	std	Y+49, r24	; 0x31
    1338:	9a ab       	std	Y+50, r25	; 0x32
    133a:	ab ab       	std	Y+51, r26	; 0x33
    133c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    133e:	69 a9       	ldd	r22, Y+49	; 0x31
    1340:	7a a9       	ldd	r23, Y+50	; 0x32
    1342:	8b a9       	ldd	r24, Y+51	; 0x33
    1344:	9c a9       	ldd	r25, Y+52	; 0x34
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e8       	ldi	r20, 0x80	; 128
    134c:	5f e3       	ldi	r21, 0x3F	; 63
    134e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1352:	88 23       	and	r24, r24
    1354:	2c f4       	brge	.+10     	; 0x1360 <LCD_sendCommand+0x49e>
		__ticks = 1;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	98 ab       	std	Y+48, r25	; 0x30
    135c:	8f a7       	std	Y+47, r24	; 0x2f
    135e:	3f c0       	rjmp	.+126    	; 0x13de <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1360:	69 a9       	ldd	r22, Y+49	; 0x31
    1362:	7a a9       	ldd	r23, Y+50	; 0x32
    1364:	8b a9       	ldd	r24, Y+51	; 0x33
    1366:	9c a9       	ldd	r25, Y+52	; 0x34
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	3f ef       	ldi	r19, 0xFF	; 255
    136c:	4f e7       	ldi	r20, 0x7F	; 127
    136e:	57 e4       	ldi	r21, 0x47	; 71
    1370:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1374:	18 16       	cp	r1, r24
    1376:	4c f5       	brge	.+82     	; 0x13ca <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1378:	6d a9       	ldd	r22, Y+53	; 0x35
    137a:	7e a9       	ldd	r23, Y+54	; 0x36
    137c:	8f a9       	ldd	r24, Y+55	; 0x37
    137e:	98 ad       	ldd	r25, Y+56	; 0x38
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e2       	ldi	r20, 0x20	; 32
    1386:	51 e4       	ldi	r21, 0x41	; 65
    1388:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	bc 01       	movw	r22, r24
    1392:	cd 01       	movw	r24, r26
    1394:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	98 ab       	std	Y+48, r25	; 0x30
    139e:	8f a7       	std	Y+47, r24	; 0x2f
    13a0:	0f c0       	rjmp	.+30     	; 0x13c0 <LCD_sendCommand+0x4fe>
    13a2:	89 e1       	ldi	r24, 0x19	; 25
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	9e a7       	std	Y+46, r25	; 0x2e
    13a8:	8d a7       	std	Y+45, r24	; 0x2d
    13aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    13ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <LCD_sendCommand+0x4ec>
    13b2:	9e a7       	std	Y+46, r25	; 0x2e
    13b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b8:	98 a9       	ldd	r25, Y+48	; 0x30
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	98 ab       	std	Y+48, r25	; 0x30
    13be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13c2:	98 a9       	ldd	r25, Y+48	; 0x30
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	69 f7       	brne	.-38     	; 0x13a2 <LCD_sendCommand+0x4e0>
    13c8:	14 c0       	rjmp	.+40     	; 0x13f2 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ca:	69 a9       	ldd	r22, Y+49	; 0x31
    13cc:	7a a9       	ldd	r23, Y+50	; 0x32
    13ce:	8b a9       	ldd	r24, Y+51	; 0x33
    13d0:	9c a9       	ldd	r25, Y+52	; 0x34
    13d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	98 ab       	std	Y+48, r25	; 0x30
    13dc:	8f a7       	std	Y+47, r24	; 0x2f
    13de:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e0:	98 a9       	ldd	r25, Y+48	; 0x30
    13e2:	9c a7       	std	Y+44, r25	; 0x2c
    13e4:	8b a7       	std	Y+43, r24	; 0x2b
    13e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <LCD_sendCommand+0x528>
    13ee:	9c a7       	std	Y+44, r25	; 0x2c
    13f0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    13f2:	a2 e3       	ldi	r26, 0x32	; 50
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e2 e3       	ldi	r30, 0x32	; 50
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	80 64       	ori	r24, 0x40	; 64
    13fe:	8c 93       	st	X, r24
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a0 e8       	ldi	r26, 0x80	; 128
    1406:	bf e3       	ldi	r27, 0x3F	; 63
    1408:	8f a3       	std	Y+39, r24	; 0x27
    140a:	98 a7       	std	Y+40, r25	; 0x28
    140c:	a9 a7       	std	Y+41, r26	; 0x29
    140e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1410:	6f a1       	ldd	r22, Y+39	; 0x27
    1412:	78 a5       	ldd	r23, Y+40	; 0x28
    1414:	89 a5       	ldd	r24, Y+41	; 0x29
    1416:	9a a5       	ldd	r25, Y+42	; 0x2a
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	4a e7       	ldi	r20, 0x7A	; 122
    141e:	53 e4       	ldi	r21, 0x43	; 67
    1420:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	8b a3       	std	Y+35, r24	; 0x23
    142a:	9c a3       	std	Y+36, r25	; 0x24
    142c:	ad a3       	std	Y+37, r26	; 0x25
    142e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1430:	6b a1       	ldd	r22, Y+35	; 0x23
    1432:	7c a1       	ldd	r23, Y+36	; 0x24
    1434:	8d a1       	ldd	r24, Y+37	; 0x25
    1436:	9e a1       	ldd	r25, Y+38	; 0x26
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e8       	ldi	r20, 0x80	; 128
    143e:	5f e3       	ldi	r21, 0x3F	; 63
    1440:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1444:	88 23       	and	r24, r24
    1446:	2c f4       	brge	.+10     	; 0x1452 <LCD_sendCommand+0x590>
		__ticks = 1;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	9a a3       	std	Y+34, r25	; 0x22
    144e:	89 a3       	std	Y+33, r24	; 0x21
    1450:	3f c0       	rjmp	.+126    	; 0x14d0 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1452:	6b a1       	ldd	r22, Y+35	; 0x23
    1454:	7c a1       	ldd	r23, Y+36	; 0x24
    1456:	8d a1       	ldd	r24, Y+37	; 0x25
    1458:	9e a1       	ldd	r25, Y+38	; 0x26
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	3f ef       	ldi	r19, 0xFF	; 255
    145e:	4f e7       	ldi	r20, 0x7F	; 127
    1460:	57 e4       	ldi	r21, 0x47	; 71
    1462:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1466:	18 16       	cp	r1, r24
    1468:	4c f5       	brge	.+82     	; 0x14bc <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146a:	6f a1       	ldd	r22, Y+39	; 0x27
    146c:	78 a5       	ldd	r23, Y+40	; 0x28
    146e:	89 a5       	ldd	r24, Y+41	; 0x29
    1470:	9a a5       	ldd	r25, Y+42	; 0x2a
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e2       	ldi	r20, 0x20	; 32
    1478:	51 e4       	ldi	r21, 0x41	; 65
    147a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	bc 01       	movw	r22, r24
    1484:	cd 01       	movw	r24, r26
    1486:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9a a3       	std	Y+34, r25	; 0x22
    1490:	89 a3       	std	Y+33, r24	; 0x21
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <LCD_sendCommand+0x5f0>
    1494:	89 e1       	ldi	r24, 0x19	; 25
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	98 a3       	std	Y+32, r25	; 0x20
    149a:	8f 8f       	std	Y+31, r24	; 0x1f
    149c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    149e:	98 a1       	ldd	r25, Y+32	; 0x20
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <LCD_sendCommand+0x5de>
    14a4:	98 a3       	std	Y+32, r25	; 0x20
    14a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a8:	89 a1       	ldd	r24, Y+33	; 0x21
    14aa:	9a a1       	ldd	r25, Y+34	; 0x22
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	9a a3       	std	Y+34, r25	; 0x22
    14b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b2:	89 a1       	ldd	r24, Y+33	; 0x21
    14b4:	9a a1       	ldd	r25, Y+34	; 0x22
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	69 f7       	brne	.-38     	; 0x1494 <LCD_sendCommand+0x5d2>
    14ba:	14 c0       	rjmp	.+40     	; 0x14e4 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14bc:	6b a1       	ldd	r22, Y+35	; 0x23
    14be:	7c a1       	ldd	r23, Y+36	; 0x24
    14c0:	8d a1       	ldd	r24, Y+37	; 0x25
    14c2:	9e a1       	ldd	r25, Y+38	; 0x26
    14c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	9a a3       	std	Y+34, r25	; 0x22
    14ce:	89 a3       	std	Y+33, r24	; 0x21
    14d0:	89 a1       	ldd	r24, Y+33	; 0x21
    14d2:	9a a1       	ldd	r25, Y+34	; 0x22
    14d4:	9e 8f       	std	Y+30, r25	; 0x1e
    14d6:	8d 8f       	std	Y+29, r24	; 0x1d
    14d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	f1 f7       	brne	.-4      	; 0x14dc <LCD_sendCommand+0x61a>
    14e0:	9e 8f       	std	Y+30, r25	; 0x1e
    14e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    14e4:	a5 e3       	ldi	r26, 0x35	; 53
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e3       	ldi	r30, 0x35	; 53
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	28 2f       	mov	r18, r24
    14f0:	2f 70       	andi	r18, 0x0F	; 15
    14f2:	fe 01       	movw	r30, r28
    14f4:	ed 59       	subi	r30, 0x9D	; 157
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	80 81       	ld	r24, Z
    14fa:	88 2f       	mov	r24, r24
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	82 95       	swap	r24
    1500:	92 95       	swap	r25
    1502:	90 7f       	andi	r25, 0xF0	; 240
    1504:	98 27       	eor	r25, r24
    1506:	80 7f       	andi	r24, 0xF0	; 240
    1508:	98 27       	eor	r25, r24
    150a:	82 2b       	or	r24, r18
    150c:	8c 93       	st	X, r24
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a0 e8       	ldi	r26, 0x80	; 128
    1514:	bf e3       	ldi	r27, 0x3F	; 63
    1516:	89 8f       	std	Y+25, r24	; 0x19
    1518:	9a 8f       	std	Y+26, r25	; 0x1a
    151a:	ab 8f       	std	Y+27, r26	; 0x1b
    151c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151e:	69 8d       	ldd	r22, Y+25	; 0x19
    1520:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	4a e7       	ldi	r20, 0x7A	; 122
    152c:	53 e4       	ldi	r21, 0x43	; 67
    152e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	8d 8b       	std	Y+21, r24	; 0x15
    1538:	9e 8b       	std	Y+22, r25	; 0x16
    153a:	af 8b       	std	Y+23, r26	; 0x17
    153c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    153e:	6d 89       	ldd	r22, Y+21	; 0x15
    1540:	7e 89       	ldd	r23, Y+22	; 0x16
    1542:	8f 89       	ldd	r24, Y+23	; 0x17
    1544:	98 8d       	ldd	r25, Y+24	; 0x18
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e8       	ldi	r20, 0x80	; 128
    154c:	5f e3       	ldi	r21, 0x3F	; 63
    154e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1552:	88 23       	and	r24, r24
    1554:	2c f4       	brge	.+10     	; 0x1560 <LCD_sendCommand+0x69e>
		__ticks = 1;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9c 8b       	std	Y+20, r25	; 0x14
    155c:	8b 8b       	std	Y+19, r24	; 0x13
    155e:	3f c0       	rjmp	.+126    	; 0x15de <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1560:	6d 89       	ldd	r22, Y+21	; 0x15
    1562:	7e 89       	ldd	r23, Y+22	; 0x16
    1564:	8f 89       	ldd	r24, Y+23	; 0x17
    1566:	98 8d       	ldd	r25, Y+24	; 0x18
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	3f ef       	ldi	r19, 0xFF	; 255
    156c:	4f e7       	ldi	r20, 0x7F	; 127
    156e:	57 e4       	ldi	r21, 0x47	; 71
    1570:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1574:	18 16       	cp	r1, r24
    1576:	4c f5       	brge	.+82     	; 0x15ca <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1578:	69 8d       	ldd	r22, Y+25	; 0x19
    157a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    157c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    157e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e2       	ldi	r20, 0x20	; 32
    1586:	51 e4       	ldi	r21, 0x41	; 65
    1588:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9c 8b       	std	Y+20, r25	; 0x14
    159e:	8b 8b       	std	Y+19, r24	; 0x13
    15a0:	0f c0       	rjmp	.+30     	; 0x15c0 <LCD_sendCommand+0x6fe>
    15a2:	89 e1       	ldi	r24, 0x19	; 25
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9a 8b       	std	Y+18, r25	; 0x12
    15a8:	89 8b       	std	Y+17, r24	; 0x11
    15aa:	89 89       	ldd	r24, Y+17	; 0x11
    15ac:	9a 89       	ldd	r25, Y+18	; 0x12
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <LCD_sendCommand+0x6ec>
    15b2:	9a 8b       	std	Y+18, r25	; 0x12
    15b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b6:	8b 89       	ldd	r24, Y+19	; 0x13
    15b8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	9c 8b       	std	Y+20, r25	; 0x14
    15be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c0:	8b 89       	ldd	r24, Y+19	; 0x13
    15c2:	9c 89       	ldd	r25, Y+20	; 0x14
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	69 f7       	brne	.-38     	; 0x15a2 <LCD_sendCommand+0x6e0>
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ca:	6d 89       	ldd	r22, Y+21	; 0x15
    15cc:	7e 89       	ldd	r23, Y+22	; 0x16
    15ce:	8f 89       	ldd	r24, Y+23	; 0x17
    15d0:	98 8d       	ldd	r25, Y+24	; 0x18
    15d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	9c 8b       	std	Y+20, r25	; 0x14
    15dc:	8b 8b       	std	Y+19, r24	; 0x13
    15de:	8b 89       	ldd	r24, Y+19	; 0x13
    15e0:	9c 89       	ldd	r25, Y+20	; 0x14
    15e2:	98 8b       	std	Y+16, r25	; 0x10
    15e4:	8f 87       	std	Y+15, r24	; 0x0f
    15e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e8:	98 89       	ldd	r25, Y+16	; 0x10
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <LCD_sendCommand+0x728>
    15ee:	98 8b       	std	Y+16, r25	; 0x10
    15f0:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    15f2:	a2 e3       	ldi	r26, 0x32	; 50
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e2 e3       	ldi	r30, 0x32	; 50
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	8f 7b       	andi	r24, 0xBF	; 191
    15fe:	8c 93       	st	X, r24
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a0 e8       	ldi	r26, 0x80	; 128
    1606:	bf e3       	ldi	r27, 0x3F	; 63
    1608:	8b 87       	std	Y+11, r24	; 0x0b
    160a:	9c 87       	std	Y+12, r25	; 0x0c
    160c:	ad 87       	std	Y+13, r26	; 0x0d
    160e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1610:	6b 85       	ldd	r22, Y+11	; 0x0b
    1612:	7c 85       	ldd	r23, Y+12	; 0x0c
    1614:	8d 85       	ldd	r24, Y+13	; 0x0d
    1616:	9e 85       	ldd	r25, Y+14	; 0x0e
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a e7       	ldi	r20, 0x7A	; 122
    161e:	53 e4       	ldi	r21, 0x43	; 67
    1620:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	8f 83       	std	Y+7, r24	; 0x07
    162a:	98 87       	std	Y+8, r25	; 0x08
    162c:	a9 87       	std	Y+9, r26	; 0x09
    162e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1630:	6f 81       	ldd	r22, Y+7	; 0x07
    1632:	78 85       	ldd	r23, Y+8	; 0x08
    1634:	89 85       	ldd	r24, Y+9	; 0x09
    1636:	9a 85       	ldd	r25, Y+10	; 0x0a
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1644:	88 23       	and	r24, r24
    1646:	2c f4       	brge	.+10     	; 0x1652 <LCD_sendCommand+0x790>
		__ticks = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	8d 83       	std	Y+5, r24	; 0x05
    1650:	3f c0       	rjmp	.+126    	; 0x16d0 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1652:	6f 81       	ldd	r22, Y+7	; 0x07
    1654:	78 85       	ldd	r23, Y+8	; 0x08
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	3f ef       	ldi	r19, 0xFF	; 255
    165e:	4f e7       	ldi	r20, 0x7F	; 127
    1660:	57 e4       	ldi	r21, 0x47	; 71
    1662:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1666:	18 16       	cp	r1, r24
    1668:	4c f5       	brge	.+82     	; 0x16bc <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166a:	6b 85       	ldd	r22, Y+11	; 0x0b
    166c:	7c 85       	ldd	r23, Y+12	; 0x0c
    166e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1670:	9e 85       	ldd	r25, Y+14	; 0x0e
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e2       	ldi	r20, 0x20	; 32
    1678:	51 e4       	ldi	r21, 0x41	; 65
    167a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <LCD_sendCommand+0x7f0>
    1694:	89 e1       	ldi	r24, 0x19	; 25
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	9c 83       	std	Y+4, r25	; 0x04
    169a:	8b 83       	std	Y+3, r24	; 0x03
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <LCD_sendCommand+0x7de>
    16a4:	9c 83       	std	Y+4, r25	; 0x04
    16a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b2:	8d 81       	ldd	r24, Y+5	; 0x05
    16b4:	9e 81       	ldd	r25, Y+6	; 0x06
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	69 f7       	brne	.-38     	; 0x1694 <LCD_sendCommand+0x7d2>
    16ba:	14 c0       	rjmp	.+40     	; 0x16e4 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16bc:	6f 81       	ldd	r22, Y+7	; 0x07
    16be:	78 85       	ldd	r23, Y+8	; 0x08
    16c0:	89 85       	ldd	r24, Y+9	; 0x09
    16c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <LCD_sendCommand+0x81a>
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    16e4:	cd 59       	subi	r28, 0x9D	; 157
    16e6:	df 4f       	sbci	r29, 0xFF	; 255
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	08 95       	ret

000016fc <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	c3 56       	subi	r28, 0x63	; 99
    170a:	d0 40       	sbci	r29, 0x00	; 0
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	fe 01       	movw	r30, r28
    1718:	ed 59       	subi	r30, 0x9D	; 157
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    171e:	a2 e3       	ldi	r26, 0x32	; 50
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e2 e3       	ldi	r30, 0x32	; 50
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 61       	ori	r24, 0x10	; 16
    172a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    172c:	a2 e3       	ldi	r26, 0x32	; 50
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e2 e3       	ldi	r30, 0x32	; 50
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	8f 7d       	andi	r24, 0xDF	; 223
    1738:	8c 93       	st	X, r24
    173a:	fe 01       	movw	r30, r28
    173c:	e1 5a       	subi	r30, 0xA1	; 161
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e8       	ldi	r26, 0x80	; 128
    1746:	bf e3       	ldi	r27, 0x3F	; 63
    1748:	80 83       	st	Z, r24
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	a2 83       	std	Z+2, r26	; 0x02
    174e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1750:	8e 01       	movw	r16, r28
    1752:	05 5a       	subi	r16, 0xA5	; 165
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	fe 01       	movw	r30, r28
    1758:	e1 5a       	subi	r30, 0xA1	; 161
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	60 81       	ld	r22, Z
    175e:	71 81       	ldd	r23, Z+1	; 0x01
    1760:	82 81       	ldd	r24, Z+2	; 0x02
    1762:	93 81       	ldd	r25, Z+3	; 0x03
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	4a e7       	ldi	r20, 0x7A	; 122
    176a:	53 e4       	ldi	r21, 0x43	; 67
    176c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	f8 01       	movw	r30, r16
    1776:	80 83       	st	Z, r24
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	a2 83       	std	Z+2, r26	; 0x02
    177c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    177e:	fe 01       	movw	r30, r28
    1780:	e5 5a       	subi	r30, 0xA5	; 165
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e8       	ldi	r20, 0x80	; 128
    1792:	5f e3       	ldi	r21, 0x3F	; 63
    1794:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1798:	88 23       	and	r24, r24
    179a:	44 f4       	brge	.+16     	; 0x17ac <LCD_displayCharacter+0xb0>
		__ticks = 1;
    179c:	fe 01       	movw	r30, r28
    179e:	e7 5a       	subi	r30, 0xA7	; 167
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
    17aa:	64 c0       	rjmp	.+200    	; 0x1874 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    17ac:	fe 01       	movw	r30, r28
    17ae:	e5 5a       	subi	r30, 0xA5	; 165
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	4f e7       	ldi	r20, 0x7F	; 127
    17c0:	57 e4       	ldi	r21, 0x47	; 71
    17c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17c6:	18 16       	cp	r1, r24
    17c8:	0c f0       	brlt	.+2      	; 0x17cc <LCD_displayCharacter+0xd0>
    17ca:	43 c0       	rjmp	.+134    	; 0x1852 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	fe 01       	movw	r30, r28
    17ce:	e1 5a       	subi	r30, 0xA1	; 161
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e2       	ldi	r20, 0x20	; 32
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	8e 01       	movw	r16, r28
    17ec:	07 5a       	subi	r16, 0xA7	; 167
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	bc 01       	movw	r22, r24
    17f2:	cd 01       	movw	r24, r26
    17f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	f8 01       	movw	r30, r16
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	1f c0       	rjmp	.+62     	; 0x1842 <LCD_displayCharacter+0x146>
    1804:	fe 01       	movw	r30, r28
    1806:	e9 5a       	subi	r30, 0xA9	; 169
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	89 e1       	ldi	r24, 0x19	; 25
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24
    1812:	fe 01       	movw	r30, r28
    1814:	e9 5a       	subi	r30, 0xA9	; 169
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	80 81       	ld	r24, Z
    181a:	91 81       	ldd	r25, Z+1	; 0x01
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <LCD_displayCharacter+0x120>
    1820:	fe 01       	movw	r30, r28
    1822:	e9 5a       	subi	r30, 0xA9	; 169
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182a:	de 01       	movw	r26, r28
    182c:	a7 5a       	subi	r26, 0xA7	; 167
    182e:	bf 4f       	sbci	r27, 0xFF	; 255
    1830:	fe 01       	movw	r30, r28
    1832:	e7 5a       	subi	r30, 0xA7	; 167
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	11 96       	adiw	r26, 0x01	; 1
    183e:	9c 93       	st	X, r25
    1840:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1842:	fe 01       	movw	r30, r28
    1844:	e7 5a       	subi	r30, 0xA7	; 167
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	d1 f6       	brne	.-76     	; 0x1804 <LCD_displayCharacter+0x108>
    1850:	27 c0       	rjmp	.+78     	; 0x18a0 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1852:	8e 01       	movw	r16, r28
    1854:	07 5a       	subi	r16, 0xA7	; 167
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	fe 01       	movw	r30, r28
    185a:	e5 5a       	subi	r30, 0xA5	; 165
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	f8 01       	movw	r30, r16
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	80 83       	st	Z, r24
    1874:	de 01       	movw	r26, r28
    1876:	ab 5a       	subi	r26, 0xAB	; 171
    1878:	bf 4f       	sbci	r27, 0xFF	; 255
    187a:	fe 01       	movw	r30, r28
    187c:	e7 5a       	subi	r30, 0xA7	; 167
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 81       	ld	r24, Z
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	8d 93       	st	X+, r24
    1886:	9c 93       	st	X, r25
    1888:	fe 01       	movw	r30, r28
    188a:	eb 5a       	subi	r30, 0xAB	; 171
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <LCD_displayCharacter+0x196>
    1896:	fe 01       	movw	r30, r28
    1898:	eb 5a       	subi	r30, 0xAB	; 171
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	91 83       	std	Z+1, r25	; 0x01
    189e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    18a0:	a2 e3       	ldi	r26, 0x32	; 50
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e2 e3       	ldi	r30, 0x32	; 50
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	80 64       	ori	r24, 0x40	; 64
    18ac:	8c 93       	st	X, r24
    18ae:	fe 01       	movw	r30, r28
    18b0:	ef 5a       	subi	r30, 0xAF	; 175
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a0 e8       	ldi	r26, 0x80	; 128
    18ba:	bf e3       	ldi	r27, 0x3F	; 63
    18bc:	80 83       	st	Z, r24
    18be:	91 83       	std	Z+1, r25	; 0x01
    18c0:	a2 83       	std	Z+2, r26	; 0x02
    18c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c4:	8e 01       	movw	r16, r28
    18c6:	03 5b       	subi	r16, 0xB3	; 179
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	fe 01       	movw	r30, r28
    18cc:	ef 5a       	subi	r30, 0xAF	; 175
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	60 81       	ld	r22, Z
    18d2:	71 81       	ldd	r23, Z+1	; 0x01
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	4a e7       	ldi	r20, 0x7A	; 122
    18de:	53 e4       	ldi	r21, 0x43	; 67
    18e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	f8 01       	movw	r30, r16
    18ea:	80 83       	st	Z, r24
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	a2 83       	std	Z+2, r26	; 0x02
    18f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18f2:	fe 01       	movw	r30, r28
    18f4:	e3 5b       	subi	r30, 0xB3	; 179
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e8       	ldi	r20, 0x80	; 128
    1906:	5f e3       	ldi	r21, 0x3F	; 63
    1908:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    190c:	88 23       	and	r24, r24
    190e:	44 f4       	brge	.+16     	; 0x1920 <LCD_displayCharacter+0x224>
		__ticks = 1;
    1910:	fe 01       	movw	r30, r28
    1912:	e5 5b       	subi	r30, 0xB5	; 181
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	80 83       	st	Z, r24
    191e:	64 c0       	rjmp	.+200    	; 0x19e8 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1920:	fe 01       	movw	r30, r28
    1922:	e3 5b       	subi	r30, 0xB3	; 179
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	3f ef       	ldi	r19, 0xFF	; 255
    1932:	4f e7       	ldi	r20, 0x7F	; 127
    1934:	57 e4       	ldi	r21, 0x47	; 71
    1936:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    193a:	18 16       	cp	r1, r24
    193c:	0c f0       	brlt	.+2      	; 0x1940 <LCD_displayCharacter+0x244>
    193e:	43 c0       	rjmp	.+134    	; 0x19c6 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1940:	fe 01       	movw	r30, r28
    1942:	ef 5a       	subi	r30, 0xAF	; 175
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	60 81       	ld	r22, Z
    1948:	71 81       	ldd	r23, Z+1	; 0x01
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e2       	ldi	r20, 0x20	; 32
    1954:	51 e4       	ldi	r21, 0x41	; 65
    1956:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	8e 01       	movw	r16, r28
    1960:	05 5b       	subi	r16, 0xB5	; 181
    1962:	1f 4f       	sbci	r17, 0xFF	; 255
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	f8 01       	movw	r30, r16
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
    1976:	1f c0       	rjmp	.+62     	; 0x19b6 <LCD_displayCharacter+0x2ba>
    1978:	fe 01       	movw	r30, r28
    197a:	e7 5b       	subi	r30, 0xB7	; 183
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	89 e1       	ldi	r24, 0x19	; 25
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24
    1986:	fe 01       	movw	r30, r28
    1988:	e7 5b       	subi	r30, 0xB7	; 183
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	80 81       	ld	r24, Z
    198e:	91 81       	ldd	r25, Z+1	; 0x01
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_displayCharacter+0x294>
    1994:	fe 01       	movw	r30, r28
    1996:	e7 5b       	subi	r30, 0xB7	; 183
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199e:	de 01       	movw	r26, r28
    19a0:	a5 5b       	subi	r26, 0xB5	; 181
    19a2:	bf 4f       	sbci	r27, 0xFF	; 255
    19a4:	fe 01       	movw	r30, r28
    19a6:	e5 5b       	subi	r30, 0xB5	; 181
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 81       	ld	r24, Z
    19ac:	91 81       	ldd	r25, Z+1	; 0x01
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	11 96       	adiw	r26, 0x01	; 1
    19b2:	9c 93       	st	X, r25
    19b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	fe 01       	movw	r30, r28
    19b8:	e5 5b       	subi	r30, 0xB5	; 181
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 81       	ld	r24, Z
    19be:	91 81       	ldd	r25, Z+1	; 0x01
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	d1 f6       	brne	.-76     	; 0x1978 <LCD_displayCharacter+0x27c>
    19c4:	27 c0       	rjmp	.+78     	; 0x1a14 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c6:	8e 01       	movw	r16, r28
    19c8:	05 5b       	subi	r16, 0xB5	; 181
    19ca:	1f 4f       	sbci	r17, 0xFF	; 255
    19cc:	fe 01       	movw	r30, r28
    19ce:	e3 5b       	subi	r30, 0xB3	; 179
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	f8 01       	movw	r30, r16
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24
    19e8:	de 01       	movw	r26, r28
    19ea:	a9 5b       	subi	r26, 0xB9	; 185
    19ec:	bf 4f       	sbci	r27, 0xFF	; 255
    19ee:	fe 01       	movw	r30, r28
    19f0:	e5 5b       	subi	r30, 0xB5	; 181
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	8d 93       	st	X+, r24
    19fa:	9c 93       	st	X, r25
    19fc:	fe 01       	movw	r30, r28
    19fe:	e9 5b       	subi	r30, 0xB9	; 185
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	80 81       	ld	r24, Z
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <LCD_displayCharacter+0x30a>
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e9 5b       	subi	r30, 0xB9	; 185
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    1a14:	a5 e3       	ldi	r26, 0x35	; 53
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e5 e3       	ldi	r30, 0x35	; 53
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	98 2f       	mov	r25, r24
    1a20:	9f 70       	andi	r25, 0x0F	; 15
    1a22:	fe 01       	movw	r30, r28
    1a24:	ed 59       	subi	r30, 0x9D	; 157
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	80 81       	ld	r24, Z
    1a2a:	80 7f       	andi	r24, 0xF0	; 240
    1a2c:	89 2b       	or	r24, r25
    1a2e:	8c 93       	st	X, r24
    1a30:	fe 01       	movw	r30, r28
    1a32:	ed 5b       	subi	r30, 0xBD	; 189
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a0 e8       	ldi	r26, 0x80	; 128
    1a3c:	bf e3       	ldi	r27, 0x3F	; 63
    1a3e:	80 83       	st	Z, r24
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	a2 83       	std	Z+2, r26	; 0x02
    1a44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a46:	8e 01       	movw	r16, r28
    1a48:	01 5c       	subi	r16, 0xC1	; 193
    1a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	ed 5b       	subi	r30, 0xBD	; 189
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	60 81       	ld	r22, Z
    1a54:	71 81       	ldd	r23, Z+1	; 0x01
    1a56:	82 81       	ldd	r24, Z+2	; 0x02
    1a58:	93 81       	ldd	r25, Z+3	; 0x03
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	4a e7       	ldi	r20, 0x7A	; 122
    1a60:	53 e4       	ldi	r21, 0x43	; 67
    1a62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	80 83       	st	Z, r24
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	a2 83       	std	Z+2, r26	; 0x02
    1a72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a74:	fe 01       	movw	r30, r28
    1a76:	ff 96       	adiw	r30, 0x3f	; 63
    1a78:	60 81       	ld	r22, Z
    1a7a:	71 81       	ldd	r23, Z+1	; 0x01
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	5f e3       	ldi	r21, 0x3F	; 63
    1a88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a8c:	88 23       	and	r24, r24
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9e af       	std	Y+62, r25	; 0x3e
    1a96:	8d af       	std	Y+61, r24	; 0x3d
    1a98:	46 c0       	rjmp	.+140    	; 0x1b26 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	ff 96       	adiw	r30, 0x3f	; 63
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	93 81       	ldd	r25, Z+3	; 0x03
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	3f ef       	ldi	r19, 0xFF	; 255
    1aaa:	4f e7       	ldi	r20, 0x7F	; 127
    1aac:	57 e4       	ldi	r21, 0x47	; 71
    1aae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ab2:	18 16       	cp	r1, r24
    1ab4:	64 f5       	brge	.+88     	; 0x1b0e <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	ed 5b       	subi	r30, 0xBD	; 189
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	60 81       	ld	r22, Z
    1abe:	71 81       	ldd	r23, Z+1	; 0x01
    1ac0:	82 81       	ldd	r24, Z+2	; 0x02
    1ac2:	93 81       	ldd	r25, Z+3	; 0x03
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e2       	ldi	r20, 0x20	; 32
    1aca:	51 e4       	ldi	r21, 0x41	; 65
    1acc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9e af       	std	Y+62, r25	; 0x3e
    1ae2:	8d af       	std	Y+61, r24	; 0x3d
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <LCD_displayCharacter+0x408>
    1ae6:	89 e1       	ldi	r24, 0x19	; 25
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9c af       	std	Y+60, r25	; 0x3c
    1aec:	8b af       	std	Y+59, r24	; 0x3b
    1aee:	8b ad       	ldd	r24, Y+59	; 0x3b
    1af0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_displayCharacter+0x3f6>
    1af6:	9c af       	std	Y+60, r25	; 0x3c
    1af8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1afc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	9e af       	std	Y+62, r25	; 0x3e
    1b02:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b06:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	69 f7       	brne	.-38     	; 0x1ae6 <LCD_displayCharacter+0x3ea>
    1b0c:	16 c0       	rjmp	.+44     	; 0x1b3a <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0e:	fe 01       	movw	r30, r28
    1b10:	ff 96       	adiw	r30, 0x3f	; 63
    1b12:	60 81       	ld	r22, Z
    1b14:	71 81       	ldd	r23, Z+1	; 0x01
    1b16:	82 81       	ldd	r24, Z+2	; 0x02
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9e af       	std	Y+62, r25	; 0x3e
    1b24:	8d af       	std	Y+61, r24	; 0x3d
    1b26:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b28:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b2a:	9a af       	std	Y+58, r25	; 0x3a
    1b2c:	89 af       	std	Y+57, r24	; 0x39
    1b2e:	89 ad       	ldd	r24, Y+57	; 0x39
    1b30:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_displayCharacter+0x436>
    1b36:	9a af       	std	Y+58, r25	; 0x3a
    1b38:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1b3a:	a2 e3       	ldi	r26, 0x32	; 50
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e2 e3       	ldi	r30, 0x32	; 50
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	8f 7b       	andi	r24, 0xBF	; 191
    1b46:	8c 93       	st	X, r24
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a0 e8       	ldi	r26, 0x80	; 128
    1b4e:	bf e3       	ldi	r27, 0x3F	; 63
    1b50:	8d ab       	std	Y+53, r24	; 0x35
    1b52:	9e ab       	std	Y+54, r25	; 0x36
    1b54:	af ab       	std	Y+55, r26	; 0x37
    1b56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b58:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	4a e7       	ldi	r20, 0x7A	; 122
    1b66:	53 e4       	ldi	r21, 0x43	; 67
    1b68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	89 ab       	std	Y+49, r24	; 0x31
    1b72:	9a ab       	std	Y+50, r25	; 0x32
    1b74:	ab ab       	std	Y+51, r26	; 0x33
    1b76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b78:	69 a9       	ldd	r22, Y+49	; 0x31
    1b7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e8       	ldi	r20, 0x80	; 128
    1b86:	5f e3       	ldi	r21, 0x3F	; 63
    1b88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b8c:	88 23       	and	r24, r24
    1b8e:	2c f4       	brge	.+10     	; 0x1b9a <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	98 ab       	std	Y+48, r25	; 0x30
    1b96:	8f a7       	std	Y+47, r24	; 0x2f
    1b98:	3f c0       	rjmp	.+126    	; 0x1c18 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1b9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	3f ef       	ldi	r19, 0xFF	; 255
    1ba6:	4f e7       	ldi	r20, 0x7F	; 127
    1ba8:	57 e4       	ldi	r21, 0x47	; 71
    1baa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bae:	18 16       	cp	r1, r24
    1bb0:	4c f5       	brge	.+82     	; 0x1c04 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb2:	6d a9       	ldd	r22, Y+53	; 0x35
    1bb4:	7e a9       	ldd	r23, Y+54	; 0x36
    1bb6:	8f a9       	ldd	r24, Y+55	; 0x37
    1bb8:	98 ad       	ldd	r25, Y+56	; 0x38
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e2       	ldi	r20, 0x20	; 32
    1bc0:	51 e4       	ldi	r21, 0x41	; 65
    1bc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	bc 01       	movw	r22, r24
    1bcc:	cd 01       	movw	r24, r26
    1bce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	98 ab       	std	Y+48, r25	; 0x30
    1bd8:	8f a7       	std	Y+47, r24	; 0x2f
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <LCD_displayCharacter+0x4fe>
    1bdc:	89 e1       	ldi	r24, 0x19	; 25
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9e a7       	std	Y+46, r25	; 0x2e
    1be2:	8d a7       	std	Y+45, r24	; 0x2d
    1be4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1be6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_displayCharacter+0x4ec>
    1bec:	9e a7       	std	Y+46, r25	; 0x2e
    1bee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	98 ab       	std	Y+48, r25	; 0x30
    1bf8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bfc:	98 a9       	ldd	r25, Y+48	; 0x30
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	69 f7       	brne	.-38     	; 0x1bdc <LCD_displayCharacter+0x4e0>
    1c02:	14 c0       	rjmp	.+40     	; 0x1c2c <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c04:	69 a9       	ldd	r22, Y+49	; 0x31
    1c06:	7a a9       	ldd	r23, Y+50	; 0x32
    1c08:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	98 ab       	std	Y+48, r25	; 0x30
    1c16:	8f a7       	std	Y+47, r24	; 0x2f
    1c18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1c:	9c a7       	std	Y+44, r25	; 0x2c
    1c1e:	8b a7       	std	Y+43, r24	; 0x2b
    1c20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c22:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <LCD_displayCharacter+0x528>
    1c28:	9c a7       	std	Y+44, r25	; 0x2c
    1c2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1c2c:	a2 e3       	ldi	r26, 0x32	; 50
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e2 e3       	ldi	r30, 0x32	; 50
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	80 64       	ori	r24, 0x40	; 64
    1c38:	8c 93       	st	X, r24
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e8       	ldi	r26, 0x80	; 128
    1c40:	bf e3       	ldi	r27, 0x3F	; 63
    1c42:	8f a3       	std	Y+39, r24	; 0x27
    1c44:	98 a7       	std	Y+40, r25	; 0x28
    1c46:	a9 a7       	std	Y+41, r26	; 0x29
    1c48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a e7       	ldi	r20, 0x7A	; 122
    1c58:	53 e4       	ldi	r21, 0x43	; 67
    1c5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8b a3       	std	Y+35, r24	; 0x23
    1c64:	9c a3       	std	Y+36, r25	; 0x24
    1c66:	ad a3       	std	Y+37, r26	; 0x25
    1c68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c70:	9e a1       	ldd	r25, Y+38	; 0x26
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <LCD_displayCharacter+0x590>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9a a3       	std	Y+34, r25	; 0x22
    1c88:	89 a3       	std	Y+33, r24	; 0x21
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1c8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c90:	8d a1       	ldd	r24, Y+37	; 0x25
    1c92:	9e a1       	ldd	r25, Y+38	; 0x26
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca8:	89 a5       	ldd	r24, Y+41	; 0x29
    1caa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9a a3       	std	Y+34, r25	; 0x22
    1cca:	89 a3       	std	Y+33, r24	; 0x21
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <LCD_displayCharacter+0x5f0>
    1cce:	89 e1       	ldi	r24, 0x19	; 25
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	98 a3       	std	Y+32, r25	; 0x20
    1cd4:	8f 8f       	std	Y+31, r24	; 0x1f
    1cd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cd8:	98 a1       	ldd	r25, Y+32	; 0x20
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_displayCharacter+0x5de>
    1cde:	98 a3       	std	Y+32, r25	; 0x20
    1ce0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9a a3       	std	Y+34, r25	; 0x22
    1cea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	89 a1       	ldd	r24, Y+33	; 0x21
    1cee:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <LCD_displayCharacter+0x5d2>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9a a3       	std	Y+34, r25	; 0x22
    1d08:	89 a3       	std	Y+33, r24	; 0x21
    1d0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d10:	8d 8f       	std	Y+29, r24	; 0x1d
    1d12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_displayCharacter+0x61a>
    1d1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d1c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    1d1e:	a5 e3       	ldi	r26, 0x35	; 53
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e5 e3       	ldi	r30, 0x35	; 53
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	28 2f       	mov	r18, r24
    1d2a:	2f 70       	andi	r18, 0x0F	; 15
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ed 59       	subi	r30, 0x9D	; 157
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	82 95       	swap	r24
    1d3a:	92 95       	swap	r25
    1d3c:	90 7f       	andi	r25, 0xF0	; 240
    1d3e:	98 27       	eor	r25, r24
    1d40:	80 7f       	andi	r24, 0xF0	; 240
    1d42:	98 27       	eor	r25, r24
    1d44:	82 2b       	or	r24, r18
    1d46:	8c 93       	st	X, r24
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a0 e8       	ldi	r26, 0x80	; 128
    1d4e:	bf e3       	ldi	r27, 0x3F	; 63
    1d50:	89 8f       	std	Y+25, r24	; 0x19
    1d52:	9a 8f       	std	Y+26, r25	; 0x1a
    1d54:	ab 8f       	std	Y+27, r26	; 0x1b
    1d56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d58:	69 8d       	ldd	r22, Y+25	; 0x19
    1d5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	4a e7       	ldi	r20, 0x7A	; 122
    1d66:	53 e4       	ldi	r21, 0x43	; 67
    1d68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	8d 8b       	std	Y+21, r24	; 0x15
    1d72:	9e 8b       	std	Y+22, r25	; 0x16
    1d74:	af 8b       	std	Y+23, r26	; 0x17
    1d76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d78:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e8       	ldi	r20, 0x80	; 128
    1d86:	5f e3       	ldi	r21, 0x3F	; 63
    1d88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d8c:	88 23       	and	r24, r24
    1d8e:	2c f4       	brge	.+10     	; 0x1d9a <LCD_displayCharacter+0x69e>
		__ticks = 1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9c 8b       	std	Y+20, r25	; 0x14
    1d96:	8b 8b       	std	Y+19, r24	; 0x13
    1d98:	3f c0       	rjmp	.+126    	; 0x1e18 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    1d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1da0:	98 8d       	ldd	r25, Y+24	; 0x18
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	4f e7       	ldi	r20, 0x7F	; 127
    1da8:	57 e4       	ldi	r21, 0x47	; 71
    1daa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dae:	18 16       	cp	r1, r24
    1db0:	4c f5       	brge	.+82     	; 0x1e04 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db2:	69 8d       	ldd	r22, Y+25	; 0x19
    1db4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e2       	ldi	r20, 0x20	; 32
    1dc0:	51 e4       	ldi	r21, 0x41	; 65
    1dc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	9c 8b       	std	Y+20, r25	; 0x14
    1dd8:	8b 8b       	std	Y+19, r24	; 0x13
    1dda:	0f c0       	rjmp	.+30     	; 0x1dfa <LCD_displayCharacter+0x6fe>
    1ddc:	89 e1       	ldi	r24, 0x19	; 25
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	9a 8b       	std	Y+18, r25	; 0x12
    1de2:	89 8b       	std	Y+17, r24	; 0x11
    1de4:	89 89       	ldd	r24, Y+17	; 0x11
    1de6:	9a 89       	ldd	r25, Y+18	; 0x12
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <LCD_displayCharacter+0x6ec>
    1dec:	9a 8b       	std	Y+18, r25	; 0x12
    1dee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df0:	8b 89       	ldd	r24, Y+19	; 0x13
    1df2:	9c 89       	ldd	r25, Y+20	; 0x14
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	9c 8b       	std	Y+20, r25	; 0x14
    1df8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	69 f7       	brne	.-38     	; 0x1ddc <LCD_displayCharacter+0x6e0>
    1e02:	14 c0       	rjmp	.+40     	; 0x1e2c <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e04:	6d 89       	ldd	r22, Y+21	; 0x15
    1e06:	7e 89       	ldd	r23, Y+22	; 0x16
    1e08:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9c 8b       	std	Y+20, r25	; 0x14
    1e16:	8b 8b       	std	Y+19, r24	; 0x13
    1e18:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1c:	98 8b       	std	Y+16, r25	; 0x10
    1e1e:	8f 87       	std	Y+15, r24	; 0x0f
    1e20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e22:	98 89       	ldd	r25, Y+16	; 0x10
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_displayCharacter+0x728>
    1e28:	98 8b       	std	Y+16, r25	; 0x10
    1e2a:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1e2c:	a2 e3       	ldi	r26, 0x32	; 50
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e2 e3       	ldi	r30, 0x32	; 50
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	8f 7b       	andi	r24, 0xBF	; 191
    1e38:	8c 93       	st	X, r24
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	a0 e8       	ldi	r26, 0x80	; 128
    1e40:	bf e3       	ldi	r27, 0x3F	; 63
    1e42:	8b 87       	std	Y+11, r24	; 0x0b
    1e44:	9c 87       	std	Y+12, r25	; 0x0c
    1e46:	ad 87       	std	Y+13, r26	; 0x0d
    1e48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	4a e7       	ldi	r20, 0x7A	; 122
    1e58:	53 e4       	ldi	r21, 0x43	; 67
    1e5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	8f 83       	std	Y+7, r24	; 0x07
    1e64:	98 87       	std	Y+8, r25	; 0x08
    1e66:	a9 87       	std	Y+9, r26	; 0x09
    1e68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6c:	78 85       	ldd	r23, Y+8	; 0x08
    1e6e:	89 85       	ldd	r24, Y+9	; 0x09
    1e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e8       	ldi	r20, 0x80	; 128
    1e78:	5f e3       	ldi	r21, 0x3F	; 63
    1e7a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e7e:	88 23       	and	r24, r24
    1e80:	2c f4       	brge	.+10     	; 0x1e8c <LCD_displayCharacter+0x790>
		__ticks = 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
    1e8a:	3f c0       	rjmp	.+126    	; 0x1f0a <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    1e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8e:	78 85       	ldd	r23, Y+8	; 0x08
    1e90:	89 85       	ldd	r24, Y+9	; 0x09
    1e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	3f ef       	ldi	r19, 0xFF	; 255
    1e98:	4f e7       	ldi	r20, 0x7F	; 127
    1e9a:	57 e4       	ldi	r21, 0x47	; 71
    1e9c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ea0:	18 16       	cp	r1, r24
    1ea2:	4c f5       	brge	.+82     	; 0x1ef6 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e2       	ldi	r20, 0x20	; 32
    1eb2:	51 e4       	ldi	r21, 0x41	; 65
    1eb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	0f c0       	rjmp	.+30     	; 0x1eec <LCD_displayCharacter+0x7f0>
    1ece:	89 e1       	ldi	r24, 0x19	; 25
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9c 83       	std	Y+4, r25	; 0x04
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <LCD_displayCharacter+0x7de>
    1ede:	9c 83       	std	Y+4, r25	; 0x04
    1ee0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	9e 83       	std	Y+6, r25	; 0x06
    1eea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eec:	8d 81       	ldd	r24, Y+5	; 0x05
    1eee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	69 f7       	brne	.-38     	; 0x1ece <LCD_displayCharacter+0x7d2>
    1ef4:	14 c0       	rjmp	.+40     	; 0x1f1e <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef8:	78 85       	ldd	r23, Y+8	; 0x08
    1efa:	89 85       	ldd	r24, Y+9	; 0x09
    1efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9e 83       	std	Y+6, r25	; 0x06
    1f08:	8d 83       	std	Y+5, r24	; 0x05
    1f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0e:	9a 83       	std	Y+2, r25	; 0x02
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	9a 81       	ldd	r25, Y+2	; 0x02
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <LCD_displayCharacter+0x81a>
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f1e:	cd 59       	subi	r28, 0x9D	; 157
    1f20:	df 4f       	sbci	r29, 0xFF	; 255
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	1f 91       	pop	r17
    1f32:	0f 91       	pop	r16
    1f34:	08 95       	ret

00001f36 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <LCD_displayString+0x6>
    1f3c:	0f 92       	push	r0
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	9b 83       	std	Y+3, r25	; 0x03
    1f44:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f46:	19 82       	std	Y+1, r1	; 0x01
    1f48:	0e c0       	rjmp	.+28     	; 0x1f66 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	9b 81       	ldd	r25, Y+3	; 0x03
    1f54:	fc 01       	movw	r30, r24
    1f56:	e2 0f       	add	r30, r18
    1f58:	f3 1f       	adc	r31, r19
    1f5a:	80 81       	ld	r24, Z
    1f5c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_displayCharacter>
		i++;
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f70:	fc 01       	movw	r30, r24
    1f72:	e2 0f       	add	r30, r18
    1f74:	f3 1f       	adc	r31, r19
    1f76:	80 81       	ld	r24, Z
    1f78:	88 23       	and	r24, r24
    1f7a:	39 f7       	brne	.-50     	; 0x1f4a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <LCD_goToRowColumn+0x6>
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <LCD_goToRowColumn+0x8>
    1f90:	0f 92       	push	r0
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	8a 83       	std	Y+2, r24	; 0x02
    1f98:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	3d 83       	std	Y+5, r19	; 0x05
    1fa2:	2c 83       	std	Y+4, r18	; 0x04
    1fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa8:	81 30       	cpi	r24, 0x01	; 1
    1faa:	91 05       	cpc	r25, r1
    1fac:	c1 f0       	breq	.+48     	; 0x1fde <LCD_goToRowColumn+0x56>
    1fae:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fb2:	22 30       	cpi	r18, 0x02	; 2
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <LCD_goToRowColumn+0x3a>
    1fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fba:	9d 81       	ldd	r25, Y+5	; 0x05
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	61 f0       	breq	.+24     	; 0x1fd8 <LCD_goToRowColumn+0x50>
    1fc0:	19 c0       	rjmp	.+50     	; 0x1ff4 <LCD_goToRowColumn+0x6c>
    1fc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc6:	22 30       	cpi	r18, 0x02	; 2
    1fc8:	31 05       	cpc	r19, r1
    1fca:	69 f0       	breq	.+26     	; 0x1fe6 <LCD_goToRowColumn+0x5e>
    1fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fce:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd0:	83 30       	cpi	r24, 0x03	; 3
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	61 f0       	breq	.+24     	; 0x1fee <LCD_goToRowColumn+0x66>
    1fd6:	0e c0       	rjmp	.+28     	; 0x1ff4 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	0b c0       	rjmp	.+22     	; 0x1ff4 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	80 5c       	subi	r24, 0xC0	; 192
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	07 c0       	rjmp	.+14     	; 0x1ff4 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	80 5f       	subi	r24, 0xF0	; 240
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	03 c0       	rjmp	.+6      	; 0x1ff4 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	80 5b       	subi	r24, 0xB0	; 176
    1ff2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	80 68       	ori	r24, 0x80	; 128
    1ff8:	0e 94 61 07 	call	0xec2	; 0xec2 <LCD_sendCommand>
}
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	00 d0       	rcall	.+0      	; 0x2012 <LCD_displayStringRowColumn+0x6>
    2012:	00 d0       	rcall	.+0      	; 0x2014 <LCD_displayStringRowColumn+0x8>
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	6a 83       	std	Y+2, r22	; 0x02
    201c:	5c 83       	std	Y+4, r21	; 0x04
    201e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	6a 81       	ldd	r22, Y+2	; 0x02
    2024:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <LCD_displayString>
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	62 97       	sbiw	r28, 0x12	; 18
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	9a 8b       	std	Y+18, r25	; 0x12
    2054:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2056:	89 89       	ldd	r24, Y+17	; 0x11
    2058:	9a 89       	ldd	r25, Y+18	; 0x12
    205a:	9e 01       	movw	r18, r28
    205c:	2f 5f       	subi	r18, 0xFF	; 255
    205e:	3f 4f       	sbci	r19, 0xFF	; 255
    2060:	b9 01       	movw	r22, r18
    2062:	4a e0       	ldi	r20, 0x0A	; 10
    2064:	50 e0       	ldi	r21, 0x00	; 0
    2066:	0e 94 83 10 	call	0x2106	; 0x2106 <itoa>
   LCD_displayString(buff);
    206a:	ce 01       	movw	r24, r28
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <LCD_displayString>
}
    2072:	62 96       	adiw	r28, 0x12	; 18
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	0e 94 61 07 	call	0xec2	; 0xec2 <LCD_sendCommand>
}
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <__prologue_saves__>:
    2098:	2f 92       	push	r2
    209a:	3f 92       	push	r3
    209c:	4f 92       	push	r4
    209e:	5f 92       	push	r5
    20a0:	6f 92       	push	r6
    20a2:	7f 92       	push	r7
    20a4:	8f 92       	push	r8
    20a6:	9f 92       	push	r9
    20a8:	af 92       	push	r10
    20aa:	bf 92       	push	r11
    20ac:	cf 92       	push	r12
    20ae:	df 92       	push	r13
    20b0:	ef 92       	push	r14
    20b2:	ff 92       	push	r15
    20b4:	0f 93       	push	r16
    20b6:	1f 93       	push	r17
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	ca 1b       	sub	r28, r26
    20c2:	db 0b       	sbc	r29, r27
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	09 94       	ijmp

000020d0 <__epilogue_restores__>:
    20d0:	2a 88       	ldd	r2, Y+18	; 0x12
    20d2:	39 88       	ldd	r3, Y+17	; 0x11
    20d4:	48 88       	ldd	r4, Y+16	; 0x10
    20d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    20d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    20da:	7d 84       	ldd	r7, Y+13	; 0x0d
    20dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    20de:	9b 84       	ldd	r9, Y+11	; 0x0b
    20e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    20e2:	b9 84       	ldd	r11, Y+9	; 0x09
    20e4:	c8 84       	ldd	r12, Y+8	; 0x08
    20e6:	df 80       	ldd	r13, Y+7	; 0x07
    20e8:	ee 80       	ldd	r14, Y+6	; 0x06
    20ea:	fd 80       	ldd	r15, Y+5	; 0x05
    20ec:	0c 81       	ldd	r16, Y+4	; 0x04
    20ee:	1b 81       	ldd	r17, Y+3	; 0x03
    20f0:	aa 81       	ldd	r26, Y+2	; 0x02
    20f2:	b9 81       	ldd	r27, Y+1	; 0x01
    20f4:	ce 0f       	add	r28, r30
    20f6:	d1 1d       	adc	r29, r1
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	ed 01       	movw	r28, r26
    2104:	08 95       	ret

00002106 <itoa>:
    2106:	fb 01       	movw	r30, r22
    2108:	9f 01       	movw	r18, r30
    210a:	e8 94       	clt
    210c:	42 30       	cpi	r20, 0x02	; 2
    210e:	c4 f0       	brlt	.+48     	; 0x2140 <itoa+0x3a>
    2110:	45 32       	cpi	r20, 0x25	; 37
    2112:	b4 f4       	brge	.+44     	; 0x2140 <itoa+0x3a>
    2114:	4a 30       	cpi	r20, 0x0A	; 10
    2116:	29 f4       	brne	.+10     	; 0x2122 <itoa+0x1c>
    2118:	97 fb       	bst	r25, 7
    211a:	1e f4       	brtc	.+6      	; 0x2122 <itoa+0x1c>
    211c:	90 95       	com	r25
    211e:	81 95       	neg	r24
    2120:	9f 4f       	sbci	r25, 0xFF	; 255
    2122:	64 2f       	mov	r22, r20
    2124:	77 27       	eor	r23, r23
    2126:	0e 94 b4 10 	call	0x2168	; 0x2168 <__udivmodhi4>
    212a:	80 5d       	subi	r24, 0xD0	; 208
    212c:	8a 33       	cpi	r24, 0x3A	; 58
    212e:	0c f0       	brlt	.+2      	; 0x2132 <itoa+0x2c>
    2130:	89 5d       	subi	r24, 0xD9	; 217
    2132:	81 93       	st	Z+, r24
    2134:	cb 01       	movw	r24, r22
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	a1 f7       	brne	.-24     	; 0x2122 <itoa+0x1c>
    213a:	16 f4       	brtc	.+4      	; 0x2140 <itoa+0x3a>
    213c:	5d e2       	ldi	r21, 0x2D	; 45
    213e:	51 93       	st	Z+, r21
    2140:	10 82       	st	Z, r1
    2142:	c9 01       	movw	r24, r18
    2144:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <strrev>

00002148 <strrev>:
    2148:	dc 01       	movw	r26, r24
    214a:	fc 01       	movw	r30, r24
    214c:	67 2f       	mov	r22, r23
    214e:	71 91       	ld	r23, Z+
    2150:	77 23       	and	r23, r23
    2152:	e1 f7       	brne	.-8      	; 0x214c <strrev+0x4>
    2154:	32 97       	sbiw	r30, 0x02	; 2
    2156:	04 c0       	rjmp	.+8      	; 0x2160 <strrev+0x18>
    2158:	7c 91       	ld	r23, X
    215a:	6d 93       	st	X+, r22
    215c:	70 83       	st	Z, r23
    215e:	62 91       	ld	r22, -Z
    2160:	ae 17       	cp	r26, r30
    2162:	bf 07       	cpc	r27, r31
    2164:	c8 f3       	brcs	.-14     	; 0x2158 <strrev+0x10>
    2166:	08 95       	ret

00002168 <__udivmodhi4>:
    2168:	aa 1b       	sub	r26, r26
    216a:	bb 1b       	sub	r27, r27
    216c:	51 e1       	ldi	r21, 0x11	; 17
    216e:	07 c0       	rjmp	.+14     	; 0x217e <__udivmodhi4_ep>

00002170 <__udivmodhi4_loop>:
    2170:	aa 1f       	adc	r26, r26
    2172:	bb 1f       	adc	r27, r27
    2174:	a6 17       	cp	r26, r22
    2176:	b7 07       	cpc	r27, r23
    2178:	10 f0       	brcs	.+4      	; 0x217e <__udivmodhi4_ep>
    217a:	a6 1b       	sub	r26, r22
    217c:	b7 0b       	sbc	r27, r23

0000217e <__udivmodhi4_ep>:
    217e:	88 1f       	adc	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	5a 95       	dec	r21
    2184:	a9 f7       	brne	.-22     	; 0x2170 <__udivmodhi4_loop>
    2186:	80 95       	com	r24
    2188:	90 95       	com	r25
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	08 95       	ret

00002190 <_exit>:
    2190:	f8 94       	cli

00002192 <__stop_program>:
    2192:	ff cf       	rjmp	.-2      	; 0x2192 <__stop_program>
