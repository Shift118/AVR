
Final_Project_Micro1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000332e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  0000332e  000033a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002ac0  00000000  00000000  00003414  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ca4  00000000  00000000  00005ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000995c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a70c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000aaf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b2c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b5 11 	call	0x236a	; 0x236a <main>
      7a:	0c 94 95 19 	jmp	0x332a	; 0x332a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 ec       	ldi	r26, 0xC7	; 199
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 35 19 	jmp	0x326a	; 0x326a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	87 ec       	ldi	r24, 0xC7	; 199
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 35 19 	jmp	0x326a	; 0x326a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <EEPROM_init>:
#include "External_EEPROM.h"
#include "i2c.h"

void EEPROM_init(){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	TWI_init();
     b3e:	0e 94 45 06 	call	0xc8a	; 0xc8a <TWI_init>
}
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	08 95       	ret

00000b48 <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data){
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <EEPROM_writeByte+0x6>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <EEPROM_writeByte+0x8>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01
     b58:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     b5a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_start>

	if (TWI_getStatus() != TW_START){
     b5e:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     b62:	88 30       	cpi	r24, 0x08	; 8
     b64:	11 f0       	breq	.+4      	; 0xb6a <EEPROM_writeByte+0x22>
			return ERROR;
     b66:	1c 82       	std	Y+4, r1	; 0x04
     b68:	28 c0       	rjmp	.+80     	; 0xbba <EEPROM_writeByte+0x72>
	}//                                       A10,A9,A8, (R/W = 0)"Write"
	//                             1010 or (SlaveAdress & 0111 0000 0000) >> 7)
	TWI_write((uint8)(0xA0 | ( (u16addr & 0x0700)>>7) ));
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	80 70       	andi	r24, 0x00	; 0
     b70:	97 70       	andi	r25, 0x07	; 7
     b72:	88 0f       	add	r24, r24
     b74:	89 2f       	mov	r24, r25
     b76:	88 1f       	adc	r24, r24
     b78:	99 0b       	sbc	r25, r25
     b7a:	91 95       	neg	r25
     b7c:	80 6a       	ori	r24, 0xA0	; 160
     b7e:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>

	if (TWI_getStatus() != TW_MT_SLA_W_ACK){
     b82:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     b86:	88 31       	cpi	r24, 0x18	; 24
     b88:	11 f0       	breq	.+4      	; 0xb8e <EEPROM_writeByte+0x46>
		return ERROR;
     b8a:	1c 82       	std	Y+4, r1	; 0x04
     b8c:	16 c0       	rjmp	.+44     	; 0xbba <EEPROM_writeByte+0x72>
	}
	TWI_write((uint8)(u16addr)); // Send the required Memory Location
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>

	if(TWI_getStatus() != TW_MT_DATA_ACK){
     b94:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     b98:	88 32       	cpi	r24, 0x28	; 40
     b9a:	11 f0       	breq	.+4      	; 0xba0 <EEPROM_writeByte+0x58>
		return ERROR;
     b9c:	1c 82       	std	Y+4, r1	; 0x04
     b9e:	0d c0       	rjmp	.+26     	; 0xbba <EEPROM_writeByte+0x72>
	}
	TWI_write(u8data);// write byte to eeprom
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>

	if (TWI_getStatus() != TW_MT_DATA_ACK){
     ba6:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     baa:	88 32       	cpi	r24, 0x28	; 40
     bac:	11 f0       	breq	.+4      	; 0xbb2 <EEPROM_writeByte+0x6a>
		return ERROR;
     bae:	1c 82       	std	Y+4, r1	; 0x04
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <EEPROM_writeByte+0x72>
	}
	TWI_stop();
     bb2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TWI_stop>
	return SUCCESS;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 83       	std	Y+4, r24	; 0x04
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data){
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <EEPROM_readByte+0x6>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <EEPROM_readByte+0x8>
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	9a 83       	std	Y+2, r25	; 0x02
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	7c 83       	std	Y+4, r23	; 0x04
     bde:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     be0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_start>
	if (TWI_getStatus() != TW_START){
     be4:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     be8:	88 30       	cpi	r24, 0x08	; 8
     bea:	11 f0       	breq	.+4      	; 0xbf0 <EEPROM_readByte+0x26>
		return ERROR;
     bec:	1d 82       	std	Y+5, r1	; 0x05
     bee:	44 c0       	rjmp	.+136    	; 0xc78 <EEPROM_readByte+0xae>
	}
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	80 70       	andi	r24, 0x00	; 0
     bf6:	97 70       	andi	r25, 0x07	; 7
     bf8:	88 0f       	add	r24, r24
     bfa:	89 2f       	mov	r24, r25
     bfc:	88 1f       	adc	r24, r24
     bfe:	99 0b       	sbc	r25, r25
     c00:	91 95       	neg	r25
     c02:	80 6a       	ori	r24, 0xA0	; 160
     c04:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>

	if (TWI_getStatus() != TW_MT_SLA_W_ACK){
     c08:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c0c:	88 31       	cpi	r24, 0x18	; 24
     c0e:	11 f0       	breq	.+4      	; 0xc14 <EEPROM_readByte+0x4a>
		return ERROR;
     c10:	1d 82       	std	Y+5, r1	; 0x05
     c12:	32 c0       	rjmp	.+100    	; 0xc78 <EEPROM_readByte+0xae>
	}

	TWI_write((uint8)(u16addr)); // Memory Location.
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK){
     c1a:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c1e:	88 32       	cpi	r24, 0x28	; 40
     c20:	11 f0       	breq	.+4      	; 0xc26 <EEPROM_readByte+0x5c>
		return ERROR;
     c22:	1d 82       	std	Y+5, r1	; 0x05
     c24:	29 c0       	rjmp	.+82     	; 0xc78 <EEPROM_readByte+0xae>
	}

	//////Send Repeated Start Bit//////
	TWI_start(); // repeated start
     c26:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_start>
	if(TWI_getStatus() != TW_REP_START){
     c2a:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c2e:	80 31       	cpi	r24, 0x10	; 16
     c30:	11 f0       	breq	.+4      	; 0xc36 <EEPROM_readByte+0x6c>
		return ERROR;
     c32:	1d 82       	std	Y+5, r1	; 0x05
     c34:	21 c0       	rjmp	.+66     	; 0xc78 <EEPROM_readByte+0xae>
	}

	//                                          Memory Location + Read
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	80 70       	andi	r24, 0x00	; 0
     c3c:	97 70       	andi	r25, 0x07	; 7
     c3e:	88 0f       	add	r24, r24
     c40:	89 2f       	mov	r24, r25
     c42:	88 1f       	adc	r24, r24
     c44:	99 0b       	sbc	r25, r25
     c46:	91 95       	neg	r25
     c48:	81 6a       	ori	r24, 0xA1	; 161
     c4a:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
	if(TWI_getStatus() != TW_MT_SLA_R_ACK){
     c4e:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c52:	80 34       	cpi	r24, 0x40	; 64
     c54:	11 f0       	breq	.+4      	; 0xc5a <EEPROM_readByte+0x90>
		return ERROR;
     c56:	1d 82       	std	Y+5, r1	; 0x05
     c58:	0f c0       	rjmp	.+30     	; 0xc78 <EEPROM_readByte+0xae>
	}

	*u8data = TWI_readWithNACK();
     c5a:	0e 94 a0 06 	call	0xd40	; 0xd40 <TWI_readWithNACK>
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	80 83       	st	Z, r24
	if(TWI_getStatus() != TW_MR_DATA_NACK){
     c64:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c68:	88 35       	cpi	r24, 0x58	; 88
     c6a:	11 f0       	breq	.+4      	; 0xc70 <EEPROM_readByte+0xa6>
		return ERROR;
     c6c:	1d 82       	std	Y+5, r1	; 0x05
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <EEPROM_readByte+0xae>
	}
	TWI_stop();
     c70:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TWI_stop>
	return SUCCESS;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	8d 83       	std	Y+5, r24	; 0x05
     c78:	8d 81       	ldd	r24, Y+5	; 0x05

}
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <TWI_init>:
#include "i2c.h"

void TWI_init(){
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
	TWBR = 0x02; // Bit Rate: 400.000 kbps using 0 prescaler "TWSR" and F_cpu = 8MHZ;
     c92:	e0 e2       	ldi	r30, 0x20	; 32
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	80 83       	st	Z, r24
	TWSR = 0;
     c9a:	e1 e2       	ldi	r30, 0x21	; 33
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	10 82       	st	Z, r1
	TWI address bits contain TWI 7-bit address with which it can called by other masters in slave mode.

	Bit 0 – TWGCE: TWI general call enable bit
	TWI general call enable bit when set it enables recognition of general call over the TWI bus
*/
	TWAR = 0b00000010;  // My address for slave mode.
     ca0:	e2 e2       	ldi	r30, 0x22	; 34
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	80 83       	st	Z, r24
	TWCR = (1<<TWEN); // TWI enable bit
     ca8:	e6 e5       	ldi	r30, 0x56	; 86
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	80 83       	st	Z, r24
}
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <TWI_start>:
void TWI_start(){
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // Clear flag for further use , Start bit, Enable I2C bit
     cbe:	e6 e5       	ldi	r30, 0x56	; 86
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	84 ea       	ldi	r24, 0xA4	; 164
     cc4:	80 83       	st	Z, r24
	while(bitIsClear(TWCR,TWINT)); // While is cleared wait , But when transmit is successful continue.
     cc6:	e6 e5       	ldi	r30, 0x56	; 86
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	88 23       	and	r24, r24
     cce:	dc f7       	brge	.-10     	; 0xcc6 <TWI_start+0x10>
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <TWI_stop>:
void TWI_stop(){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // Clear flag for further use , Stop bit, Enable I2C Bit.
     cde:	e6 e5       	ldi	r30, 0x56	; 86
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	84 e9       	ldi	r24, 0x94	; 148
     ce4:	80 83       	st	Z, r24
	// Here I don't care about checking the flag because I have already stopped.
}
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <TWI_write>:
void TWI_write(uint8 data){
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	0f 92       	push	r0
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
     cf8:	e3 e2       	ldi	r30, 0x23	; 35
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);// Clear flag for further use, Enable I2C bit
     d00:	e6 e5       	ldi	r30, 0x56	; 86
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	84 e8       	ldi	r24, 0x84	; 132
     d06:	80 83       	st	Z, r24
	while(bitIsClear(TWCR,TWINT));
     d08:	e6 e5       	ldi	r30, 0x56	; 86
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	88 23       	and	r24, r24
     d10:	dc f7       	brge	.-10     	; 0xd08 <TWI_write+0x1c>
}
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <TWI_readWithACK>:
uint8 TWI_readWithACK(){
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     d22:	e6 e5       	ldi	r30, 0x56	; 86
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	84 ec       	ldi	r24, 0xC4	; 196
     d28:	80 83       	st	Z, r24
	while(bitIsClear(TWCR,TWINT));
     d2a:	e6 e5       	ldi	r30, 0x56	; 86
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 23       	and	r24, r24
     d32:	dc f7       	brge	.-10     	; 0xd2a <TWI_readWithACK+0x10>
	return TWDR;
     d34:	e3 e2       	ldi	r30, 0x23	; 35
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
}
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <TWI_readWithNACK>:
uint8 TWI_readWithNACK(){
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
     d48:	e6 e5       	ldi	r30, 0x56	; 86
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	84 e8       	ldi	r24, 0x84	; 132
     d4e:	80 83       	st	Z, r24
	while(bitIsClear(TWCR,TWINT));
     d50:	e6 e5       	ldi	r30, 0x56	; 86
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	88 23       	and	r24, r24
     d58:	dc f7       	brge	.-10     	; 0xd50 <TWI_readWithNACK+0x10>
	return TWDR;
     d5a:	e3 e2       	ldi	r30, 0x23	; 35
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
}
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <TWI_getStatus>:
uint8 TWI_getStatus(){
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	0f 92       	push	r0
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	status = TWSR & 0xf8; // I only need the last 5 bit (status bits)
     d70:	e1 e2       	ldi	r30, 0x21	; 33
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	88 7f       	andi	r24, 0xF8	; 248
     d78:	89 83       	std	Y+1, r24	; 0x01
	return status;
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <KeyPad_getPressedKey>:
	static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number);
#endif

// Functions

uint8 KeyPad_getPressedKey(void){
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	00 d0       	rcall	.+0      	; 0xd8a <KeyPad_getPressedKey+0x6>
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1){
		for(col = 0; col < N_col;col++){
     d8e:	1a 82       	std	Y+2, r1	; 0x02
     d90:	4c c0       	rjmp	.+152    	; 0xe2a <KeyPad_getPressedKey+0xa6>
			KEYPAD_PORT_DIR = (0b00010000 << col);
     d92:	ea e3       	ldi	r30, 0x3A	; 58
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	80 e1       	ldi	r24, 0x10	; 16
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <KeyPad_getPressedKey+0x22>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	2a 95       	dec	r18
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <KeyPad_getPressedKey+0x1e>
     daa:	80 83       	st	Z, r24
			KEYPAD_PORT_OUT = (~(0b00010000 << col));
     dac:	eb e3       	ldi	r30, 0x3B	; 59
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	80 e1       	ldi	r24, 0x10	; 16
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <KeyPad_getPressedKey+0x3e>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <KeyPad_getPressedKey+0x3a>
     dc6:	80 95       	com	r24
     dc8:	80 83       	st	Z, r24

			for(row = 0; row < N_row ; row++){
     dca:	19 82       	std	Y+1, r1	; 0x01
     dcc:	28 c0       	rjmp	.+80     	; 0xe1e <KeyPad_getPressedKey+0x9a>
				if(bitIsClear(KEYPAD_PORT_IN,row)){
     dce:	e9 e3       	ldi	r30, 0x39	; 57
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a9 01       	movw	r20, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <KeyPad_getPressedKey+0x62>
     de2:	55 95       	asr	r21
     de4:	47 95       	ror	r20
     de6:	8a 95       	dec	r24
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <KeyPad_getPressedKey+0x5e>
     dea:	ca 01       	movw	r24, r20
     dec:	81 70       	andi	r24, 0x01	; 1
     dee:	90 70       	andi	r25, 0x00	; 0
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	91 f4       	brne	.+36     	; 0xe18 <KeyPad_getPressedKey+0x94>
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	98 2f       	mov	r25, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	89 0f       	add	r24, r25
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	0e 94 1a 07 	call	0xe34	; 0xe34 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret
	while(1){
		for(col = 0; col < N_col;col++){
			KEYPAD_PORT_DIR = (0b00010000 << col);
			KEYPAD_PORT_OUT = (~(0b00010000 << col));

			for(row = 0; row < N_row ; row++){
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	84 30       	cpi	r24, 0x04	; 4
     e22:	a8 f2       	brcs	.-86     	; 0xdce <KeyPad_getPressedKey+0x4a>
// Functions

uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1){
		for(col = 0; col < N_col;col++){
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	8a 83       	std	Y+2, r24	; 0x02
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	84 30       	cpi	r24, 0x04	; 4
     e2e:	08 f4       	brcc	.+2      	; 0xe32 <KeyPad_getPressedKey+0xae>
     e30:	b0 cf       	rjmp	.-160    	; 0xd92 <KeyPad_getPressedKey+0xe>
     e32:	ad cf       	rjmp	.-166    	; 0xd8e <KeyPad_getPressedKey+0xa>

00000e34 <KeyPad_4x4_adjustKeyNumber>:
	case 12: return '#'; break;
	}
}

#elif (N_col == 4)
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number){
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	00 d0       	rcall	.+0      	; 0xe3a <KeyPad_4x4_adjustKeyNumber+0x6>
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <KeyPad_4x4_adjustKeyNumber+0x8>
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number){
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	3c 83       	std	Y+4, r19	; 0x04
     e4a:	2b 83       	std	Y+3, r18	; 0x03
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	9c 81       	ldd	r25, Y+4	; 0x04
     e50:	88 30       	cpi	r24, 0x08	; 8
     e52:	91 05       	cpc	r25, r1
     e54:	09 f4       	brne	.+2      	; 0xe58 <KeyPad_4x4_adjustKeyNumber+0x24>
     e56:	70 c0       	rjmp	.+224    	; 0xf38 <KeyPad_4x4_adjustKeyNumber+0x104>
     e58:	2b 81       	ldd	r18, Y+3	; 0x03
     e5a:	3c 81       	ldd	r19, Y+4	; 0x04
     e5c:	29 30       	cpi	r18, 0x09	; 9
     e5e:	31 05       	cpc	r19, r1
     e60:	5c f5       	brge	.+86     	; 0xeb8 <KeyPad_4x4_adjustKeyNumber+0x84>
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	9c 81       	ldd	r25, Y+4	; 0x04
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	91 05       	cpc	r25, r1
     e6a:	09 f4       	brne	.+2      	; 0xe6e <KeyPad_4x4_adjustKeyNumber+0x3a>
     e6c:	59 c0       	rjmp	.+178    	; 0xf20 <KeyPad_4x4_adjustKeyNumber+0xec>
     e6e:	2b 81       	ldd	r18, Y+3	; 0x03
     e70:	3c 81       	ldd	r19, Y+4	; 0x04
     e72:	25 30       	cpi	r18, 0x05	; 5
     e74:	31 05       	cpc	r19, r1
     e76:	9c f4       	brge	.+38     	; 0xe9e <KeyPad_4x4_adjustKeyNumber+0x6a>
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	91 05       	cpc	r25, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <KeyPad_4x4_adjustKeyNumber+0x50>
     e82:	48 c0       	rjmp	.+144    	; 0xf14 <KeyPad_4x4_adjustKeyNumber+0xe0>
     e84:	2b 81       	ldd	r18, Y+3	; 0x03
     e86:	3c 81       	ldd	r19, Y+4	; 0x04
     e88:	23 30       	cpi	r18, 0x03	; 3
     e8a:	31 05       	cpc	r19, r1
     e8c:	0c f0       	brlt	.+2      	; 0xe90 <KeyPad_4x4_adjustKeyNumber+0x5c>
     e8e:	45 c0       	rjmp	.+138    	; 0xf1a <KeyPad_4x4_adjustKeyNumber+0xe6>
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	9c 81       	ldd	r25, Y+4	; 0x04
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	91 05       	cpc	r25, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <KeyPad_4x4_adjustKeyNumber+0x68>
     e9a:	39 c0       	rjmp	.+114    	; 0xf0e <KeyPad_4x4_adjustKeyNumber+0xda>
     e9c:	68 c0       	rjmp	.+208    	; 0xf6e <KeyPad_4x4_adjustKeyNumber+0x13a>
     e9e:	2b 81       	ldd	r18, Y+3	; 0x03
     ea0:	3c 81       	ldd	r19, Y+4	; 0x04
     ea2:	26 30       	cpi	r18, 0x06	; 6
     ea4:	31 05       	cpc	r19, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <KeyPad_4x4_adjustKeyNumber+0x76>
     ea8:	41 c0       	rjmp	.+130    	; 0xf2c <KeyPad_4x4_adjustKeyNumber+0xf8>
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	87 30       	cpi	r24, 0x07	; 7
     eb0:	91 05       	cpc	r25, r1
     eb2:	0c f0       	brlt	.+2      	; 0xeb6 <KeyPad_4x4_adjustKeyNumber+0x82>
     eb4:	3e c0       	rjmp	.+124    	; 0xf32 <KeyPad_4x4_adjustKeyNumber+0xfe>
     eb6:	37 c0       	rjmp	.+110    	; 0xf26 <KeyPad_4x4_adjustKeyNumber+0xf2>
     eb8:	2b 81       	ldd	r18, Y+3	; 0x03
     eba:	3c 81       	ldd	r19, Y+4	; 0x04
     ebc:	2c 30       	cpi	r18, 0x0C	; 12
     ebe:	31 05       	cpc	r19, r1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <KeyPad_4x4_adjustKeyNumber+0x90>
     ec2:	46 c0       	rjmp	.+140    	; 0xf50 <KeyPad_4x4_adjustKeyNumber+0x11c>
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	8d 30       	cpi	r24, 0x0D	; 13
     eca:	91 05       	cpc	r25, r1
     ecc:	5c f4       	brge	.+22     	; 0xee4 <KeyPad_4x4_adjustKeyNumber+0xb0>
     ece:	2b 81       	ldd	r18, Y+3	; 0x03
     ed0:	3c 81       	ldd	r19, Y+4	; 0x04
     ed2:	2a 30       	cpi	r18, 0x0A	; 10
     ed4:	31 05       	cpc	r19, r1
     ed6:	b1 f1       	breq	.+108    	; 0xf44 <KeyPad_4x4_adjustKeyNumber+0x110>
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	9c 81       	ldd	r25, Y+4	; 0x04
     edc:	8b 30       	cpi	r24, 0x0B	; 11
     ede:	91 05       	cpc	r25, r1
     ee0:	a4 f5       	brge	.+104    	; 0xf4a <KeyPad_4x4_adjustKeyNumber+0x116>
     ee2:	2d c0       	rjmp	.+90     	; 0xf3e <KeyPad_4x4_adjustKeyNumber+0x10a>
     ee4:	2b 81       	ldd	r18, Y+3	; 0x03
     ee6:	3c 81       	ldd	r19, Y+4	; 0x04
     ee8:	2e 30       	cpi	r18, 0x0E	; 14
     eea:	31 05       	cpc	r19, r1
     eec:	b9 f1       	breq	.+110    	; 0xf5c <KeyPad_4x4_adjustKeyNumber+0x128>
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	8e 30       	cpi	r24, 0x0E	; 14
     ef4:	91 05       	cpc	r25, r1
     ef6:	7c f1       	brlt	.+94     	; 0xf56 <KeyPad_4x4_adjustKeyNumber+0x122>
     ef8:	2b 81       	ldd	r18, Y+3	; 0x03
     efa:	3c 81       	ldd	r19, Y+4	; 0x04
     efc:	2f 30       	cpi	r18, 0x0F	; 15
     efe:	31 05       	cpc	r19, r1
     f00:	81 f1       	breq	.+96     	; 0xf62 <KeyPad_4x4_adjustKeyNumber+0x12e>
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	80 31       	cpi	r24, 0x10	; 16
     f08:	91 05       	cpc	r25, r1
     f0a:	71 f1       	breq	.+92     	; 0xf68 <KeyPad_4x4_adjustKeyNumber+0x134>
     f0c:	30 c0       	rjmp	.+96     	; 0xf6e <KeyPad_4x4_adjustKeyNumber+0x13a>
	case 1: return '7'; break;
     f0e:	97 e3       	ldi	r25, 0x37	; 55
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	2f c0       	rjmp	.+94     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 2: return '8'; break;
     f14:	28 e3       	ldi	r18, 0x38	; 56
     f16:	2a 83       	std	Y+2, r18	; 0x02
     f18:	2c c0       	rjmp	.+88     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 3: return '9'; break;
     f1a:	39 e3       	ldi	r19, 0x39	; 57
     f1c:	3a 83       	std	Y+2, r19	; 0x02
     f1e:	29 c0       	rjmp	.+82     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 4: return '%'; break;
     f20:	85 e2       	ldi	r24, 0x25	; 37
     f22:	8a 83       	std	Y+2, r24	; 0x02
     f24:	26 c0       	rjmp	.+76     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 5: return '4'; break;
     f26:	94 e3       	ldi	r25, 0x34	; 52
     f28:	9a 83       	std	Y+2, r25	; 0x02
     f2a:	23 c0       	rjmp	.+70     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 6: return '5'; break;
     f2c:	25 e3       	ldi	r18, 0x35	; 53
     f2e:	2a 83       	std	Y+2, r18	; 0x02
     f30:	20 c0       	rjmp	.+64     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 7: return '6'; break;
     f32:	36 e3       	ldi	r19, 0x36	; 54
     f34:	3a 83       	std	Y+2, r19	; 0x02
     f36:	1d c0       	rjmp	.+58     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 8: return '*'; break;
     f38:	8a e2       	ldi	r24, 0x2A	; 42
     f3a:	8a 83       	std	Y+2, r24	; 0x02
     f3c:	1a c0       	rjmp	.+52     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 9: return '1'; break;
     f3e:	91 e3       	ldi	r25, 0x31	; 49
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	17 c0       	rjmp	.+46     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 10: return '2'; break;
     f44:	22 e3       	ldi	r18, 0x32	; 50
     f46:	2a 83       	std	Y+2, r18	; 0x02
     f48:	14 c0       	rjmp	.+40     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 11: return '3'; break;
     f4a:	33 e3       	ldi	r19, 0x33	; 51
     f4c:	3a 83       	std	Y+2, r19	; 0x02
     f4e:	11 c0       	rjmp	.+34     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 12: return '-'; break;
     f50:	8d e2       	ldi	r24, 0x2D	; 45
     f52:	8a 83       	std	Y+2, r24	; 0x02
     f54:	0e c0       	rjmp	.+28     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 13: return 'C'; break; // CE or C
     f56:	93 e4       	ldi	r25, 0x43	; 67
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	0b c0       	rjmp	.+22     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 14: return '0'; break;
     f5c:	20 e3       	ldi	r18, 0x30	; 48
     f5e:	2a 83       	std	Y+2, r18	; 0x02
     f60:	08 c0       	rjmp	.+16     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 15: return '='; break;
     f62:	3d e3       	ldi	r19, 0x3D	; 61
     f64:	3a 83       	std	Y+2, r19	; 0x02
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	case 16: return '+'; break;
     f68:	8b e2       	ldi	r24, 0x2B	; 43
     f6a:	8a 83       	std	Y+2, r24	; 0x02
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <KeyPad_4x4_adjustKeyNumber+0x13e>
	default: return button_number;
     f6e:	99 81       	ldd	r25, Y+1	; 0x01
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <LCD_init>:
#include "lcd.h"

void LCD_init(void){
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<RS) | (1<<RW) | (1<<E);
     f8a:	a1 e3       	ldi	r26, 0x31	; 49
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e1 e3       	ldi	r30, 0x31	; 49
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	80 67       	ori	r24, 0x70	; 112
     f96:	8c 93       	st	X, r24
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0Xf0;
     f98:	a4 e3       	ldi	r26, 0x34	; 52
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e4 e3       	ldi	r30, 0x34	; 52
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	80 6f       	ori	r24, 0xF0	; 240
     fa4:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0X0f; // IF LOWER PINS ARE USED
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE);
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     fac:	88 e2       	ldi	r24, 0x28	; 40
     fae:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
			LCD_DATA_PORT_DIR |= 0xff;
			LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
	#endif
	LCD_sendCommand(CURSOR_OFF);
     fb2:	8c e0       	ldi	r24, 0x0C	; 12
     fb4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND);
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <LCD_sendCommand>
}
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command){
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	c3 56       	subi	r28, 0x63	; 99
     fd2:	d0 40       	sbci	r29, 0x00	; 0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	fe 01       	movw	r30, r28
     fe0:	ed 59       	subi	r30, 0x9D	; 157
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	80 83       	st	Z, r24
	clearBit(LCD_CTRL_PORT,RS);
     fe6:	a2 e3       	ldi	r26, 0x32	; 50
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e2 e3       	ldi	r30, 0x32	; 50
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8f 7e       	andi	r24, 0xEF	; 239
     ff2:	8c 93       	st	X, r24
	clearBit(LCD_CTRL_PORT,RW);
     ff4:	a2 e3       	ldi	r26, 0x32	; 50
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e2 e3       	ldi	r30, 0x32	; 50
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	8f 7d       	andi	r24, 0xDF	; 223
    1000:	8c 93       	st	X, r24
    1002:	fe 01       	movw	r30, r28
    1004:	e1 5a       	subi	r30, 0xA1	; 161
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a0 e8       	ldi	r26, 0x80	; 128
    100e:	bf e3       	ldi	r27, 0x3F	; 63
    1010:	80 83       	st	Z, r24
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	a2 83       	std	Z+2, r26	; 0x02
    1016:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1018:	8e 01       	movw	r16, r28
    101a:	05 5a       	subi	r16, 0xA5	; 165
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	fe 01       	movw	r30, r28
    1020:	e1 5a       	subi	r30, 0xA1	; 161
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	60 81       	ld	r22, Z
    1026:	71 81       	ldd	r23, Z+1	; 0x01
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	4a e7       	ldi	r20, 0x7A	; 122
    1032:	53 e4       	ldi	r21, 0x43	; 67
    1034:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	f8 01       	movw	r30, r16
    103e:	80 83       	st	Z, r24
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	a2 83       	std	Z+2, r26	; 0x02
    1044:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1046:	fe 01       	movw	r30, r28
    1048:	e5 5a       	subi	r30, 0xA5	; 165
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	60 81       	ld	r22, Z
    104e:	71 81       	ldd	r23, Z+1	; 0x01
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e8       	ldi	r20, 0x80	; 128
    105a:	5f e3       	ldi	r21, 0x3F	; 63
    105c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1060:	88 23       	and	r24, r24
    1062:	44 f4       	brge	.+16     	; 0x1074 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1064:	fe 01       	movw	r30, r28
    1066:	e7 5a       	subi	r30, 0xA7	; 167
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	80 83       	st	Z, r24
    1072:	64 c0       	rjmp	.+200    	; 0x113c <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1074:	fe 01       	movw	r30, r28
    1076:	e5 5a       	subi	r30, 0xA5	; 165
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	60 81       	ld	r22, Z
    107c:	71 81       	ldd	r23, Z+1	; 0x01
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	3f ef       	ldi	r19, 0xFF	; 255
    1086:	4f e7       	ldi	r20, 0x7F	; 127
    1088:	57 e4       	ldi	r21, 0x47	; 71
    108a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    108e:	18 16       	cp	r1, r24
    1090:	0c f0       	brlt	.+2      	; 0x1094 <LCD_sendCommand+0xd0>
    1092:	43 c0       	rjmp	.+134    	; 0x111a <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1094:	fe 01       	movw	r30, r28
    1096:	e1 5a       	subi	r30, 0xA1	; 161
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	60 81       	ld	r22, Z
    109c:	71 81       	ldd	r23, Z+1	; 0x01
    109e:	82 81       	ldd	r24, Z+2	; 0x02
    10a0:	93 81       	ldd	r25, Z+3	; 0x03
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e2       	ldi	r20, 0x20	; 32
    10a8:	51 e4       	ldi	r21, 0x41	; 65
    10aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	8e 01       	movw	r16, r28
    10b4:	07 5a       	subi	r16, 0xA7	; 167
    10b6:	1f 4f       	sbci	r17, 0xFF	; 255
    10b8:	bc 01       	movw	r22, r24
    10ba:	cd 01       	movw	r24, r26
    10bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	f8 01       	movw	r30, r16
    10c6:	91 83       	std	Z+1, r25	; 0x01
    10c8:	80 83       	st	Z, r24
    10ca:	1f c0       	rjmp	.+62     	; 0x110a <LCD_sendCommand+0x146>
    10cc:	fe 01       	movw	r30, r28
    10ce:	e9 5a       	subi	r30, 0xA9	; 169
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	89 e1       	ldi	r24, 0x19	; 25
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	91 83       	std	Z+1, r25	; 0x01
    10d8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10da:	fe 01       	movw	r30, r28
    10dc:	e9 5a       	subi	r30, 0xA9	; 169
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <LCD_sendCommand+0x120>
    10e8:	fe 01       	movw	r30, r28
    10ea:	e9 5a       	subi	r30, 0xA9	; 169
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f2:	de 01       	movw	r26, r28
    10f4:	a7 5a       	subi	r26, 0xA7	; 167
    10f6:	bf 4f       	sbci	r27, 0xFF	; 255
    10f8:	fe 01       	movw	r30, r28
    10fa:	e7 5a       	subi	r30, 0xA7	; 167
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	80 81       	ld	r24, Z
    1100:	91 81       	ldd	r25, Z+1	; 0x01
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	11 96       	adiw	r26, 0x01	; 1
    1106:	9c 93       	st	X, r25
    1108:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110a:	fe 01       	movw	r30, r28
    110c:	e7 5a       	subi	r30, 0xA7	; 167
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	80 81       	ld	r24, Z
    1112:	91 81       	ldd	r25, Z+1	; 0x01
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	d1 f6       	brne	.-76     	; 0x10cc <LCD_sendCommand+0x108>
    1118:	27 c0       	rjmp	.+78     	; 0x1168 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111a:	8e 01       	movw	r16, r28
    111c:	07 5a       	subi	r16, 0xA7	; 167
    111e:	1f 4f       	sbci	r17, 0xFF	; 255
    1120:	fe 01       	movw	r30, r28
    1122:	e5 5a       	subi	r30, 0xA5	; 165
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	60 81       	ld	r22, Z
    1128:	71 81       	ldd	r23, Z+1	; 0x01
    112a:	82 81       	ldd	r24, Z+2	; 0x02
    112c:	93 81       	ldd	r25, Z+3	; 0x03
    112e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	f8 01       	movw	r30, r16
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	80 83       	st	Z, r24
    113c:	de 01       	movw	r26, r28
    113e:	ab 5a       	subi	r26, 0xAB	; 171
    1140:	bf 4f       	sbci	r27, 0xFF	; 255
    1142:	fe 01       	movw	r30, r28
    1144:	e7 5a       	subi	r30, 0xA7	; 167
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	8d 93       	st	X+, r24
    114e:	9c 93       	st	X, r25
    1150:	fe 01       	movw	r30, r28
    1152:	eb 5a       	subi	r30, 0xAB	; 171
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	80 81       	ld	r24, Z
    1158:	91 81       	ldd	r25, Z+1	; 0x01
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <LCD_sendCommand+0x196>
    115e:	fe 01       	movw	r30, r28
    1160:	eb 5a       	subi	r30, 0xAB	; 171
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	91 83       	std	Z+1, r25	; 0x01
    1166:	80 83       	st	Z, r24
	_delay_ms(1);
	setBit(LCD_CTRL_PORT,E);
    1168:	a2 e3       	ldi	r26, 0x32	; 50
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e2 e3       	ldi	r30, 0x32	; 50
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	80 64       	ori	r24, 0x40	; 64
    1174:	8c 93       	st	X, r24
    1176:	fe 01       	movw	r30, r28
    1178:	ef 5a       	subi	r30, 0xAF	; 175
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a0 e8       	ldi	r26, 0x80	; 128
    1182:	bf e3       	ldi	r27, 0x3F	; 63
    1184:	80 83       	st	Z, r24
    1186:	91 83       	std	Z+1, r25	; 0x01
    1188:	a2 83       	std	Z+2, r26	; 0x02
    118a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118c:	8e 01       	movw	r16, r28
    118e:	03 5b       	subi	r16, 0xB3	; 179
    1190:	1f 4f       	sbci	r17, 0xFF	; 255
    1192:	fe 01       	movw	r30, r28
    1194:	ef 5a       	subi	r30, 0xAF	; 175
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	60 81       	ld	r22, Z
    119a:	71 81       	ldd	r23, Z+1	; 0x01
    119c:	82 81       	ldd	r24, Z+2	; 0x02
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	4a e7       	ldi	r20, 0x7A	; 122
    11a6:	53 e4       	ldi	r21, 0x43	; 67
    11a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	f8 01       	movw	r30, r16
    11b2:	80 83       	st	Z, r24
    11b4:	91 83       	std	Z+1, r25	; 0x01
    11b6:	a2 83       	std	Z+2, r26	; 0x02
    11b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11ba:	fe 01       	movw	r30, r28
    11bc:	e3 5b       	subi	r30, 0xB3	; 179
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	60 81       	ld	r22, Z
    11c2:	71 81       	ldd	r23, Z+1	; 0x01
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	40 e8       	ldi	r20, 0x80	; 128
    11ce:	5f e3       	ldi	r21, 0x3F	; 63
    11d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11d4:	88 23       	and	r24, r24
    11d6:	44 f4       	brge	.+16     	; 0x11e8 <LCD_sendCommand+0x224>
		__ticks = 1;
    11d8:	fe 01       	movw	r30, r28
    11da:	e5 5b       	subi	r30, 0xB5	; 181
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	91 83       	std	Z+1, r25	; 0x01
    11e4:	80 83       	st	Z, r24
    11e6:	64 c0       	rjmp	.+200    	; 0x12b0 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    11e8:	fe 01       	movw	r30, r28
    11ea:	e3 5b       	subi	r30, 0xB3	; 179
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	60 81       	ld	r22, Z
    11f0:	71 81       	ldd	r23, Z+1	; 0x01
    11f2:	82 81       	ldd	r24, Z+2	; 0x02
    11f4:	93 81       	ldd	r25, Z+3	; 0x03
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	3f ef       	ldi	r19, 0xFF	; 255
    11fa:	4f e7       	ldi	r20, 0x7F	; 127
    11fc:	57 e4       	ldi	r21, 0x47	; 71
    11fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1202:	18 16       	cp	r1, r24
    1204:	0c f0       	brlt	.+2      	; 0x1208 <LCD_sendCommand+0x244>
    1206:	43 c0       	rjmp	.+134    	; 0x128e <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1208:	fe 01       	movw	r30, r28
    120a:	ef 5a       	subi	r30, 0xAF	; 175
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	60 81       	ld	r22, Z
    1210:	71 81       	ldd	r23, Z+1	; 0x01
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	93 81       	ldd	r25, Z+3	; 0x03
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e2       	ldi	r20, 0x20	; 32
    121c:	51 e4       	ldi	r21, 0x41	; 65
    121e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	8e 01       	movw	r16, r28
    1228:	05 5b       	subi	r16, 0xB5	; 181
    122a:	1f 4f       	sbci	r17, 0xFF	; 255
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	f8 01       	movw	r30, r16
    123a:	91 83       	std	Z+1, r25	; 0x01
    123c:	80 83       	st	Z, r24
    123e:	1f c0       	rjmp	.+62     	; 0x127e <LCD_sendCommand+0x2ba>
    1240:	fe 01       	movw	r30, r28
    1242:	e7 5b       	subi	r30, 0xB7	; 183
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	89 e1       	ldi	r24, 0x19	; 25
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	80 83       	st	Z, r24
    124e:	fe 01       	movw	r30, r28
    1250:	e7 5b       	subi	r30, 0xB7	; 183
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <LCD_sendCommand+0x294>
    125c:	fe 01       	movw	r30, r28
    125e:	e7 5b       	subi	r30, 0xB7	; 183
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	91 83       	std	Z+1, r25	; 0x01
    1264:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1266:	de 01       	movw	r26, r28
    1268:	a5 5b       	subi	r26, 0xB5	; 181
    126a:	bf 4f       	sbci	r27, 0xFF	; 255
    126c:	fe 01       	movw	r30, r28
    126e:	e5 5b       	subi	r30, 0xB5	; 181
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	80 81       	ld	r24, Z
    1274:	91 81       	ldd	r25, Z+1	; 0x01
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	11 96       	adiw	r26, 0x01	; 1
    127a:	9c 93       	st	X, r25
    127c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127e:	fe 01       	movw	r30, r28
    1280:	e5 5b       	subi	r30, 0xB5	; 181
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	d1 f6       	brne	.-76     	; 0x1240 <LCD_sendCommand+0x27c>
    128c:	27 c0       	rjmp	.+78     	; 0x12dc <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128e:	8e 01       	movw	r16, r28
    1290:	05 5b       	subi	r16, 0xB5	; 181
    1292:	1f 4f       	sbci	r17, 0xFF	; 255
    1294:	fe 01       	movw	r30, r28
    1296:	e3 5b       	subi	r30, 0xB3	; 179
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	60 81       	ld	r22, Z
    129c:	71 81       	ldd	r23, Z+1	; 0x01
    129e:	82 81       	ldd	r24, Z+2	; 0x02
    12a0:	93 81       	ldd	r25, Z+3	; 0x03
    12a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	f8 01       	movw	r30, r16
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	80 83       	st	Z, r24
    12b0:	de 01       	movw	r26, r28
    12b2:	a9 5b       	subi	r26, 0xB9	; 185
    12b4:	bf 4f       	sbci	r27, 0xFF	; 255
    12b6:	fe 01       	movw	r30, r28
    12b8:	e5 5b       	subi	r30, 0xB5	; 181
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	80 81       	ld	r24, Z
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	8d 93       	st	X+, r24
    12c2:	9c 93       	st	X, r25
    12c4:	fe 01       	movw	r30, r28
    12c6:	e9 5b       	subi	r30, 0xB9	; 185
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	80 81       	ld	r24, Z
    12cc:	91 81       	ldd	r25, Z+1	; 0x01
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <LCD_sendCommand+0x30a>
    12d2:	fe 01       	movw	r30, r28
    12d4:	e9 5b       	subi	r30, 0xB9	; 185
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	80 83       	st	Z, r24
	_delay_ms(1);
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | (command & 0xf0);
    12dc:	a5 e3       	ldi	r26, 0x35	; 53
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e3       	ldi	r30, 0x35	; 53
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	98 2f       	mov	r25, r24
    12e8:	9f 70       	andi	r25, 0x0F	; 15
    12ea:	fe 01       	movw	r30, r28
    12ec:	ed 59       	subi	r30, 0x9D	; 157
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	80 81       	ld	r24, Z
    12f2:	80 7f       	andi	r24, 0xF0	; 240
    12f4:	89 2b       	or	r24, r25
    12f6:	8c 93       	st	X, r24
    12f8:	fe 01       	movw	r30, r28
    12fa:	ed 5b       	subi	r30, 0xBD	; 189
    12fc:	ff 4f       	sbci	r31, 0xFF	; 255
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a0 e8       	ldi	r26, 0x80	; 128
    1304:	bf e3       	ldi	r27, 0x3F	; 63
    1306:	80 83       	st	Z, r24
    1308:	91 83       	std	Z+1, r25	; 0x01
    130a:	a2 83       	std	Z+2, r26	; 0x02
    130c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    130e:	8e 01       	movw	r16, r28
    1310:	01 5c       	subi	r16, 0xC1	; 193
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	fe 01       	movw	r30, r28
    1316:	ed 5b       	subi	r30, 0xBD	; 189
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	60 81       	ld	r22, Z
    131c:	71 81       	ldd	r23, Z+1	; 0x01
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	93 81       	ldd	r25, Z+3	; 0x03
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	4a e7       	ldi	r20, 0x7A	; 122
    1328:	53 e4       	ldi	r21, 0x43	; 67
    132a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	f8 01       	movw	r30, r16
    1334:	80 83       	st	Z, r24
    1336:	91 83       	std	Z+1, r25	; 0x01
    1338:	a2 83       	std	Z+2, r26	; 0x02
    133a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    133c:	fe 01       	movw	r30, r28
    133e:	ff 96       	adiw	r30, 0x3f	; 63
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e8       	ldi	r20, 0x80	; 128
    134e:	5f e3       	ldi	r21, 0x3F	; 63
    1350:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1354:	88 23       	and	r24, r24
    1356:	2c f4       	brge	.+10     	; 0x1362 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9e af       	std	Y+62, r25	; 0x3e
    135e:	8d af       	std	Y+61, r24	; 0x3d
    1360:	46 c0       	rjmp	.+140    	; 0x13ee <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1362:	fe 01       	movw	r30, r28
    1364:	ff 96       	adiw	r30, 0x3f	; 63
    1366:	60 81       	ld	r22, Z
    1368:	71 81       	ldd	r23, Z+1	; 0x01
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	3f ef       	ldi	r19, 0xFF	; 255
    1372:	4f e7       	ldi	r20, 0x7F	; 127
    1374:	57 e4       	ldi	r21, 0x47	; 71
    1376:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    137a:	18 16       	cp	r1, r24
    137c:	64 f5       	brge	.+88     	; 0x13d6 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137e:	fe 01       	movw	r30, r28
    1380:	ed 5b       	subi	r30, 0xBD	; 189
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	60 81       	ld	r22, Z
    1386:	71 81       	ldd	r23, Z+1	; 0x01
    1388:	82 81       	ldd	r24, Z+2	; 0x02
    138a:	93 81       	ldd	r25, Z+3	; 0x03
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e2       	ldi	r20, 0x20	; 32
    1392:	51 e4       	ldi	r21, 0x41	; 65
    1394:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	9e af       	std	Y+62, r25	; 0x3e
    13aa:	8d af       	std	Y+61, r24	; 0x3d
    13ac:	0f c0       	rjmp	.+30     	; 0x13cc <LCD_sendCommand+0x408>
    13ae:	89 e1       	ldi	r24, 0x19	; 25
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	9c af       	std	Y+60, r25	; 0x3c
    13b4:	8b af       	std	Y+59, r24	; 0x3b
    13b6:	8b ad       	ldd	r24, Y+59	; 0x3b
    13b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <LCD_sendCommand+0x3f6>
    13be:	9c af       	std	Y+60, r25	; 0x3c
    13c0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    13c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	9e af       	std	Y+62, r25	; 0x3e
    13ca:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    13ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	69 f7       	brne	.-38     	; 0x13ae <LCD_sendCommand+0x3ea>
    13d4:	16 c0       	rjmp	.+44     	; 0x1402 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d6:	fe 01       	movw	r30, r28
    13d8:	ff 96       	adiw	r30, 0x3f	; 63
    13da:	60 81       	ld	r22, Z
    13dc:	71 81       	ldd	r23, Z+1	; 0x01
    13de:	82 81       	ldd	r24, Z+2	; 0x02
    13e0:	93 81       	ldd	r25, Z+3	; 0x03
    13e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9e af       	std	Y+62, r25	; 0x3e
    13ec:	8d af       	std	Y+61, r24	; 0x3d
    13ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    13f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    13f2:	9a af       	std	Y+58, r25	; 0x3a
    13f4:	89 af       	std	Y+57, r24	; 0x39
    13f6:	89 ad       	ldd	r24, Y+57	; 0x39
    13f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <LCD_sendCommand+0x436>
    13fe:	9a af       	std	Y+58, r25	; 0x3a
    1400:	89 af       	std	Y+57, r24	; 0x39
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xf0) | ((command & 0xf0) >> 4);
		#endif
		_delay_ms(1);
		clearBit(LCD_CTRL_PORT,E);
    1402:	a2 e3       	ldi	r26, 0x32	; 50
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e2 e3       	ldi	r30, 0x32	; 50
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8f 7b       	andi	r24, 0xBF	; 191
    140e:	8c 93       	st	X, r24
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 e8       	ldi	r26, 0x80	; 128
    1416:	bf e3       	ldi	r27, 0x3F	; 63
    1418:	8d ab       	std	Y+53, r24	; 0x35
    141a:	9e ab       	std	Y+54, r25	; 0x36
    141c:	af ab       	std	Y+55, r26	; 0x37
    141e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1420:	6d a9       	ldd	r22, Y+53	; 0x35
    1422:	7e a9       	ldd	r23, Y+54	; 0x36
    1424:	8f a9       	ldd	r24, Y+55	; 0x37
    1426:	98 ad       	ldd	r25, Y+56	; 0x38
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	4a e7       	ldi	r20, 0x7A	; 122
    142e:	53 e4       	ldi	r21, 0x43	; 67
    1430:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	89 ab       	std	Y+49, r24	; 0x31
    143a:	9a ab       	std	Y+50, r25	; 0x32
    143c:	ab ab       	std	Y+51, r26	; 0x33
    143e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1440:	69 a9       	ldd	r22, Y+49	; 0x31
    1442:	7a a9       	ldd	r23, Y+50	; 0x32
    1444:	8b a9       	ldd	r24, Y+51	; 0x33
    1446:	9c a9       	ldd	r25, Y+52	; 0x34
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e8       	ldi	r20, 0x80	; 128
    144e:	5f e3       	ldi	r21, 0x3F	; 63
    1450:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1454:	88 23       	and	r24, r24
    1456:	2c f4       	brge	.+10     	; 0x1462 <LCD_sendCommand+0x49e>
		__ticks = 1;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	98 ab       	std	Y+48, r25	; 0x30
    145e:	8f a7       	std	Y+47, r24	; 0x2f
    1460:	3f c0       	rjmp	.+126    	; 0x14e0 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1462:	69 a9       	ldd	r22, Y+49	; 0x31
    1464:	7a a9       	ldd	r23, Y+50	; 0x32
    1466:	8b a9       	ldd	r24, Y+51	; 0x33
    1468:	9c a9       	ldd	r25, Y+52	; 0x34
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	3f ef       	ldi	r19, 0xFF	; 255
    146e:	4f e7       	ldi	r20, 0x7F	; 127
    1470:	57 e4       	ldi	r21, 0x47	; 71
    1472:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1476:	18 16       	cp	r1, r24
    1478:	4c f5       	brge	.+82     	; 0x14cc <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147a:	6d a9       	ldd	r22, Y+53	; 0x35
    147c:	7e a9       	ldd	r23, Y+54	; 0x36
    147e:	8f a9       	ldd	r24, Y+55	; 0x37
    1480:	98 ad       	ldd	r25, Y+56	; 0x38
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e2       	ldi	r20, 0x20	; 32
    1488:	51 e4       	ldi	r21, 0x41	; 65
    148a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	98 ab       	std	Y+48, r25	; 0x30
    14a0:	8f a7       	std	Y+47, r24	; 0x2f
    14a2:	0f c0       	rjmp	.+30     	; 0x14c2 <LCD_sendCommand+0x4fe>
    14a4:	89 e1       	ldi	r24, 0x19	; 25
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9e a7       	std	Y+46, r25	; 0x2e
    14aa:	8d a7       	std	Y+45, r24	; 0x2d
    14ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    14ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <LCD_sendCommand+0x4ec>
    14b4:	9e a7       	std	Y+46, r25	; 0x2e
    14b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ba:	98 a9       	ldd	r25, Y+48	; 0x30
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	98 ab       	std	Y+48, r25	; 0x30
    14c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14c4:	98 a9       	ldd	r25, Y+48	; 0x30
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	69 f7       	brne	.-38     	; 0x14a4 <LCD_sendCommand+0x4e0>
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14cc:	69 a9       	ldd	r22, Y+49	; 0x31
    14ce:	7a a9       	ldd	r23, Y+50	; 0x32
    14d0:	8b a9       	ldd	r24, Y+51	; 0x33
    14d2:	9c a9       	ldd	r25, Y+52	; 0x34
    14d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	98 ab       	std	Y+48, r25	; 0x30
    14de:	8f a7       	std	Y+47, r24	; 0x2f
    14e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e2:	98 a9       	ldd	r25, Y+48	; 0x30
    14e4:	9c a7       	std	Y+44, r25	; 0x2c
    14e6:	8b a7       	std	Y+43, r24	; 0x2b
    14e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <LCD_sendCommand+0x528>
    14f0:	9c a7       	std	Y+44, r25	; 0x2c
    14f2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		setBit(LCD_CTRL_PORT,E);
    14f4:	a2 e3       	ldi	r26, 0x32	; 50
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e2 e3       	ldi	r30, 0x32	; 50
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 64       	ori	r24, 0x40	; 64
    1500:	8c 93       	st	X, r24
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 e8       	ldi	r26, 0x80	; 128
    1508:	bf e3       	ldi	r27, 0x3F	; 63
    150a:	8f a3       	std	Y+39, r24	; 0x27
    150c:	98 a7       	std	Y+40, r25	; 0x28
    150e:	a9 a7       	std	Y+41, r26	; 0x29
    1510:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1512:	6f a1       	ldd	r22, Y+39	; 0x27
    1514:	78 a5       	ldd	r23, Y+40	; 0x28
    1516:	89 a5       	ldd	r24, Y+41	; 0x29
    1518:	9a a5       	ldd	r25, Y+42	; 0x2a
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	4a e7       	ldi	r20, 0x7A	; 122
    1520:	53 e4       	ldi	r21, 0x43	; 67
    1522:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	8b a3       	std	Y+35, r24	; 0x23
    152c:	9c a3       	std	Y+36, r25	; 0x24
    152e:	ad a3       	std	Y+37, r26	; 0x25
    1530:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1532:	6b a1       	ldd	r22, Y+35	; 0x23
    1534:	7c a1       	ldd	r23, Y+36	; 0x24
    1536:	8d a1       	ldd	r24, Y+37	; 0x25
    1538:	9e a1       	ldd	r25, Y+38	; 0x26
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e8       	ldi	r20, 0x80	; 128
    1540:	5f e3       	ldi	r21, 0x3F	; 63
    1542:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1546:	88 23       	and	r24, r24
    1548:	2c f4       	brge	.+10     	; 0x1554 <LCD_sendCommand+0x590>
		__ticks = 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	9a a3       	std	Y+34, r25	; 0x22
    1550:	89 a3       	std	Y+33, r24	; 0x21
    1552:	3f c0       	rjmp	.+126    	; 0x15d2 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1554:	6b a1       	ldd	r22, Y+35	; 0x23
    1556:	7c a1       	ldd	r23, Y+36	; 0x24
    1558:	8d a1       	ldd	r24, Y+37	; 0x25
    155a:	9e a1       	ldd	r25, Y+38	; 0x26
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	3f ef       	ldi	r19, 0xFF	; 255
    1560:	4f e7       	ldi	r20, 0x7F	; 127
    1562:	57 e4       	ldi	r21, 0x47	; 71
    1564:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1568:	18 16       	cp	r1, r24
    156a:	4c f5       	brge	.+82     	; 0x15be <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156c:	6f a1       	ldd	r22, Y+39	; 0x27
    156e:	78 a5       	ldd	r23, Y+40	; 0x28
    1570:	89 a5       	ldd	r24, Y+41	; 0x29
    1572:	9a a5       	ldd	r25, Y+42	; 0x2a
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e2       	ldi	r20, 0x20	; 32
    157a:	51 e4       	ldi	r21, 0x41	; 65
    157c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	9a a3       	std	Y+34, r25	; 0x22
    1592:	89 a3       	std	Y+33, r24	; 0x21
    1594:	0f c0       	rjmp	.+30     	; 0x15b4 <LCD_sendCommand+0x5f0>
    1596:	89 e1       	ldi	r24, 0x19	; 25
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	98 a3       	std	Y+32, r25	; 0x20
    159c:	8f 8f       	std	Y+31, r24	; 0x1f
    159e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15a0:	98 a1       	ldd	r25, Y+32	; 0x20
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <LCD_sendCommand+0x5de>
    15a6:	98 a3       	std	Y+32, r25	; 0x20
    15a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15aa:	89 a1       	ldd	r24, Y+33	; 0x21
    15ac:	9a a1       	ldd	r25, Y+34	; 0x22
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	9a a3       	std	Y+34, r25	; 0x22
    15b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b4:	89 a1       	ldd	r24, Y+33	; 0x21
    15b6:	9a a1       	ldd	r25, Y+34	; 0x22
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	69 f7       	brne	.-38     	; 0x1596 <LCD_sendCommand+0x5d2>
    15bc:	14 c0       	rjmp	.+40     	; 0x15e6 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15be:	6b a1       	ldd	r22, Y+35	; 0x23
    15c0:	7c a1       	ldd	r23, Y+36	; 0x24
    15c2:	8d a1       	ldd	r24, Y+37	; 0x25
    15c4:	9e a1       	ldd	r25, Y+38	; 0x26
    15c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	9a a3       	std	Y+34, r25	; 0x22
    15d0:	89 a3       	std	Y+33, r24	; 0x21
    15d2:	89 a1       	ldd	r24, Y+33	; 0x21
    15d4:	9a a1       	ldd	r25, Y+34	; 0x22
    15d6:	9e 8f       	std	Y+30, r25	; 0x1e
    15d8:	8d 8f       	std	Y+29, r24	; 0x1d
    15da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <LCD_sendCommand+0x61a>
    15e2:	9e 8f       	std	Y+30, r25	; 0x1e
    15e4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | ((command&0x0f)<< 4);
    15e6:	a5 e3       	ldi	r26, 0x35	; 53
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e5 e3       	ldi	r30, 0x35	; 53
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	28 2f       	mov	r18, r24
    15f2:	2f 70       	andi	r18, 0x0F	; 15
    15f4:	fe 01       	movw	r30, r28
    15f6:	ed 59       	subi	r30, 0x9D	; 157
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	80 81       	ld	r24, Z
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	82 95       	swap	r24
    1602:	92 95       	swap	r25
    1604:	90 7f       	andi	r25, 0xF0	; 240
    1606:	98 27       	eor	r25, r24
    1608:	80 7f       	andi	r24, 0xF0	; 240
    160a:	98 27       	eor	r25, r24
    160c:	82 2b       	or	r24, r18
    160e:	8c 93       	st	X, r24
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	a0 e8       	ldi	r26, 0x80	; 128
    1616:	bf e3       	ldi	r27, 0x3F	; 63
    1618:	89 8f       	std	Y+25, r24	; 0x19
    161a:	9a 8f       	std	Y+26, r25	; 0x1a
    161c:	ab 8f       	std	Y+27, r26	; 0x1b
    161e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1620:	69 8d       	ldd	r22, Y+25	; 0x19
    1622:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1624:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1626:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	4a e7       	ldi	r20, 0x7A	; 122
    162e:	53 e4       	ldi	r21, 0x43	; 67
    1630:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	8d 8b       	std	Y+21, r24	; 0x15
    163a:	9e 8b       	std	Y+22, r25	; 0x16
    163c:	af 8b       	std	Y+23, r26	; 0x17
    163e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1640:	6d 89       	ldd	r22, Y+21	; 0x15
    1642:	7e 89       	ldd	r23, Y+22	; 0x16
    1644:	8f 89       	ldd	r24, Y+23	; 0x17
    1646:	98 8d       	ldd	r25, Y+24	; 0x18
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e8       	ldi	r20, 0x80	; 128
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1654:	88 23       	and	r24, r24
    1656:	2c f4       	brge	.+10     	; 0x1662 <LCD_sendCommand+0x69e>
		__ticks = 1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	9c 8b       	std	Y+20, r25	; 0x14
    165e:	8b 8b       	std	Y+19, r24	; 0x13
    1660:	3f c0       	rjmp	.+126    	; 0x16e0 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1662:	6d 89       	ldd	r22, Y+21	; 0x15
    1664:	7e 89       	ldd	r23, Y+22	; 0x16
    1666:	8f 89       	ldd	r24, Y+23	; 0x17
    1668:	98 8d       	ldd	r25, Y+24	; 0x18
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	3f ef       	ldi	r19, 0xFF	; 255
    166e:	4f e7       	ldi	r20, 0x7F	; 127
    1670:	57 e4       	ldi	r21, 0x47	; 71
    1672:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1676:	18 16       	cp	r1, r24
    1678:	4c f5       	brge	.+82     	; 0x16cc <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167a:	69 8d       	ldd	r22, Y+25	; 0x19
    167c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    167e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1680:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e2       	ldi	r20, 0x20	; 32
    1688:	51 e4       	ldi	r21, 0x41	; 65
    168a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9c 8b       	std	Y+20, r25	; 0x14
    16a0:	8b 8b       	std	Y+19, r24	; 0x13
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <LCD_sendCommand+0x6fe>
    16a4:	89 e1       	ldi	r24, 0x19	; 25
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	9a 8b       	std	Y+18, r25	; 0x12
    16aa:	89 8b       	std	Y+17, r24	; 0x11
    16ac:	89 89       	ldd	r24, Y+17	; 0x11
    16ae:	9a 89       	ldd	r25, Y+18	; 0x12
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <LCD_sendCommand+0x6ec>
    16b4:	9a 8b       	std	Y+18, r25	; 0x12
    16b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b8:	8b 89       	ldd	r24, Y+19	; 0x13
    16ba:	9c 89       	ldd	r25, Y+20	; 0x14
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	9c 8b       	std	Y+20, r25	; 0x14
    16c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c2:	8b 89       	ldd	r24, Y+19	; 0x13
    16c4:	9c 89       	ldd	r25, Y+20	; 0x14
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	69 f7       	brne	.-38     	; 0x16a4 <LCD_sendCommand+0x6e0>
    16ca:	14 c0       	rjmp	.+40     	; 0x16f4 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16cc:	6d 89       	ldd	r22, Y+21	; 0x15
    16ce:	7e 89       	ldd	r23, Y+22	; 0x16
    16d0:	8f 89       	ldd	r24, Y+23	; 0x17
    16d2:	98 8d       	ldd	r25, Y+24	; 0x18
    16d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	9c 8b       	std	Y+20, r25	; 0x14
    16de:	8b 8b       	std	Y+19, r24	; 0x13
    16e0:	8b 89       	ldd	r24, Y+19	; 0x13
    16e2:	9c 89       	ldd	r25, Y+20	; 0x14
    16e4:	98 8b       	std	Y+16, r25	; 0x10
    16e6:	8f 87       	std	Y+15, r24	; 0x0f
    16e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ea:	98 89       	ldd	r25, Y+16	; 0x10
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <LCD_sendCommand+0x728>
    16f0:	98 8b       	std	Y+16, r25	; 0x10
    16f2:	8f 87       	std	Y+15, r24	; 0x0f
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xf0) | (command & 0x0f);
		#endif
		_delay_ms(1);
		clearBit(LCD_CTRL_PORT,E);
    16f4:	a2 e3       	ldi	r26, 0x32	; 50
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e2 e3       	ldi	r30, 0x32	; 50
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	8f 7b       	andi	r24, 0xBF	; 191
    1700:	8c 93       	st	X, r24
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	a0 e8       	ldi	r26, 0x80	; 128
    1708:	bf e3       	ldi	r27, 0x3F	; 63
    170a:	8b 87       	std	Y+11, r24	; 0x0b
    170c:	9c 87       	std	Y+12, r25	; 0x0c
    170e:	ad 87       	std	Y+13, r26	; 0x0d
    1710:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1712:	6b 85       	ldd	r22, Y+11	; 0x0b
    1714:	7c 85       	ldd	r23, Y+12	; 0x0c
    1716:	8d 85       	ldd	r24, Y+13	; 0x0d
    1718:	9e 85       	ldd	r25, Y+14	; 0x0e
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	4a e7       	ldi	r20, 0x7A	; 122
    1720:	53 e4       	ldi	r21, 0x43	; 67
    1722:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	8f 83       	std	Y+7, r24	; 0x07
    172c:	98 87       	std	Y+8, r25	; 0x08
    172e:	a9 87       	std	Y+9, r26	; 0x09
    1730:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1732:	6f 81       	ldd	r22, Y+7	; 0x07
    1734:	78 85       	ldd	r23, Y+8	; 0x08
    1736:	89 85       	ldd	r24, Y+9	; 0x09
    1738:	9a 85       	ldd	r25, Y+10	; 0x0a
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	5f e3       	ldi	r21, 0x3F	; 63
    1742:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1746:	88 23       	and	r24, r24
    1748:	2c f4       	brge	.+10     	; 0x1754 <LCD_sendCommand+0x790>
		__ticks = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
    1752:	3f c0       	rjmp	.+126    	; 0x17d2 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1754:	6f 81       	ldd	r22, Y+7	; 0x07
    1756:	78 85       	ldd	r23, Y+8	; 0x08
    1758:	89 85       	ldd	r24, Y+9	; 0x09
    175a:	9a 85       	ldd	r25, Y+10	; 0x0a
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	57 e4       	ldi	r21, 0x47	; 71
    1764:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	4c f5       	brge	.+82     	; 0x17be <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	6b 85       	ldd	r22, Y+11	; 0x0b
    176e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1770:	8d 85       	ldd	r24, Y+13	; 0x0d
    1772:	9e 85       	ldd	r25, Y+14	; 0x0e
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e2       	ldi	r20, 0x20	; 32
    177a:	51 e4       	ldi	r21, 0x41	; 65
    177c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	8d 83       	std	Y+5, r24	; 0x05
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <LCD_sendCommand+0x7f0>
    1796:	89 e1       	ldi	r24, 0x19	; 25
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9c 83       	std	Y+4, r25	; 0x04
    179c:	8b 83       	std	Y+3, r24	; 0x03
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	9c 81       	ldd	r25, Y+4	; 0x04
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <LCD_sendCommand+0x7de>
    17a6:	9c 83       	std	Y+4, r25	; 0x04
    17a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	9e 81       	ldd	r25, Y+6	; 0x06
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	69 f7       	brne	.-38     	; 0x1796 <LCD_sendCommand+0x7d2>
    17bc:	14 c0       	rjmp	.+40     	; 0x17e6 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17be:	6f 81       	ldd	r22, Y+7	; 0x07
    17c0:	78 85       	ldd	r23, Y+8	; 0x08
    17c2:	89 85       	ldd	r24, Y+9	; 0x09
    17c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	9e 83       	std	Y+6, r25	; 0x06
    17d0:	8d 83       	std	Y+5, r24	; 0x05
    17d2:	8d 81       	ldd	r24, Y+5	; 0x05
    17d4:	9e 81       	ldd	r25, Y+6	; 0x06
    17d6:	9a 83       	std	Y+2, r25	; 0x02
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_sendCommand+0x81a>
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = command;
		_delay_ms(1);
		clearBit(LCD_CTRL_PORT,E);
		_delay_ms(1);
	#endif
}
    17e6:	cd 59       	subi	r28, 0x9D	; 157
    17e8:	df 4f       	sbci	r29, 0xFF	; 255
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	08 95       	ret

000017fe <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data){
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	c3 56       	subi	r28, 0x63	; 99
    180c:	d0 40       	sbci	r29, 0x00	; 0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	fe 01       	movw	r30, r28
    181a:	ed 59       	subi	r30, 0x9D	; 157
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 83       	st	Z, r24
	setBit(LCD_CTRL_PORT,RS);
    1820:	a2 e3       	ldi	r26, 0x32	; 50
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e2 e3       	ldi	r30, 0x32	; 50
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	80 61       	ori	r24, 0x10	; 16
    182c:	8c 93       	st	X, r24
	clearBit(LCD_CTRL_PORT,RW);
    182e:	a2 e3       	ldi	r26, 0x32	; 50
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e2 e3       	ldi	r30, 0x32	; 50
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	8f 7d       	andi	r24, 0xDF	; 223
    183a:	8c 93       	st	X, r24
    183c:	fe 01       	movw	r30, r28
    183e:	e1 5a       	subi	r30, 0xA1	; 161
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	a0 e8       	ldi	r26, 0x80	; 128
    1848:	bf e3       	ldi	r27, 0x3F	; 63
    184a:	80 83       	st	Z, r24
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	a2 83       	std	Z+2, r26	; 0x02
    1850:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1852:	8e 01       	movw	r16, r28
    1854:	05 5a       	subi	r16, 0xA5	; 165
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	fe 01       	movw	r30, r28
    185a:	e1 5a       	subi	r30, 0xA1	; 161
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	4a e7       	ldi	r20, 0x7A	; 122
    186c:	53 e4       	ldi	r21, 0x43	; 67
    186e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	f8 01       	movw	r30, r16
    1878:	80 83       	st	Z, r24
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	a2 83       	std	Z+2, r26	; 0x02
    187e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1880:	fe 01       	movw	r30, r28
    1882:	e5 5a       	subi	r30, 0xA5	; 165
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e8       	ldi	r20, 0x80	; 128
    1894:	5f e3       	ldi	r21, 0x3F	; 63
    1896:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    189a:	88 23       	and	r24, r24
    189c:	44 f4       	brge	.+16     	; 0x18ae <LCD_displayCharacter+0xb0>
		__ticks = 1;
    189e:	fe 01       	movw	r30, r28
    18a0:	e7 5a       	subi	r30, 0xA7	; 167
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24
    18ac:	64 c0       	rjmp	.+200    	; 0x1976 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    18ae:	fe 01       	movw	r30, r28
    18b0:	e5 5a       	subi	r30, 0xA5	; 165
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	3f ef       	ldi	r19, 0xFF	; 255
    18c0:	4f e7       	ldi	r20, 0x7F	; 127
    18c2:	57 e4       	ldi	r21, 0x47	; 71
    18c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18c8:	18 16       	cp	r1, r24
    18ca:	0c f0       	brlt	.+2      	; 0x18ce <LCD_displayCharacter+0xd0>
    18cc:	43 c0       	rjmp	.+134    	; 0x1954 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ce:	fe 01       	movw	r30, r28
    18d0:	e1 5a       	subi	r30, 0xA1	; 161
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	60 81       	ld	r22, Z
    18d6:	71 81       	ldd	r23, Z+1	; 0x01
    18d8:	82 81       	ldd	r24, Z+2	; 0x02
    18da:	93 81       	ldd	r25, Z+3	; 0x03
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e2       	ldi	r20, 0x20	; 32
    18e2:	51 e4       	ldi	r21, 0x41	; 65
    18e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	8e 01       	movw	r16, r28
    18ee:	07 5a       	subi	r16, 0xA7	; 167
    18f0:	1f 4f       	sbci	r17, 0xFF	; 255
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	f8 01       	movw	r30, r16
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	80 83       	st	Z, r24
    1904:	1f c0       	rjmp	.+62     	; 0x1944 <LCD_displayCharacter+0x146>
    1906:	fe 01       	movw	r30, r28
    1908:	e9 5a       	subi	r30, 0xA9	; 169
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	89 e1       	ldi	r24, 0x19	; 25
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	80 83       	st	Z, r24
    1914:	fe 01       	movw	r30, r28
    1916:	e9 5a       	subi	r30, 0xA9	; 169
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 81       	ld	r24, Z
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_displayCharacter+0x120>
    1922:	fe 01       	movw	r30, r28
    1924:	e9 5a       	subi	r30, 0xA9	; 169
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192c:	de 01       	movw	r26, r28
    192e:	a7 5a       	subi	r26, 0xA7	; 167
    1930:	bf 4f       	sbci	r27, 0xFF	; 255
    1932:	fe 01       	movw	r30, r28
    1934:	e7 5a       	subi	r30, 0xA7	; 167
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	11 96       	adiw	r26, 0x01	; 1
    1940:	9c 93       	st	X, r25
    1942:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1944:	fe 01       	movw	r30, r28
    1946:	e7 5a       	subi	r30, 0xA7	; 167
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	80 81       	ld	r24, Z
    194c:	91 81       	ldd	r25, Z+1	; 0x01
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	d1 f6       	brne	.-76     	; 0x1906 <LCD_displayCharacter+0x108>
    1952:	27 c0       	rjmp	.+78     	; 0x19a2 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1954:	8e 01       	movw	r16, r28
    1956:	07 5a       	subi	r16, 0xA7	; 167
    1958:	1f 4f       	sbci	r17, 0xFF	; 255
    195a:	fe 01       	movw	r30, r28
    195c:	e5 5a       	subi	r30, 0xA5	; 165
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	60 81       	ld	r22, Z
    1962:	71 81       	ldd	r23, Z+1	; 0x01
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	93 81       	ldd	r25, Z+3	; 0x03
    1968:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	f8 01       	movw	r30, r16
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
    1976:	de 01       	movw	r26, r28
    1978:	ab 5a       	subi	r26, 0xAB	; 171
    197a:	bf 4f       	sbci	r27, 0xFF	; 255
    197c:	fe 01       	movw	r30, r28
    197e:	e7 5a       	subi	r30, 0xA7	; 167
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	80 81       	ld	r24, Z
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	8d 93       	st	X+, r24
    1988:	9c 93       	st	X, r25
    198a:	fe 01       	movw	r30, r28
    198c:	eb 5a       	subi	r30, 0xAB	; 171
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 81       	ld	r24, Z
    1992:	91 81       	ldd	r25, Z+1	; 0x01
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_displayCharacter+0x196>
    1998:	fe 01       	movw	r30, r28
    199a:	eb 5a       	subi	r30, 0xAB	; 171
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
	_delay_ms(1);
	setBit(LCD_CTRL_PORT,E);
    19a2:	a2 e3       	ldi	r26, 0x32	; 50
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e2 e3       	ldi	r30, 0x32	; 50
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	80 64       	ori	r24, 0x40	; 64
    19ae:	8c 93       	st	X, r24
    19b0:	fe 01       	movw	r30, r28
    19b2:	ef 5a       	subi	r30, 0xAF	; 175
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a0 e8       	ldi	r26, 0x80	; 128
    19bc:	bf e3       	ldi	r27, 0x3F	; 63
    19be:	80 83       	st	Z, r24
    19c0:	91 83       	std	Z+1, r25	; 0x01
    19c2:	a2 83       	std	Z+2, r26	; 0x02
    19c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c6:	8e 01       	movw	r16, r28
    19c8:	03 5b       	subi	r16, 0xB3	; 179
    19ca:	1f 4f       	sbci	r17, 0xFF	; 255
    19cc:	fe 01       	movw	r30, r28
    19ce:	ef 5a       	subi	r30, 0xAF	; 175
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	4a e7       	ldi	r20, 0x7A	; 122
    19e0:	53 e4       	ldi	r21, 0x43	; 67
    19e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	f8 01       	movw	r30, r16
    19ec:	80 83       	st	Z, r24
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	a2 83       	std	Z+2, r26	; 0x02
    19f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19f4:	fe 01       	movw	r30, r28
    19f6:	e3 5b       	subi	r30, 0xB3	; 179
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e8       	ldi	r20, 0x80	; 128
    1a08:	5f e3       	ldi	r21, 0x3F	; 63
    1a0a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a0e:	88 23       	and	r24, r24
    1a10:	44 f4       	brge	.+16     	; 0x1a22 <LCD_displayCharacter+0x224>
		__ticks = 1;
    1a12:	fe 01       	movw	r30, r28
    1a14:	e5 5b       	subi	r30, 0xB5	; 181
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	80 83       	st	Z, r24
    1a20:	64 c0       	rjmp	.+200    	; 0x1aea <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1a22:	fe 01       	movw	r30, r28
    1a24:	e3 5b       	subi	r30, 0xB3	; 179
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	3f ef       	ldi	r19, 0xFF	; 255
    1a34:	4f e7       	ldi	r20, 0x7F	; 127
    1a36:	57 e4       	ldi	r21, 0x47	; 71
    1a38:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a3c:	18 16       	cp	r1, r24
    1a3e:	0c f0       	brlt	.+2      	; 0x1a42 <LCD_displayCharacter+0x244>
    1a40:	43 c0       	rjmp	.+134    	; 0x1ac8 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a42:	fe 01       	movw	r30, r28
    1a44:	ef 5a       	subi	r30, 0xAF	; 175
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	60 81       	ld	r22, Z
    1a4a:	71 81       	ldd	r23, Z+1	; 0x01
    1a4c:	82 81       	ldd	r24, Z+2	; 0x02
    1a4e:	93 81       	ldd	r25, Z+3	; 0x03
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e2       	ldi	r20, 0x20	; 32
    1a56:	51 e4       	ldi	r21, 0x41	; 65
    1a58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	8e 01       	movw	r16, r28
    1a62:	05 5b       	subi	r16, 0xB5	; 181
    1a64:	1f 4f       	sbci	r17, 0xFF	; 255
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	f8 01       	movw	r30, r16
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	80 83       	st	Z, r24
    1a78:	1f c0       	rjmp	.+62     	; 0x1ab8 <LCD_displayCharacter+0x2ba>
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e7 5b       	subi	r30, 0xB7	; 183
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	89 e1       	ldi	r24, 0x19	; 25
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e7 5b       	subi	r30, 0xB7	; 183
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	80 81       	ld	r24, Z
    1a90:	91 81       	ldd	r25, Z+1	; 0x01
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_displayCharacter+0x294>
    1a96:	fe 01       	movw	r30, r28
    1a98:	e7 5b       	subi	r30, 0xB7	; 183
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa0:	de 01       	movw	r26, r28
    1aa2:	a5 5b       	subi	r26, 0xB5	; 181
    1aa4:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e5 5b       	subi	r30, 0xB5	; 181
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	11 96       	adiw	r26, 0x01	; 1
    1ab4:	9c 93       	st	X, r25
    1ab6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e5 5b       	subi	r30, 0xB5	; 181
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	80 81       	ld	r24, Z
    1ac0:	91 81       	ldd	r25, Z+1	; 0x01
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	d1 f6       	brne	.-76     	; 0x1a7a <LCD_displayCharacter+0x27c>
    1ac6:	27 c0       	rjmp	.+78     	; 0x1b16 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac8:	8e 01       	movw	r16, r28
    1aca:	05 5b       	subi	r16, 0xB5	; 181
    1acc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e3 5b       	subi	r30, 0xB3	; 179
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	f8 01       	movw	r30, r16
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	80 83       	st	Z, r24
    1aea:	de 01       	movw	r26, r28
    1aec:	a9 5b       	subi	r26, 0xB9	; 185
    1aee:	bf 4f       	sbci	r27, 0xFF	; 255
    1af0:	fe 01       	movw	r30, r28
    1af2:	e5 5b       	subi	r30, 0xB5	; 181
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	8d 93       	st	X+, r24
    1afc:	9c 93       	st	X, r25
    1afe:	fe 01       	movw	r30, r28
    1b00:	e9 5b       	subi	r30, 0xB9	; 185
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	80 81       	ld	r24, Z
    1b06:	91 81       	ldd	r25, Z+1	; 0x01
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <LCD_displayCharacter+0x30a>
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e9 5b       	subi	r30, 0xB9	; 185
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
	_delay_ms(1);
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | (data&0xf0);
    1b16:	a5 e3       	ldi	r26, 0x35	; 53
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e5 e3       	ldi	r30, 0x35	; 53
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	98 2f       	mov	r25, r24
    1b22:	9f 70       	andi	r25, 0x0F	; 15
    1b24:	fe 01       	movw	r30, r28
    1b26:	ed 59       	subi	r30, 0x9D	; 157
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	80 81       	ld	r24, Z
    1b2c:	80 7f       	andi	r24, 0xF0	; 240
    1b2e:	89 2b       	or	r24, r25
    1b30:	8c 93       	st	X, r24
    1b32:	fe 01       	movw	r30, r28
    1b34:	ed 5b       	subi	r30, 0xBD	; 189
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a0 e8       	ldi	r26, 0x80	; 128
    1b3e:	bf e3       	ldi	r27, 0x3F	; 63
    1b40:	80 83       	st	Z, r24
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	a2 83       	std	Z+2, r26	; 0x02
    1b46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b48:	8e 01       	movw	r16, r28
    1b4a:	01 5c       	subi	r16, 0xC1	; 193
    1b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4e:	fe 01       	movw	r30, r28
    1b50:	ed 5b       	subi	r30, 0xBD	; 189
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4a e7       	ldi	r20, 0x7A	; 122
    1b62:	53 e4       	ldi	r21, 0x43	; 67
    1b64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	80 83       	st	Z, r24
    1b70:	91 83       	std	Z+1, r25	; 0x01
    1b72:	a2 83       	std	Z+2, r26	; 0x02
    1b74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b76:	fe 01       	movw	r30, r28
    1b78:	ff 96       	adiw	r30, 0x3f	; 63
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e8       	ldi	r20, 0x80	; 128
    1b88:	5f e3       	ldi	r21, 0x3F	; 63
    1b8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b8e:	88 23       	and	r24, r24
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9e af       	std	Y+62, r25	; 0x3e
    1b98:	8d af       	std	Y+61, r24	; 0x3d
    1b9a:	46 c0       	rjmp	.+140    	; 0x1c28 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	ff 96       	adiw	r30, 0x3f	; 63
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	3f ef       	ldi	r19, 0xFF	; 255
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	57 e4       	ldi	r21, 0x47	; 71
    1bb0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	64 f5       	brge	.+88     	; 0x1c10 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	fe 01       	movw	r30, r28
    1bba:	ed 5b       	subi	r30, 0xBD	; 189
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e2       	ldi	r20, 0x20	; 32
    1bcc:	51 e4       	ldi	r21, 0x41	; 65
    1bce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	cd 01       	movw	r24, r26
    1bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9e af       	std	Y+62, r25	; 0x3e
    1be4:	8d af       	std	Y+61, r24	; 0x3d
    1be6:	0f c0       	rjmp	.+30     	; 0x1c06 <LCD_displayCharacter+0x408>
    1be8:	89 e1       	ldi	r24, 0x19	; 25
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9c af       	std	Y+60, r25	; 0x3c
    1bee:	8b af       	std	Y+59, r24	; 0x3b
    1bf0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bf2:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <LCD_displayCharacter+0x3f6>
    1bf8:	9c af       	std	Y+60, r25	; 0x3c
    1bfa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bfe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	9e af       	std	Y+62, r25	; 0x3e
    1c04:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c06:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c08:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	69 f7       	brne	.-38     	; 0x1be8 <LCD_displayCharacter+0x3ea>
    1c0e:	16 c0       	rjmp	.+44     	; 0x1c3c <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c10:	fe 01       	movw	r30, r28
    1c12:	ff 96       	adiw	r30, 0x3f	; 63
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9e af       	std	Y+62, r25	; 0x3e
    1c26:	8d af       	std	Y+61, r24	; 0x3d
    1c28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c2c:	9a af       	std	Y+58, r25	; 0x3a
    1c2e:	89 af       	std	Y+57, r24	; 0x39
    1c30:	89 ad       	ldd	r24, Y+57	; 0x39
    1c32:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <LCD_displayCharacter+0x436>
    1c38:	9a af       	std	Y+58, r25	; 0x3a
    1c3a:	89 af       	std	Y+57, r24	; 0x39
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xf0) | ((data&0xf0)>>4);
		#endif
			_delay_ms(1);
			clearBit(LCD_CTRL_PORT,E);
    1c3c:	a2 e3       	ldi	r26, 0x32	; 50
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e2 e3       	ldi	r30, 0x32	; 50
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8f 7b       	andi	r24, 0xBF	; 191
    1c48:	8c 93       	st	X, r24
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a0 e8       	ldi	r26, 0x80	; 128
    1c50:	bf e3       	ldi	r27, 0x3F	; 63
    1c52:	8d ab       	std	Y+53, r24	; 0x35
    1c54:	9e ab       	std	Y+54, r25	; 0x36
    1c56:	af ab       	std	Y+55, r26	; 0x37
    1c58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c5c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c60:	98 ad       	ldd	r25, Y+56	; 0x38
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	4a e7       	ldi	r20, 0x7A	; 122
    1c68:	53 e4       	ldi	r21, 0x43	; 67
    1c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	89 ab       	std	Y+49, r24	; 0x31
    1c74:	9a ab       	std	Y+50, r25	; 0x32
    1c76:	ab ab       	std	Y+51, r26	; 0x33
    1c78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c80:	9c a9       	ldd	r25, Y+52	; 0x34
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e8       	ldi	r20, 0x80	; 128
    1c88:	5f e3       	ldi	r21, 0x3F	; 63
    1c8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c8e:	88 23       	and	r24, r24
    1c90:	2c f4       	brge	.+10     	; 0x1c9c <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	98 ab       	std	Y+48, r25	; 0x30
    1c98:	8f a7       	std	Y+47, r24	; 0x2f
    1c9a:	3f c0       	rjmp	.+126    	; 0x1d1a <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1c9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	3f ef       	ldi	r19, 0xFF	; 255
    1ca8:	4f e7       	ldi	r20, 0x7F	; 127
    1caa:	57 e4       	ldi	r21, 0x47	; 71
    1cac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cb0:	18 16       	cp	r1, r24
    1cb2:	4c f5       	brge	.+82     	; 0x1d06 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb4:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb6:	7e a9       	ldd	r23, Y+54	; 0x36
    1cb8:	8f a9       	ldd	r24, Y+55	; 0x37
    1cba:	98 ad       	ldd	r25, Y+56	; 0x38
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e2       	ldi	r20, 0x20	; 32
    1cc2:	51 e4       	ldi	r21, 0x41	; 65
    1cc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	98 ab       	std	Y+48, r25	; 0x30
    1cda:	8f a7       	std	Y+47, r24	; 0x2f
    1cdc:	0f c0       	rjmp	.+30     	; 0x1cfc <LCD_displayCharacter+0x4fe>
    1cde:	89 e1       	ldi	r24, 0x19	; 25
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9e a7       	std	Y+46, r25	; 0x2e
    1ce4:	8d a7       	std	Y+45, r24	; 0x2d
    1ce6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ce8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <LCD_displayCharacter+0x4ec>
    1cee:	9e a7       	std	Y+46, r25	; 0x2e
    1cf0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf4:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	98 ab       	std	Y+48, r25	; 0x30
    1cfa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cfe:	98 a9       	ldd	r25, Y+48	; 0x30
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	69 f7       	brne	.-38     	; 0x1cde <LCD_displayCharacter+0x4e0>
    1d04:	14 c0       	rjmp	.+40     	; 0x1d2e <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d06:	69 a9       	ldd	r22, Y+49	; 0x31
    1d08:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	98 ab       	std	Y+48, r25	; 0x30
    1d18:	8f a7       	std	Y+47, r24	; 0x2f
    1d1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1e:	9c a7       	std	Y+44, r25	; 0x2c
    1d20:	8b a7       	std	Y+43, r24	; 0x2b
    1d22:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d24:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <LCD_displayCharacter+0x528>
    1d2a:	9c a7       	std	Y+44, r25	; 0x2c
    1d2c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			setBit(LCD_CTRL_PORT,E);
    1d2e:	a2 e3       	ldi	r26, 0x32	; 50
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e2 e3       	ldi	r30, 0x32	; 50
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	80 64       	ori	r24, 0x40	; 64
    1d3a:	8c 93       	st	X, r24
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	a0 e8       	ldi	r26, 0x80	; 128
    1d42:	bf e3       	ldi	r27, 0x3F	; 63
    1d44:	8f a3       	std	Y+39, r24	; 0x27
    1d46:	98 a7       	std	Y+40, r25	; 0x28
    1d48:	a9 a7       	std	Y+41, r26	; 0x29
    1d4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d4e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d50:	89 a5       	ldd	r24, Y+41	; 0x29
    1d52:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4a e7       	ldi	r20, 0x7A	; 122
    1d5a:	53 e4       	ldi	r21, 0x43	; 67
    1d5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	8b a3       	std	Y+35, r24	; 0x23
    1d66:	9c a3       	std	Y+36, r25	; 0x24
    1d68:	ad a3       	std	Y+37, r26	; 0x25
    1d6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d70:	8d a1       	ldd	r24, Y+37	; 0x25
    1d72:	9e a1       	ldd	r25, Y+38	; 0x26
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f e3       	ldi	r21, 0x3F	; 63
    1d7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d80:	88 23       	and	r24, r24
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <LCD_displayCharacter+0x590>
		__ticks = 1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9a a3       	std	Y+34, r25	; 0x22
    1d8a:	89 a3       	std	Y+33, r24	; 0x21
    1d8c:	3f c0       	rjmp	.+126    	; 0x1e0c <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1d8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d90:	7c a1       	ldd	r23, Y+36	; 0x24
    1d92:	8d a1       	ldd	r24, Y+37	; 0x25
    1d94:	9e a1       	ldd	r25, Y+38	; 0x26
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	3f ef       	ldi	r19, 0xFF	; 255
    1d9a:	4f e7       	ldi	r20, 0x7F	; 127
    1d9c:	57 e4       	ldi	r21, 0x47	; 71
    1d9e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	4c f5       	brge	.+82     	; 0x1df8 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da6:	6f a1       	ldd	r22, Y+39	; 0x27
    1da8:	78 a5       	ldd	r23, Y+40	; 0x28
    1daa:	89 a5       	ldd	r24, Y+41	; 0x29
    1dac:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e2       	ldi	r20, 0x20	; 32
    1db4:	51 e4       	ldi	r21, 0x41	; 65
    1db6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9a a3       	std	Y+34, r25	; 0x22
    1dcc:	89 a3       	std	Y+33, r24	; 0x21
    1dce:	0f c0       	rjmp	.+30     	; 0x1dee <LCD_displayCharacter+0x5f0>
    1dd0:	89 e1       	ldi	r24, 0x19	; 25
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	98 a3       	std	Y+32, r25	; 0x20
    1dd6:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dda:	98 a1       	ldd	r25, Y+32	; 0x20
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <LCD_displayCharacter+0x5de>
    1de0:	98 a3       	std	Y+32, r25	; 0x20
    1de2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de4:	89 a1       	ldd	r24, Y+33	; 0x21
    1de6:	9a a1       	ldd	r25, Y+34	; 0x22
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	9a a3       	std	Y+34, r25	; 0x22
    1dec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dee:	89 a1       	ldd	r24, Y+33	; 0x21
    1df0:	9a a1       	ldd	r25, Y+34	; 0x22
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	69 f7       	brne	.-38     	; 0x1dd0 <LCD_displayCharacter+0x5d2>
    1df6:	14 c0       	rjmp	.+40     	; 0x1e20 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1dfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1e00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9a a3       	std	Y+34, r25	; 0x22
    1e0a:	89 a3       	std	Y+33, r24	; 0x21
    1e0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e10:	9e 8f       	std	Y+30, r25	; 0x1e
    1e12:	8d 8f       	std	Y+29, r24	; 0x1d
    1e14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_displayCharacter+0x61a>
    1e1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e1e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | ((data&0x0f)<<4);
    1e20:	a5 e3       	ldi	r26, 0x35	; 53
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e5 e3       	ldi	r30, 0x35	; 53
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	2f 70       	andi	r18, 0x0F	; 15
    1e2e:	fe 01       	movw	r30, r28
    1e30:	ed 59       	subi	r30, 0x9D	; 157
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	80 81       	ld	r24, Z
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	82 95       	swap	r24
    1e3c:	92 95       	swap	r25
    1e3e:	90 7f       	andi	r25, 0xF0	; 240
    1e40:	98 27       	eor	r25, r24
    1e42:	80 7f       	andi	r24, 0xF0	; 240
    1e44:	98 27       	eor	r25, r24
    1e46:	82 2b       	or	r24, r18
    1e48:	8c 93       	st	X, r24
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a0 e8       	ldi	r26, 0x80	; 128
    1e50:	bf e3       	ldi	r27, 0x3F	; 63
    1e52:	89 8f       	std	Y+25, r24	; 0x19
    1e54:	9a 8f       	std	Y+26, r25	; 0x1a
    1e56:	ab 8f       	std	Y+27, r26	; 0x1b
    1e58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	4a e7       	ldi	r20, 0x7A	; 122
    1e68:	53 e4       	ldi	r21, 0x43	; 67
    1e6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	8d 8b       	std	Y+21, r24	; 0x15
    1e74:	9e 8b       	std	Y+22, r25	; 0x16
    1e76:	af 8b       	std	Y+23, r26	; 0x17
    1e78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e80:	98 8d       	ldd	r25, Y+24	; 0x18
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e8       	ldi	r20, 0x80	; 128
    1e88:	5f e3       	ldi	r21, 0x3F	; 63
    1e8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e8e:	88 23       	and	r24, r24
    1e90:	2c f4       	brge	.+10     	; 0x1e9c <LCD_displayCharacter+0x69e>
		__ticks = 1;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	9c 8b       	std	Y+20, r25	; 0x14
    1e98:	8b 8b       	std	Y+19, r24	; 0x13
    1e9a:	3f c0       	rjmp	.+126    	; 0x1f1a <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    1e9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	3f ef       	ldi	r19, 0xFF	; 255
    1ea8:	4f e7       	ldi	r20, 0x7F	; 127
    1eaa:	57 e4       	ldi	r21, 0x47	; 71
    1eac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eb0:	18 16       	cp	r1, r24
    1eb2:	4c f5       	brge	.+82     	; 0x1f06 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb4:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e2       	ldi	r20, 0x20	; 32
    1ec2:	51 e4       	ldi	r21, 0x41	; 65
    1ec4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	bc 01       	movw	r22, r24
    1ece:	cd 01       	movw	r24, r26
    1ed0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	9c 8b       	std	Y+20, r25	; 0x14
    1eda:	8b 8b       	std	Y+19, r24	; 0x13
    1edc:	0f c0       	rjmp	.+30     	; 0x1efc <LCD_displayCharacter+0x6fe>
    1ede:	89 e1       	ldi	r24, 0x19	; 25
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9a 8b       	std	Y+18, r25	; 0x12
    1ee4:	89 8b       	std	Y+17, r24	; 0x11
    1ee6:	89 89       	ldd	r24, Y+17	; 0x11
    1ee8:	9a 89       	ldd	r25, Y+18	; 0x12
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <LCD_displayCharacter+0x6ec>
    1eee:	9a 8b       	std	Y+18, r25	; 0x12
    1ef0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	9c 8b       	std	Y+20, r25	; 0x14
    1efa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efc:	8b 89       	ldd	r24, Y+19	; 0x13
    1efe:	9c 89       	ldd	r25, Y+20	; 0x14
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	69 f7       	brne	.-38     	; 0x1ede <LCD_displayCharacter+0x6e0>
    1f04:	14 c0       	rjmp	.+40     	; 0x1f2e <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f06:	6d 89       	ldd	r22, Y+21	; 0x15
    1f08:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	9c 8b       	std	Y+20, r25	; 0x14
    1f18:	8b 8b       	std	Y+19, r24	; 0x13
    1f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1e:	98 8b       	std	Y+16, r25	; 0x10
    1f20:	8f 87       	std	Y+15, r24	; 0x0f
    1f22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f24:	98 89       	ldd	r25, Y+16	; 0x10
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <LCD_displayCharacter+0x728>
    1f2a:	98 8b       	std	Y+16, r25	; 0x10
    1f2c:	8f 87       	std	Y+15, r24	; 0x0f
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xf0) | (data&0x0f);
		#endif
		_delay_ms(1);
		clearBit(LCD_CTRL_PORT,E);
    1f2e:	a2 e3       	ldi	r26, 0x32	; 50
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e2 e3       	ldi	r30, 0x32	; 50
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	8f 7b       	andi	r24, 0xBF	; 191
    1f3a:	8c 93       	st	X, r24
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a0 e8       	ldi	r26, 0x80	; 128
    1f42:	bf e3       	ldi	r27, 0x3F	; 63
    1f44:	8b 87       	std	Y+11, r24	; 0x0b
    1f46:	9c 87       	std	Y+12, r25	; 0x0c
    1f48:	ad 87       	std	Y+13, r26	; 0x0d
    1f4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	4a e7       	ldi	r20, 0x7A	; 122
    1f5a:	53 e4       	ldi	r21, 0x43	; 67
    1f5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	8f 83       	std	Y+7, r24	; 0x07
    1f66:	98 87       	std	Y+8, r25	; 0x08
    1f68:	a9 87       	std	Y+9, r26	; 0x09
    1f6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e8       	ldi	r20, 0x80	; 128
    1f7a:	5f e3       	ldi	r21, 0x3F	; 63
    1f7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f80:	88 23       	and	r24, r24
    1f82:	2c f4       	brge	.+10     	; 0x1f8e <LCD_displayCharacter+0x790>
		__ticks = 1;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	9e 83       	std	Y+6, r25	; 0x06
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
    1f8c:	3f c0       	rjmp	.+126    	; 0x200c <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    1f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f90:	78 85       	ldd	r23, Y+8	; 0x08
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	3f ef       	ldi	r19, 0xFF	; 255
    1f9a:	4f e7       	ldi	r20, 0x7F	; 127
    1f9c:	57 e4       	ldi	r21, 0x47	; 71
    1f9e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fa2:	18 16       	cp	r1, r24
    1fa4:	4c f5       	brge	.+82     	; 0x1ff8 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1faa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e2       	ldi	r20, 0x20	; 32
    1fb4:	51 e4       	ldi	r21, 0x41	; 65
    1fb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
    1fce:	0f c0       	rjmp	.+30     	; 0x1fee <LCD_displayCharacter+0x7f0>
    1fd0:	89 e1       	ldi	r24, 0x19	; 25
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9c 83       	std	Y+4, r25	; 0x04
    1fd6:	8b 83       	std	Y+3, r24	; 0x03
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	9c 81       	ldd	r25, Y+4	; 0x04
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_displayCharacter+0x7de>
    1fe0:	9c 83       	std	Y+4, r25	; 0x04
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	69 f7       	brne	.-38     	; 0x1fd0 <LCD_displayCharacter+0x7d2>
    1ff6:	14 c0       	rjmp	.+40     	; 0x2020 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffa:	78 85       	ldd	r23, Y+8	; 0x08
    1ffc:	89 85       	ldd	r24, Y+9	; 0x09
    1ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2000:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	9e 83       	std	Y+6, r25	; 0x06
    200a:	8d 83       	std	Y+5, r24	; 0x05
    200c:	8d 81       	ldd	r24, Y+5	; 0x05
    200e:	9e 81       	ldd	r25, Y+6	; 0x06
    2010:	9a 83       	std	Y+2, r25	; 0x02
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	9a 81       	ldd	r25, Y+2	; 0x02
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <LCD_displayCharacter+0x81a>
    201c:	9a 83       	std	Y+2, r25	; 0x02
    201e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		clearBit(LCD_CTRL_PORT,E);
		_delay_ms(1);
	#endif

}
    2020:	cd 59       	subi	r28, 0x9D	; 157
    2022:	df 4f       	sbci	r29, 0xFF	; 255
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	08 95       	ret

00002038 <LCD_displayString>:
void LCD_displayString(const char *Str){
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	00 d0       	rcall	.+0      	; 0x203e <LCD_displayString+0x6>
    203e:	0f 92       	push	r0
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	9b 83       	std	Y+3, r25	; 0x03
    2046:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2048:	19 82       	std	Y+1, r1	; 0x01
    204a:	0e c0       	rjmp	.+28     	; 0x2068 <LCD_displayString+0x30>
	while(Str[i] != '\0'){
		LCD_displayCharacter(Str[i]);
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	9b 81       	ldd	r25, Y+3	; 0x03
    2056:	fc 01       	movw	r30, r24
    2058:	e2 0f       	add	r30, r18
    205a:	f3 1f       	adc	r31, r19
    205c:	80 81       	ld	r24, Z
    205e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <LCD_displayCharacter>
		i++;
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	8f 5f       	subi	r24, 0xFF	; 255
    2066:	89 83       	std	Y+1, r24	; 0x01
	#endif

}
void LCD_displayString(const char *Str){
	uint8 i = 0;
	while(Str[i] != '\0'){
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	9b 81       	ldd	r25, Y+3	; 0x03
    2072:	fc 01       	movw	r30, r24
    2074:	e2 0f       	add	r30, r18
    2076:	f3 1f       	adc	r31, r19
    2078:	80 81       	ld	r24, Z
    207a:	88 23       	and	r24, r24
    207c:	39 f7       	brne	.-50     	; 0x204c <LCD_displayString+0x14>
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col){
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <LCD_goToRowColumn+0x6>
    2090:	00 d0       	rcall	.+0      	; 0x2092 <LCD_goToRowColumn+0x8>
    2092:	0f 92       	push	r0
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	8a 83       	std	Y+2, r24	; 0x02
    209a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	switch(row){
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	3d 83       	std	Y+5, r19	; 0x05
    20a4:	2c 83       	std	Y+4, r18	; 0x04
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	9d 81       	ldd	r25, Y+5	; 0x05
    20aa:	81 30       	cpi	r24, 0x01	; 1
    20ac:	91 05       	cpc	r25, r1
    20ae:	c1 f0       	breq	.+48     	; 0x20e0 <LCD_goToRowColumn+0x56>
    20b0:	2c 81       	ldd	r18, Y+4	; 0x04
    20b2:	3d 81       	ldd	r19, Y+5	; 0x05
    20b4:	22 30       	cpi	r18, 0x02	; 2
    20b6:	31 05       	cpc	r19, r1
    20b8:	2c f4       	brge	.+10     	; 0x20c4 <LCD_goToRowColumn+0x3a>
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	9d 81       	ldd	r25, Y+5	; 0x05
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	61 f0       	breq	.+24     	; 0x20da <LCD_goToRowColumn+0x50>
    20c2:	19 c0       	rjmp	.+50     	; 0x20f6 <LCD_goToRowColumn+0x6c>
    20c4:	2c 81       	ldd	r18, Y+4	; 0x04
    20c6:	3d 81       	ldd	r19, Y+5	; 0x05
    20c8:	22 30       	cpi	r18, 0x02	; 2
    20ca:	31 05       	cpc	r19, r1
    20cc:	69 f0       	breq	.+26     	; 0x20e8 <LCD_goToRowColumn+0x5e>
    20ce:	8c 81       	ldd	r24, Y+4	; 0x04
    20d0:	9d 81       	ldd	r25, Y+5	; 0x05
    20d2:	83 30       	cpi	r24, 0x03	; 3
    20d4:	91 05       	cpc	r25, r1
    20d6:	61 f0       	breq	.+24     	; 0x20f0 <LCD_goToRowColumn+0x66>
    20d8:	0e c0       	rjmp	.+28     	; 0x20f6 <LCD_goToRowColumn+0x6c>
	case 0: Address = col; break;
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	0b c0       	rjmp	.+22     	; 0x20f6 <LCD_goToRowColumn+0x6c>
	case 1: Address = col+0x40; break;
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	80 5c       	subi	r24, 0xC0	; 192
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	07 c0       	rjmp	.+14     	; 0x20f6 <LCD_goToRowColumn+0x6c>
	case 2: Address = col+0x10; break;
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	80 5f       	subi	r24, 0xF0	; 240
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	03 c0       	rjmp	.+6      	; 0x20f6 <LCD_goToRowColumn+0x6c>
	case 3: Address = col+0x50; break;
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	80 5b       	subi	r24, 0xB0	; 176
    20f4:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	80 68       	ori	r24, 0x80	; 128
    20fa:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <LCD_sendCommand>
}
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <LCD_displayStringRowColumn+0x6>
    2114:	00 d0       	rcall	.+0      	; 0x2116 <LCD_displayStringRowColumn+0x8>
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	6a 83       	std	Y+2, r22	; 0x02
    211e:	5c 83       	std	Y+4, r21	; 0x04
    2120:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row, col);
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	6a 81       	ldd	r22, Y+2	; 0x02
    2126:	0e 94 45 10 	call	0x208a	; 0x208a <LCD_goToRowColumn>
	LCD_displayString(Str);
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_displayString>
}
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <LCD_intgerToString>:
void LCD_intgerToString(int data){
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	62 97       	sbiw	r28, 0x12	; 18
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	de bf       	out	0x3e, r29	; 62
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	cd bf       	out	0x3d, r28	; 61
    2154:	9a 8b       	std	Y+18, r25	; 0x12
    2156:	89 8b       	std	Y+17, r24	; 0x11
	char str[16];
	itoa(data,str,10); // 10 is for decimal, if 2 the binary
    2158:	89 89       	ldd	r24, Y+17	; 0x11
    215a:	9a 89       	ldd	r25, Y+18	; 0x12
    215c:	9e 01       	movw	r18, r28
    215e:	2f 5f       	subi	r18, 0xFF	; 255
    2160:	3f 4f       	sbci	r19, 0xFF	; 255
    2162:	b9 01       	movw	r22, r18
    2164:	4a e0       	ldi	r20, 0x0A	; 10
    2166:	50 e0       	ldi	r21, 0x00	; 0
    2168:	0e 94 50 19 	call	0x32a0	; 0x32a0 <itoa>
	LCD_displayString(str);
    216c:	ce 01       	movw	r24, r28
    216e:	01 96       	adiw	r24, 0x01	; 1
    2170:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_displayString>
}
    2174:	62 96       	adiw	r28, 0x12	; 18
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <LCD_integerToStringRowCol>:
void LCD_integerToStringRowCol(int row, int col,int data){
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	00 d0       	rcall	.+0      	; 0x218c <LCD_integerToStringRowCol+0x6>
    218c:	00 d0       	rcall	.+0      	; 0x218e <LCD_integerToStringRowCol+0x8>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <LCD_integerToStringRowCol+0xa>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	7c 83       	std	Y+4, r23	; 0x04
    219a:	6b 83       	std	Y+3, r22	; 0x03
    219c:	5e 83       	std	Y+6, r21	; 0x06
    219e:	4d 83       	std	Y+5, r20	; 0x05
	LCD_goToRowColumn(row, col);
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	9b 81       	ldd	r25, Y+3	; 0x03
    21a4:	69 2f       	mov	r22, r25
    21a6:	0e 94 45 10 	call	0x208a	; 0x208a <LCD_goToRowColumn>
	LCD_intgerToString(data);
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_intgerToString>
}
    21b2:	26 96       	adiw	r28, 0x06	; 6
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <LCD_clearScreen>:
void LCD_clearScreen(void){
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <LCD_sendCommand>
}
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <lcdConfigure>:
#include "uart.h"
#include "lcd.h"
#include "keypad.h"

void lcdConfigure(){
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    21e0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_clearScreen>
	LCD_displayString("1.Enter Password");
    21e4:	80 e6       	ldi	r24, 0x60	; 96
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0,"2.New Password");
    21ec:	21 e7       	ldi	r18, 0x71	; 113
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	a9 01       	movw	r20, r18
    21f6:	0e 94 87 10 	call	0x210e	; 0x210e <LCD_displayStringRowColumn>

}
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <keypad_Passcode>:
void keypad_Passcode(uint8 * password){
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	61 97       	sbiw	r28, 0x11	; 17
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	99 8b       	std	Y+17, r25	; 0x11
    221a:	88 8b       	std	Y+16, r24	; 0x10
	LCD_clearScreen();
    221c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_clearScreen>
	LCD_displayString("Enter Password:");
    2220:	80 e8       	ldi	r24, 0x80	; 128
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_displayString>
	LCD_goToRowColumn(1, 6);
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	66 e0       	ldi	r22, 0x06	; 6
    222c:	0e 94 45 10 	call	0x208a	; 0x208a <LCD_goToRowColumn>
	for(uint8 i = 0; i<4; i++){
    2230:	1f 86       	std	Y+15, r1	; 0x0f
    2232:	8c c0       	rjmp	.+280    	; 0x234c <keypad_Passcode+0x14c>
		password[i] = KeyPad_getPressedKey();
    2234:	8f 85       	ldd	r24, Y+15	; 0x0f
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	88 89       	ldd	r24, Y+16	; 0x10
    223c:	99 89       	ldd	r25, Y+17	; 0x11
    223e:	8c 01       	movw	r16, r24
    2240:	02 0f       	add	r16, r18
    2242:	13 1f       	adc	r17, r19
    2244:	0e 94 c2 06 	call	0xd84	; 0xd84 <KeyPad_getPressedKey>
    2248:	f8 01       	movw	r30, r16
    224a:	80 83       	st	Z, r24
		LCD_displayCharacter(password[i]);
    224c:	8f 85       	ldd	r24, Y+15	; 0x0f
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	88 89       	ldd	r24, Y+16	; 0x10
    2254:	99 89       	ldd	r25, Y+17	; 0x11
    2256:	fc 01       	movw	r30, r24
    2258:	e2 0f       	add	r30, r18
    225a:	f3 1f       	adc	r31, r19
    225c:	80 81       	ld	r24, Z
    225e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <LCD_displayCharacter>
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	aa ef       	ldi	r26, 0xFA	; 250
    2268:	b3 e4       	ldi	r27, 0x43	; 67
    226a:	8b 87       	std	Y+11, r24	; 0x0b
    226c:	9c 87       	std	Y+12, r25	; 0x0c
    226e:	ad 87       	std	Y+13, r26	; 0x0d
    2270:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2272:	6b 85       	ldd	r22, Y+11	; 0x0b
    2274:	7c 85       	ldd	r23, Y+12	; 0x0c
    2276:	8d 85       	ldd	r24, Y+13	; 0x0d
    2278:	9e 85       	ldd	r25, Y+14	; 0x0e
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	4a e7       	ldi	r20, 0x7A	; 122
    2280:	53 e4       	ldi	r21, 0x43	; 67
    2282:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	8f 83       	std	Y+7, r24	; 0x07
    228c:	98 87       	std	Y+8, r25	; 0x08
    228e:	a9 87       	std	Y+9, r26	; 0x09
    2290:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2292:	6f 81       	ldd	r22, Y+7	; 0x07
    2294:	78 85       	ldd	r23, Y+8	; 0x08
    2296:	89 85       	ldd	r24, Y+9	; 0x09
    2298:	9a 85       	ldd	r25, Y+10	; 0x0a
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e8       	ldi	r20, 0x80	; 128
    22a0:	5f e3       	ldi	r21, 0x3F	; 63
    22a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22a6:	88 23       	and	r24, r24
    22a8:	2c f4       	brge	.+10     	; 0x22b4 <keypad_Passcode+0xb4>
		__ticks = 1;
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
    22b2:	3f c0       	rjmp	.+126    	; 0x2332 <keypad_Passcode+0x132>
	else if (__tmp > 65535)
    22b4:	6f 81       	ldd	r22, Y+7	; 0x07
    22b6:	78 85       	ldd	r23, Y+8	; 0x08
    22b8:	89 85       	ldd	r24, Y+9	; 0x09
    22ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	3f ef       	ldi	r19, 0xFF	; 255
    22c0:	4f e7       	ldi	r20, 0x7F	; 127
    22c2:	57 e4       	ldi	r21, 0x47	; 71
    22c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22c8:	18 16       	cp	r1, r24
    22ca:	4c f5       	brge	.+82     	; 0x231e <keypad_Passcode+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e2       	ldi	r20, 0x20	; 32
    22da:	51 e4       	ldi	r21, 0x41	; 65
    22dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
    22f4:	0f c0       	rjmp	.+30     	; 0x2314 <keypad_Passcode+0x114>
    22f6:	89 e1       	ldi	r24, 0x19	; 25
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9c 83       	std	Y+4, r25	; 0x04
    22fc:	8b 83       	std	Y+3, r24	; 0x03
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <keypad_Passcode+0x102>
    2306:	9c 83       	std	Y+4, r25	; 0x04
    2308:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	9e 81       	ldd	r25, Y+6	; 0x06
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	9e 83       	std	Y+6, r25	; 0x06
    2312:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	9e 81       	ldd	r25, Y+6	; 0x06
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	69 f7       	brne	.-38     	; 0x22f6 <keypad_Passcode+0xf6>
    231c:	14 c0       	rjmp	.+40     	; 0x2346 <keypad_Passcode+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231e:	6f 81       	ldd	r22, Y+7	; 0x07
    2320:	78 85       	ldd	r23, Y+8	; 0x08
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	9e 83       	std	Y+6, r25	; 0x06
    2330:	8d 83       	std	Y+5, r24	; 0x05
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	9a 83       	std	Y+2, r25	; 0x02
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	9a 81       	ldd	r25, Y+2	; 0x02
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <keypad_Passcode+0x13e>
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
}
void keypad_Passcode(uint8 * password){
	LCD_clearScreen();
	LCD_displayString("Enter Password:");
	LCD_goToRowColumn(1, 6);
	for(uint8 i = 0; i<4; i++){
    2346:	8f 85       	ldd	r24, Y+15	; 0x0f
    2348:	8f 5f       	subi	r24, 0xFF	; 255
    234a:	8f 87       	std	Y+15, r24	; 0x0f
    234c:	8f 85       	ldd	r24, Y+15	; 0x0f
    234e:	84 30       	cpi	r24, 0x04	; 4
    2350:	08 f4       	brcc	.+2      	; 0x2354 <keypad_Passcode+0x154>
    2352:	70 cf       	rjmp	.-288    	; 0x2234 <keypad_Passcode+0x34>
		password[i] = KeyPad_getPressedKey();
		LCD_displayCharacter(password[i]);
		_delay_ms(500);
	}
}
    2354:	61 96       	adiw	r28, 0x11	; 17
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	1f 91       	pop	r17
    2366:	0f 91       	pop	r16
    2368:	08 95       	ret

0000236a <main>:

int main(void){
    236a:	0f 93       	push	r16
    236c:	1f 93       	push	r17
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	c3 59       	subi	r28, 0x93	; 147
    2378:	d0 40       	sbci	r29, 0x00	; 0
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
	//init
	uint8 choice = 0 , count = 0 , password_arr[4];
    2384:	fe 01       	movw	r30, r28
    2386:	e1 57       	subi	r30, 0x71	; 113
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	10 82       	st	Z, r1
    238c:	fe 01       	movw	r30, r28
    238e:	e2 57       	subi	r30, 0x72	; 114
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	10 82       	st	Z, r1
	//LCD
	LCD_init();
    2394:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_init>
	//Keypad
	char key = 0;
    2398:	fe 01       	movw	r30, r28
    239a:	e3 57       	subi	r30, 0x73	; 115
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	10 82       	st	Z, r1
	//UART
	UART_init();
    23a0:	0e 94 66 18 	call	0x30cc	; 0x30cc <UART_init>
	while(1){
		if (!key){
    23a4:	fe 01       	movw	r30, r28
    23a6:	e3 57       	subi	r30, 0x73	; 115
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	88 23       	and	r24, r24
    23ae:	11 f4       	brne	.+4      	; 0x23b4 <main+0x4a>
			lcdConfigure();
    23b0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <lcdConfigure>
		}
		key = KeyPad_getPressedKey();
    23b4:	0e 94 c2 06 	call	0xd84	; 0xd84 <KeyPad_getPressedKey>
    23b8:	fe 01       	movw	r30, r28
    23ba:	e3 57       	subi	r30, 0x73	; 115
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	80 83       	st	Z, r24
		if (key){
    23c0:	fe 01       	movw	r30, r28
    23c2:	e3 57       	subi	r30, 0x73	; 115
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 81       	ld	r24, Z
    23c8:	88 23       	and	r24, r24
    23ca:	61 f3       	breq	.-40     	; 0x23a4 <main+0x3a>
			choice = key;
    23cc:	fe 01       	movw	r30, r28
    23ce:	e1 57       	subi	r30, 0x71	; 113
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	de 01       	movw	r26, r28
    23d4:	a3 57       	subi	r26, 0x73	; 115
    23d6:	bf 4f       	sbci	r27, 0xFF	; 255
    23d8:	8c 91       	ld	r24, X
    23da:	80 83       	st	Z, r24
    23dc:	6b c4       	rjmp	.+2262   	; 0x2cb4 <main+0x94a>
			while (choice == '1'){
				UART_sendByte(0x01); // Entering Passcode
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
				keypad_Passcode(password_arr);
    23e4:	ce 01       	movw	r24, r28
    23e6:	80 57       	subi	r24, 0x70	; 112
    23e8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ea:	0e 94 00 11 	call	0x2200	; 0x2200 <keypad_Passcode>
				LCD_clearScreen();
    23ee:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_clearScreen>
				UART_sendByte(password_arr[0]);
    23f2:	fe 01       	movw	r30, r28
    23f4:	e0 57       	subi	r30, 0x70	; 112
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 81       	ld	r24, Z
    23fa:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
    23fe:	fe 01       	movw	r30, r28
    2400:	e7 57       	subi	r30, 0x77	; 119
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a0 e2       	ldi	r26, 0x20	; 32
    240a:	b1 e4       	ldi	r27, 0x41	; 65
    240c:	80 83       	st	Z, r24
    240e:	91 83       	std	Z+1, r25	; 0x01
    2410:	a2 83       	std	Z+2, r26	; 0x02
    2412:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2414:	8e 01       	movw	r16, r28
    2416:	0b 57       	subi	r16, 0x7B	; 123
    2418:	1f 4f       	sbci	r17, 0xFF	; 255
    241a:	fe 01       	movw	r30, r28
    241c:	e7 57       	subi	r30, 0x77	; 119
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	60 81       	ld	r22, Z
    2422:	71 81       	ldd	r23, Z+1	; 0x01
    2424:	82 81       	ldd	r24, Z+2	; 0x02
    2426:	93 81       	ldd	r25, Z+3	; 0x03
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	4a e7       	ldi	r20, 0x7A	; 122
    242e:	53 e4       	ldi	r21, 0x43	; 67
    2430:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	f8 01       	movw	r30, r16
    243a:	80 83       	st	Z, r24
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	a2 83       	std	Z+2, r26	; 0x02
    2440:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2442:	fe 01       	movw	r30, r28
    2444:	eb 57       	subi	r30, 0x7B	; 123
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	60 81       	ld	r22, Z
    244a:	71 81       	ldd	r23, Z+1	; 0x01
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	93 81       	ldd	r25, Z+3	; 0x03
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    245c:	88 23       	and	r24, r24
    245e:	44 f4       	brge	.+16     	; 0x2470 <main+0x106>
		__ticks = 1;
    2460:	fe 01       	movw	r30, r28
    2462:	ed 57       	subi	r30, 0x7D	; 125
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	80 83       	st	Z, r24
    246e:	64 c0       	rjmp	.+200    	; 0x2538 <main+0x1ce>
	else if (__tmp > 65535)
    2470:	fe 01       	movw	r30, r28
    2472:	eb 57       	subi	r30, 0x7B	; 123
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	60 81       	ld	r22, Z
    2478:	71 81       	ldd	r23, Z+1	; 0x01
    247a:	82 81       	ldd	r24, Z+2	; 0x02
    247c:	93 81       	ldd	r25, Z+3	; 0x03
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	3f ef       	ldi	r19, 0xFF	; 255
    2482:	4f e7       	ldi	r20, 0x7F	; 127
    2484:	57 e4       	ldi	r21, 0x47	; 71
    2486:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    248a:	18 16       	cp	r1, r24
    248c:	0c f0       	brlt	.+2      	; 0x2490 <main+0x126>
    248e:	43 c0       	rjmp	.+134    	; 0x2516 <main+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2490:	fe 01       	movw	r30, r28
    2492:	e7 57       	subi	r30, 0x77	; 119
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	60 81       	ld	r22, Z
    2498:	71 81       	ldd	r23, Z+1	; 0x01
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	93 81       	ldd	r25, Z+3	; 0x03
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e2       	ldi	r20, 0x20	; 32
    24a4:	51 e4       	ldi	r21, 0x41	; 65
    24a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	8e 01       	movw	r16, r28
    24b0:	0d 57       	subi	r16, 0x7D	; 125
    24b2:	1f 4f       	sbci	r17, 0xFF	; 255
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	f8 01       	movw	r30, r16
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	80 83       	st	Z, r24
    24c6:	1f c0       	rjmp	.+62     	; 0x2506 <main+0x19c>
    24c8:	fe 01       	movw	r30, r28
    24ca:	ef 57       	subi	r30, 0x7F	; 127
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	89 e1       	ldi	r24, 0x19	; 25
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	80 83       	st	Z, r24
    24d6:	fe 01       	movw	r30, r28
    24d8:	ef 57       	subi	r30, 0x7F	; 127
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 81       	ld	r24, Z
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <main+0x176>
    24e4:	fe 01       	movw	r30, r28
    24e6:	ef 57       	subi	r30, 0x7F	; 127
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ee:	de 01       	movw	r26, r28
    24f0:	ad 57       	subi	r26, 0x7D	; 125
    24f2:	bf 4f       	sbci	r27, 0xFF	; 255
    24f4:	fe 01       	movw	r30, r28
    24f6:	ed 57       	subi	r30, 0x7D	; 125
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	91 81       	ldd	r25, Z+1	; 0x01
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	11 96       	adiw	r26, 0x01	; 1
    2502:	9c 93       	st	X, r25
    2504:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2506:	fe 01       	movw	r30, r28
    2508:	ed 57       	subi	r30, 0x7D	; 125
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	80 81       	ld	r24, Z
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	d1 f6       	brne	.-76     	; 0x24c8 <main+0x15e>
    2514:	27 c0       	rjmp	.+78     	; 0x2564 <main+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	8e 01       	movw	r16, r28
    2518:	0d 57       	subi	r16, 0x7D	; 125
    251a:	1f 4f       	sbci	r17, 0xFF	; 255
    251c:	fe 01       	movw	r30, r28
    251e:	eb 57       	subi	r30, 0x7B	; 123
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	f8 01       	movw	r30, r16
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	80 83       	st	Z, r24
    2538:	de 01       	movw	r26, r28
    253a:	a1 58       	subi	r26, 0x81	; 129
    253c:	bf 4f       	sbci	r27, 0xFF	; 255
    253e:	fe 01       	movw	r30, r28
    2540:	ed 57       	subi	r30, 0x7D	; 125
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	8d 93       	st	X+, r24
    254a:	9c 93       	st	X, r25
    254c:	fe 01       	movw	r30, r28
    254e:	e1 58       	subi	r30, 0x81	; 129
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	80 81       	ld	r24, Z
    2554:	91 81       	ldd	r25, Z+1	; 0x01
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <main+0x1ec>
    255a:	fe 01       	movw	r30, r28
    255c:	e1 58       	subi	r30, 0x81	; 129
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	91 83       	std	Z+1, r25	; 0x01
    2562:	80 83       	st	Z, r24
				_delay_ms(10);
				UART_sendByte(password_arr[1]);
    2564:	fe 01       	movw	r30, r28
    2566:	e0 57       	subi	r30, 0x70	; 112
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	81 81       	ldd	r24, Z+1	; 0x01
    256c:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
    2570:	fe 01       	movw	r30, r28
    2572:	e5 58       	subi	r30, 0x85	; 133
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	a0 e2       	ldi	r26, 0x20	; 32
    257c:	b1 e4       	ldi	r27, 0x41	; 65
    257e:	80 83       	st	Z, r24
    2580:	91 83       	std	Z+1, r25	; 0x01
    2582:	a2 83       	std	Z+2, r26	; 0x02
    2584:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2586:	8e 01       	movw	r16, r28
    2588:	09 58       	subi	r16, 0x89	; 137
    258a:	1f 4f       	sbci	r17, 0xFF	; 255
    258c:	fe 01       	movw	r30, r28
    258e:	e5 58       	subi	r30, 0x85	; 133
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	60 81       	ld	r22, Z
    2594:	71 81       	ldd	r23, Z+1	; 0x01
    2596:	82 81       	ldd	r24, Z+2	; 0x02
    2598:	93 81       	ldd	r25, Z+3	; 0x03
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	4a e7       	ldi	r20, 0x7A	; 122
    25a0:	53 e4       	ldi	r21, 0x43	; 67
    25a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	f8 01       	movw	r30, r16
    25ac:	80 83       	st	Z, r24
    25ae:	91 83       	std	Z+1, r25	; 0x01
    25b0:	a2 83       	std	Z+2, r26	; 0x02
    25b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25b4:	fe 01       	movw	r30, r28
    25b6:	e9 58       	subi	r30, 0x89	; 137
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e8       	ldi	r20, 0x80	; 128
    25c8:	5f e3       	ldi	r21, 0x3F	; 63
    25ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25ce:	88 23       	and	r24, r24
    25d0:	44 f4       	brge	.+16     	; 0x25e2 <main+0x278>
		__ticks = 1;
    25d2:	fe 01       	movw	r30, r28
    25d4:	eb 58       	subi	r30, 0x8B	; 139
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	80 83       	st	Z, r24
    25e0:	64 c0       	rjmp	.+200    	; 0x26aa <main+0x340>
	else if (__tmp > 65535)
    25e2:	fe 01       	movw	r30, r28
    25e4:	e9 58       	subi	r30, 0x89	; 137
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	60 81       	ld	r22, Z
    25ea:	71 81       	ldd	r23, Z+1	; 0x01
    25ec:	82 81       	ldd	r24, Z+2	; 0x02
    25ee:	93 81       	ldd	r25, Z+3	; 0x03
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	3f ef       	ldi	r19, 0xFF	; 255
    25f4:	4f e7       	ldi	r20, 0x7F	; 127
    25f6:	57 e4       	ldi	r21, 0x47	; 71
    25f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25fc:	18 16       	cp	r1, r24
    25fe:	0c f0       	brlt	.+2      	; 0x2602 <main+0x298>
    2600:	43 c0       	rjmp	.+134    	; 0x2688 <main+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2602:	fe 01       	movw	r30, r28
    2604:	e5 58       	subi	r30, 0x85	; 133
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	93 81       	ldd	r25, Z+3	; 0x03
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e2       	ldi	r20, 0x20	; 32
    2616:	51 e4       	ldi	r21, 0x41	; 65
    2618:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8e 01       	movw	r16, r28
    2622:	0b 58       	subi	r16, 0x8B	; 139
    2624:	1f 4f       	sbci	r17, 0xFF	; 255
    2626:	bc 01       	movw	r22, r24
    2628:	cd 01       	movw	r24, r26
    262a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	f8 01       	movw	r30, r16
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	80 83       	st	Z, r24
    2638:	1f c0       	rjmp	.+62     	; 0x2678 <main+0x30e>
    263a:	fe 01       	movw	r30, r28
    263c:	ed 58       	subi	r30, 0x8D	; 141
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	89 e1       	ldi	r24, 0x19	; 25
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	80 83       	st	Z, r24
    2648:	fe 01       	movw	r30, r28
    264a:	ed 58       	subi	r30, 0x8D	; 141
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	80 81       	ld	r24, Z
    2650:	91 81       	ldd	r25, Z+1	; 0x01
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <main+0x2e8>
    2656:	fe 01       	movw	r30, r28
    2658:	ed 58       	subi	r30, 0x8D	; 141
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2660:	de 01       	movw	r26, r28
    2662:	ab 58       	subi	r26, 0x8B	; 139
    2664:	bf 4f       	sbci	r27, 0xFF	; 255
    2666:	fe 01       	movw	r30, r28
    2668:	eb 58       	subi	r30, 0x8B	; 139
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	91 81       	ldd	r25, Z+1	; 0x01
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	11 96       	adiw	r26, 0x01	; 1
    2674:	9c 93       	st	X, r25
    2676:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2678:	fe 01       	movw	r30, r28
    267a:	eb 58       	subi	r30, 0x8B	; 139
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	80 81       	ld	r24, Z
    2680:	91 81       	ldd	r25, Z+1	; 0x01
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	d1 f6       	brne	.-76     	; 0x263a <main+0x2d0>
    2686:	27 c0       	rjmp	.+78     	; 0x26d6 <main+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2688:	8e 01       	movw	r16, r28
    268a:	0b 58       	subi	r16, 0x8B	; 139
    268c:	1f 4f       	sbci	r17, 0xFF	; 255
    268e:	fe 01       	movw	r30, r28
    2690:	e9 58       	subi	r30, 0x89	; 137
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	60 81       	ld	r22, Z
    2696:	71 81       	ldd	r23, Z+1	; 0x01
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	93 81       	ldd	r25, Z+3	; 0x03
    269c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	f8 01       	movw	r30, r16
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
    26aa:	de 01       	movw	r26, r28
    26ac:	af 58       	subi	r26, 0x8F	; 143
    26ae:	bf 4f       	sbci	r27, 0xFF	; 255
    26b0:	fe 01       	movw	r30, r28
    26b2:	eb 58       	subi	r30, 0x8B	; 139
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	8d 93       	st	X+, r24
    26bc:	9c 93       	st	X, r25
    26be:	fe 01       	movw	r30, r28
    26c0:	ef 58       	subi	r30, 0x8F	; 143
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	80 81       	ld	r24, Z
    26c6:	91 81       	ldd	r25, Z+1	; 0x01
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <main+0x35e>
    26cc:	fe 01       	movw	r30, r28
    26ce:	ef 58       	subi	r30, 0x8F	; 143
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	80 83       	st	Z, r24
				_delay_ms(10);
				UART_sendByte(password_arr[2]);
    26d6:	fe 01       	movw	r30, r28
    26d8:	e0 57       	subi	r30, 0x70	; 112
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	82 81       	ldd	r24, Z+2	; 0x02
    26de:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
    26e2:	fe 01       	movw	r30, r28
    26e4:	e3 59       	subi	r30, 0x93	; 147
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	a0 e2       	ldi	r26, 0x20	; 32
    26ee:	b1 e4       	ldi	r27, 0x41	; 65
    26f0:	80 83       	st	Z, r24
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	a2 83       	std	Z+2, r26	; 0x02
    26f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f8:	8e 01       	movw	r16, r28
    26fa:	07 59       	subi	r16, 0x97	; 151
    26fc:	1f 4f       	sbci	r17, 0xFF	; 255
    26fe:	fe 01       	movw	r30, r28
    2700:	e3 59       	subi	r30, 0x93	; 147
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	60 81       	ld	r22, Z
    2706:	71 81       	ldd	r23, Z+1	; 0x01
    2708:	82 81       	ldd	r24, Z+2	; 0x02
    270a:	93 81       	ldd	r25, Z+3	; 0x03
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4a e7       	ldi	r20, 0x7A	; 122
    2712:	53 e4       	ldi	r21, 0x43	; 67
    2714:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	f8 01       	movw	r30, r16
    271e:	80 83       	st	Z, r24
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	a2 83       	std	Z+2, r26	; 0x02
    2724:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2726:	fe 01       	movw	r30, r28
    2728:	e7 59       	subi	r30, 0x97	; 151
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	93 81       	ldd	r25, Z+3	; 0x03
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e8       	ldi	r20, 0x80	; 128
    273a:	5f e3       	ldi	r21, 0x3F	; 63
    273c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2740:	88 23       	and	r24, r24
    2742:	44 f4       	brge	.+16     	; 0x2754 <main+0x3ea>
		__ticks = 1;
    2744:	fe 01       	movw	r30, r28
    2746:	e9 59       	subi	r30, 0x99	; 153
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	80 83       	st	Z, r24
    2752:	64 c0       	rjmp	.+200    	; 0x281c <main+0x4b2>
	else if (__tmp > 65535)
    2754:	fe 01       	movw	r30, r28
    2756:	e7 59       	subi	r30, 0x97	; 151
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	3f ef       	ldi	r19, 0xFF	; 255
    2766:	4f e7       	ldi	r20, 0x7F	; 127
    2768:	57 e4       	ldi	r21, 0x47	; 71
    276a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    276e:	18 16       	cp	r1, r24
    2770:	0c f0       	brlt	.+2      	; 0x2774 <main+0x40a>
    2772:	43 c0       	rjmp	.+134    	; 0x27fa <main+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2774:	fe 01       	movw	r30, r28
    2776:	e3 59       	subi	r30, 0x93	; 147
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	60 81       	ld	r22, Z
    277c:	71 81       	ldd	r23, Z+1	; 0x01
    277e:	82 81       	ldd	r24, Z+2	; 0x02
    2780:	93 81       	ldd	r25, Z+3	; 0x03
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	8e 01       	movw	r16, r28
    2794:	09 59       	subi	r16, 0x99	; 153
    2796:	1f 4f       	sbci	r17, 0xFF	; 255
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	f8 01       	movw	r30, r16
    27a6:	91 83       	std	Z+1, r25	; 0x01
    27a8:	80 83       	st	Z, r24
    27aa:	1f c0       	rjmp	.+62     	; 0x27ea <main+0x480>
    27ac:	fe 01       	movw	r30, r28
    27ae:	eb 59       	subi	r30, 0x9B	; 155
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	89 e1       	ldi	r24, 0x19	; 25
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	80 83       	st	Z, r24
    27ba:	fe 01       	movw	r30, r28
    27bc:	eb 59       	subi	r30, 0x9B	; 155
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <main+0x45a>
    27c8:	fe 01       	movw	r30, r28
    27ca:	eb 59       	subi	r30, 0x9B	; 155
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d2:	de 01       	movw	r26, r28
    27d4:	a9 59       	subi	r26, 0x99	; 153
    27d6:	bf 4f       	sbci	r27, 0xFF	; 255
    27d8:	fe 01       	movw	r30, r28
    27da:	e9 59       	subi	r30, 0x99	; 153
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	80 81       	ld	r24, Z
    27e0:	91 81       	ldd	r25, Z+1	; 0x01
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	11 96       	adiw	r26, 0x01	; 1
    27e6:	9c 93       	st	X, r25
    27e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ea:	fe 01       	movw	r30, r28
    27ec:	e9 59       	subi	r30, 0x99	; 153
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 81       	ld	r24, Z
    27f2:	91 81       	ldd	r25, Z+1	; 0x01
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	d1 f6       	brne	.-76     	; 0x27ac <main+0x442>
    27f8:	27 c0       	rjmp	.+78     	; 0x2848 <main+0x4de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fa:	8e 01       	movw	r16, r28
    27fc:	09 59       	subi	r16, 0x99	; 153
    27fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2800:	fe 01       	movw	r30, r28
    2802:	e7 59       	subi	r30, 0x97	; 151
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	f8 01       	movw	r30, r16
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	80 83       	st	Z, r24
    281c:	de 01       	movw	r26, r28
    281e:	ad 59       	subi	r26, 0x9D	; 157
    2820:	bf 4f       	sbci	r27, 0xFF	; 255
    2822:	fe 01       	movw	r30, r28
    2824:	e9 59       	subi	r30, 0x99	; 153
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	8d 93       	st	X+, r24
    282e:	9c 93       	st	X, r25
    2830:	fe 01       	movw	r30, r28
    2832:	ed 59       	subi	r30, 0x9D	; 157
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <main+0x4d0>
    283e:	fe 01       	movw	r30, r28
    2840:	ed 59       	subi	r30, 0x9D	; 157
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	80 83       	st	Z, r24
				_delay_ms(10);
				UART_sendByte(password_arr[3]);
    2848:	fe 01       	movw	r30, r28
    284a:	e0 57       	subi	r30, 0x70	; 112
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	83 81       	ldd	r24, Z+3	; 0x03
    2850:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
    2854:	fe 01       	movw	r30, r28
    2856:	e1 5a       	subi	r30, 0xA1	; 161
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	a0 e2       	ldi	r26, 0x20	; 32
    2860:	b1 e4       	ldi	r27, 0x41	; 65
    2862:	80 83       	st	Z, r24
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	a2 83       	std	Z+2, r26	; 0x02
    2868:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286a:	8e 01       	movw	r16, r28
    286c:	05 5a       	subi	r16, 0xA5	; 165
    286e:	1f 4f       	sbci	r17, 0xFF	; 255
    2870:	fe 01       	movw	r30, r28
    2872:	e1 5a       	subi	r30, 0xA1	; 161
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	60 81       	ld	r22, Z
    2878:	71 81       	ldd	r23, Z+1	; 0x01
    287a:	82 81       	ldd	r24, Z+2	; 0x02
    287c:	93 81       	ldd	r25, Z+3	; 0x03
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	4a e7       	ldi	r20, 0x7A	; 122
    2884:	53 e4       	ldi	r21, 0x43	; 67
    2886:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	f8 01       	movw	r30, r16
    2890:	80 83       	st	Z, r24
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	a2 83       	std	Z+2, r26	; 0x02
    2896:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2898:	fe 01       	movw	r30, r28
    289a:	e5 5a       	subi	r30, 0xA5	; 165
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	60 81       	ld	r22, Z
    28a0:	71 81       	ldd	r23, Z+1	; 0x01
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e8       	ldi	r20, 0x80	; 128
    28ac:	5f e3       	ldi	r21, 0x3F	; 63
    28ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28b2:	88 23       	and	r24, r24
    28b4:	44 f4       	brge	.+16     	; 0x28c6 <main+0x55c>
		__ticks = 1;
    28b6:	fe 01       	movw	r30, r28
    28b8:	e7 5a       	subi	r30, 0xA7	; 167
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	91 83       	std	Z+1, r25	; 0x01
    28c2:	80 83       	st	Z, r24
    28c4:	64 c0       	rjmp	.+200    	; 0x298e <main+0x624>
	else if (__tmp > 65535)
    28c6:	fe 01       	movw	r30, r28
    28c8:	e5 5a       	subi	r30, 0xA5	; 165
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	3f ef       	ldi	r19, 0xFF	; 255
    28d8:	4f e7       	ldi	r20, 0x7F	; 127
    28da:	57 e4       	ldi	r21, 0x47	; 71
    28dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28e0:	18 16       	cp	r1, r24
    28e2:	0c f0       	brlt	.+2      	; 0x28e6 <main+0x57c>
    28e4:	43 c0       	rjmp	.+134    	; 0x296c <main+0x602>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e6:	fe 01       	movw	r30, r28
    28e8:	e1 5a       	subi	r30, 0xA1	; 161
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e2       	ldi	r20, 0x20	; 32
    28fa:	51 e4       	ldi	r21, 0x41	; 65
    28fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	8e 01       	movw	r16, r28
    2906:	07 5a       	subi	r16, 0xA7	; 167
    2908:	1f 4f       	sbci	r17, 0xFF	; 255
    290a:	bc 01       	movw	r22, r24
    290c:	cd 01       	movw	r24, r26
    290e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	f8 01       	movw	r30, r16
    2918:	91 83       	std	Z+1, r25	; 0x01
    291a:	80 83       	st	Z, r24
    291c:	1f c0       	rjmp	.+62     	; 0x295c <main+0x5f2>
    291e:	fe 01       	movw	r30, r28
    2920:	e9 5a       	subi	r30, 0xA9	; 169
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	89 e1       	ldi	r24, 0x19	; 25
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	91 83       	std	Z+1, r25	; 0x01
    292a:	80 83       	st	Z, r24
    292c:	fe 01       	movw	r30, r28
    292e:	e9 5a       	subi	r30, 0xA9	; 169
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	80 81       	ld	r24, Z
    2934:	91 81       	ldd	r25, Z+1	; 0x01
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <main+0x5cc>
    293a:	fe 01       	movw	r30, r28
    293c:	e9 5a       	subi	r30, 0xA9	; 169
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2944:	de 01       	movw	r26, r28
    2946:	a7 5a       	subi	r26, 0xA7	; 167
    2948:	bf 4f       	sbci	r27, 0xFF	; 255
    294a:	fe 01       	movw	r30, r28
    294c:	e7 5a       	subi	r30, 0xA7	; 167
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	11 96       	adiw	r26, 0x01	; 1
    2958:	9c 93       	st	X, r25
    295a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295c:	fe 01       	movw	r30, r28
    295e:	e7 5a       	subi	r30, 0xA7	; 167
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 81       	ld	r24, Z
    2964:	91 81       	ldd	r25, Z+1	; 0x01
    2966:	00 97       	sbiw	r24, 0x00	; 0
    2968:	d1 f6       	brne	.-76     	; 0x291e <main+0x5b4>
    296a:	27 c0       	rjmp	.+78     	; 0x29ba <main+0x650>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296c:	8e 01       	movw	r16, r28
    296e:	07 5a       	subi	r16, 0xA7	; 167
    2970:	1f 4f       	sbci	r17, 0xFF	; 255
    2972:	fe 01       	movw	r30, r28
    2974:	e5 5a       	subi	r30, 0xA5	; 165
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	f8 01       	movw	r30, r16
    298a:	91 83       	std	Z+1, r25	; 0x01
    298c:	80 83       	st	Z, r24
    298e:	de 01       	movw	r26, r28
    2990:	ab 5a       	subi	r26, 0xAB	; 171
    2992:	bf 4f       	sbci	r27, 0xFF	; 255
    2994:	fe 01       	movw	r30, r28
    2996:	e7 5a       	subi	r30, 0xA7	; 167
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	80 81       	ld	r24, Z
    299c:	91 81       	ldd	r25, Z+1	; 0x01
    299e:	8d 93       	st	X+, r24
    29a0:	9c 93       	st	X, r25
    29a2:	fe 01       	movw	r30, r28
    29a4:	eb 5a       	subi	r30, 0xAB	; 171
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 81       	ld	r24, Z
    29aa:	91 81       	ldd	r25, Z+1	; 0x01
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <main+0x642>
    29b0:	fe 01       	movw	r30, r28
    29b2:	eb 5a       	subi	r30, 0xAB	; 171
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
				_delay_ms(10);
				if(UART_recieveByte() == 0){
    29ba:	0e 94 9e 18 	call	0x313c	; 0x313c <UART_recieveByte>
    29be:	88 23       	and	r24, r24
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <main+0x65a>
    29c2:	df c0       	rjmp	.+446    	; 0x2b82 <main+0x818>
					count++;
    29c4:	de 01       	movw	r26, r28
    29c6:	a2 57       	subi	r26, 0x72	; 114
    29c8:	bf 4f       	sbci	r27, 0xFF	; 255
    29ca:	fe 01       	movw	r30, r28
    29cc:	e2 57       	subi	r30, 0x72	; 114
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	80 81       	ld	r24, Z
    29d2:	8f 5f       	subi	r24, 0xFF	; 255
    29d4:	8c 93       	st	X, r24
					LCD_clearScreen();
    29d6:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_clearScreen>
					LCD_displayString("Incorrect");
    29da:	80 e9       	ldi	r24, 0x90	; 144
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_displayString>
    29e2:	fe 01       	movw	r30, r28
    29e4:	ef 5a       	subi	r30, 0xAF	; 175
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	aa e7       	ldi	r26, 0x7A	; 122
    29ee:	b4 e4       	ldi	r27, 0x44	; 68
    29f0:	80 83       	st	Z, r24
    29f2:	91 83       	std	Z+1, r25	; 0x01
    29f4:	a2 83       	std	Z+2, r26	; 0x02
    29f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f8:	8e 01       	movw	r16, r28
    29fa:	03 5b       	subi	r16, 0xB3	; 179
    29fc:	1f 4f       	sbci	r17, 0xFF	; 255
    29fe:	fe 01       	movw	r30, r28
    2a00:	ef 5a       	subi	r30, 0xAF	; 175
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	60 81       	ld	r22, Z
    2a06:	71 81       	ldd	r23, Z+1	; 0x01
    2a08:	82 81       	ldd	r24, Z+2	; 0x02
    2a0a:	93 81       	ldd	r25, Z+3	; 0x03
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	4a e7       	ldi	r20, 0x7A	; 122
    2a12:	53 e4       	ldi	r21, 0x43	; 67
    2a14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	f8 01       	movw	r30, r16
    2a1e:	80 83       	st	Z, r24
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	a2 83       	std	Z+2, r26	; 0x02
    2a24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a26:	fe 01       	movw	r30, r28
    2a28:	e3 5b       	subi	r30, 0xB3	; 179
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e8       	ldi	r20, 0x80	; 128
    2a3a:	5f e3       	ldi	r21, 0x3F	; 63
    2a3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a40:	88 23       	and	r24, r24
    2a42:	44 f4       	brge	.+16     	; 0x2a54 <main+0x6ea>
		__ticks = 1;
    2a44:	fe 01       	movw	r30, r28
    2a46:	e5 5b       	subi	r30, 0xB5	; 181
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
    2a52:	64 c0       	rjmp	.+200    	; 0x2b1c <main+0x7b2>
	else if (__tmp > 65535)
    2a54:	fe 01       	movw	r30, r28
    2a56:	e3 5b       	subi	r30, 0xB3	; 179
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	60 81       	ld	r22, Z
    2a5c:	71 81       	ldd	r23, Z+1	; 0x01
    2a5e:	82 81       	ldd	r24, Z+2	; 0x02
    2a60:	93 81       	ldd	r25, Z+3	; 0x03
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	3f ef       	ldi	r19, 0xFF	; 255
    2a66:	4f e7       	ldi	r20, 0x7F	; 127
    2a68:	57 e4       	ldi	r21, 0x47	; 71
    2a6a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a6e:	18 16       	cp	r1, r24
    2a70:	0c f0       	brlt	.+2      	; 0x2a74 <main+0x70a>
    2a72:	43 c0       	rjmp	.+134    	; 0x2afa <main+0x790>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a74:	fe 01       	movw	r30, r28
    2a76:	ef 5a       	subi	r30, 0xAF	; 175
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	60 81       	ld	r22, Z
    2a7c:	71 81       	ldd	r23, Z+1	; 0x01
    2a7e:	82 81       	ldd	r24, Z+2	; 0x02
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e2       	ldi	r20, 0x20	; 32
    2a88:	51 e4       	ldi	r21, 0x41	; 65
    2a8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	8e 01       	movw	r16, r28
    2a94:	05 5b       	subi	r16, 0xB5	; 181
    2a96:	1f 4f       	sbci	r17, 0xFF	; 255
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	f8 01       	movw	r30, r16
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	80 83       	st	Z, r24
    2aaa:	1f c0       	rjmp	.+62     	; 0x2aea <main+0x780>
    2aac:	fe 01       	movw	r30, r28
    2aae:	e7 5b       	subi	r30, 0xB7	; 183
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	89 e1       	ldi	r24, 0x19	; 25
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	91 83       	std	Z+1, r25	; 0x01
    2ab8:	80 83       	st	Z, r24
    2aba:	fe 01       	movw	r30, r28
    2abc:	e7 5b       	subi	r30, 0xB7	; 183
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	80 81       	ld	r24, Z
    2ac2:	91 81       	ldd	r25, Z+1	; 0x01
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <main+0x75a>
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e7 5b       	subi	r30, 0xB7	; 183
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad2:	de 01       	movw	r26, r28
    2ad4:	a5 5b       	subi	r26, 0xB5	; 181
    2ad6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e5 5b       	subi	r30, 0xB5	; 181
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	11 96       	adiw	r26, 0x01	; 1
    2ae6:	9c 93       	st	X, r25
    2ae8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aea:	fe 01       	movw	r30, r28
    2aec:	e5 5b       	subi	r30, 0xB5	; 181
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	80 81       	ld	r24, Z
    2af2:	91 81       	ldd	r25, Z+1	; 0x01
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	d1 f6       	brne	.-76     	; 0x2aac <main+0x742>
    2af8:	28 c0       	rjmp	.+80     	; 0x2b4a <main+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afa:	8e 01       	movw	r16, r28
    2afc:	05 5b       	subi	r16, 0xB5	; 181
    2afe:	1f 4f       	sbci	r17, 0xFF	; 255
    2b00:	fe 01       	movw	r30, r28
    2b02:	e3 5b       	subi	r30, 0xB3	; 179
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	60 81       	ld	r22, Z
    2b08:	71 81       	ldd	r23, Z+1	; 0x01
    2b0a:	82 81       	ldd	r24, Z+2	; 0x02
    2b0c:	93 81       	ldd	r25, Z+3	; 0x03
    2b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	f8 01       	movw	r30, r16
    2b18:	91 83       	std	Z+1, r25	; 0x01
    2b1a:	80 83       	st	Z, r24
    2b1c:	de 01       	movw	r26, r28
    2b1e:	a9 5b       	subi	r26, 0xB9	; 185
    2b20:	bf 4f       	sbci	r27, 0xFF	; 255
    2b22:	fe 01       	movw	r30, r28
    2b24:	e5 5b       	subi	r30, 0xB5	; 181
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	80 81       	ld	r24, Z
    2b2a:	91 81       	ldd	r25, Z+1	; 0x01
    2b2c:	11 96       	adiw	r26, 0x01	; 1
    2b2e:	9c 93       	st	X, r25
    2b30:	8e 93       	st	-X, r24
    2b32:	fe 01       	movw	r30, r28
    2b34:	e9 5b       	subi	r30, 0xB9	; 185
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	80 81       	ld	r24, Z
    2b3a:	91 81       	ldd	r25, Z+1	; 0x01
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	f1 f7       	brne	.-4      	; 0x2b3c <main+0x7d2>
    2b40:	fe 01       	movw	r30, r28
    2b42:	e9 5b       	subi	r30, 0xB9	; 185
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24
					_delay_ms(1000);
					if (count == 3){
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e2 57       	subi	r30, 0x72	; 114
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	83 30       	cpi	r24, 0x03	; 3
    2b54:	09 f0       	breq	.+2      	; 0x2b58 <main+0x7ee>
    2b56:	ae c0       	rjmp	.+348    	; 0x2cb4 <main+0x94a>
						LCD_clearScreen();
    2b58:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_clearScreen>
						LCD_displayString("Close down");
    2b5c:	8a e9       	ldi	r24, 0x9A	; 154
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_displayString>
						LCD_clearScreen();
    2b64:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_clearScreen>
						choice = 0;
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e1 57       	subi	r30, 0x71	; 113
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	10 82       	st	Z, r1
						count = 0;
    2b70:	fe 01       	movw	r30, r28
    2b72:	e2 57       	subi	r30, 0x72	; 114
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	10 82       	st	Z, r1
						key = 0;
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e3 57       	subi	r30, 0x73	; 115
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	10 82       	st	Z, r1
    2b80:	99 c0       	rjmp	.+306    	; 0x2cb4 <main+0x94a>
					}
				}else{
					count =0;
    2b82:	fe 01       	movw	r30, r28
    2b84:	e2 57       	subi	r30, 0x72	; 114
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	10 82       	st	Z, r1
					choice = 0;
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e1 57       	subi	r30, 0x71	; 113
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	10 82       	st	Z, r1
					key = 0;
    2b92:	fe 01       	movw	r30, r28
    2b94:	e3 57       	subi	r30, 0x73	; 115
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	10 82       	st	Z, r1
					LCD_clearScreen();
    2b9a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_clearScreen>
					LCD_displayString("Correct Passcode");
    2b9e:	85 ea       	ldi	r24, 0xA5	; 165
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_displayString>
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	ed 5b       	subi	r30, 0xBD	; 189
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	aa e7       	ldi	r26, 0x7A	; 122
    2bb2:	b4 e4       	ldi	r27, 0x44	; 68
    2bb4:	80 83       	st	Z, r24
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	a2 83       	std	Z+2, r26	; 0x02
    2bba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	8e 01       	movw	r16, r28
    2bbe:	01 5c       	subi	r16, 0xC1	; 193
    2bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ed 5b       	subi	r30, 0xBD	; 189
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	4a e7       	ldi	r20, 0x7A	; 122
    2bd6:	53 e4       	ldi	r21, 0x43	; 67
    2bd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	f8 01       	movw	r30, r16
    2be2:	80 83       	st	Z, r24
    2be4:	91 83       	std	Z+1, r25	; 0x01
    2be6:	a2 83       	std	Z+2, r26	; 0x02
    2be8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bea:	fe 01       	movw	r30, r28
    2bec:	ff 96       	adiw	r30, 0x3f	; 63
    2bee:	60 81       	ld	r22, Z
    2bf0:	71 81       	ldd	r23, Z+1	; 0x01
    2bf2:	82 81       	ldd	r24, Z+2	; 0x02
    2bf4:	93 81       	ldd	r25, Z+3	; 0x03
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e8       	ldi	r20, 0x80	; 128
    2bfc:	5f e3       	ldi	r21, 0x3F	; 63
    2bfe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c02:	88 23       	and	r24, r24
    2c04:	2c f4       	brge	.+10     	; 0x2c10 <main+0x8a6>
		__ticks = 1;
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	9e af       	std	Y+62, r25	; 0x3e
    2c0c:	8d af       	std	Y+61, r24	; 0x3d
    2c0e:	46 c0       	rjmp	.+140    	; 0x2c9c <main+0x932>
	else if (__tmp > 65535)
    2c10:	fe 01       	movw	r30, r28
    2c12:	ff 96       	adiw	r30, 0x3f	; 63
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	3f ef       	ldi	r19, 0xFF	; 255
    2c20:	4f e7       	ldi	r20, 0x7F	; 127
    2c22:	57 e4       	ldi	r21, 0x47	; 71
    2c24:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c28:	18 16       	cp	r1, r24
    2c2a:	64 f5       	brge	.+88     	; 0x2c84 <main+0x91a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	ed 5b       	subi	r30, 0xBD	; 189
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	60 81       	ld	r22, Z
    2c34:	71 81       	ldd	r23, Z+1	; 0x01
    2c36:	82 81       	ldd	r24, Z+2	; 0x02
    2c38:	93 81       	ldd	r25, Z+3	; 0x03
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e2       	ldi	r20, 0x20	; 32
    2c40:	51 e4       	ldi	r21, 0x41	; 65
    2c42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	9e af       	std	Y+62, r25	; 0x3e
    2c58:	8d af       	std	Y+61, r24	; 0x3d
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <main+0x910>
    2c5c:	89 e1       	ldi	r24, 0x19	; 25
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	9c af       	std	Y+60, r25	; 0x3c
    2c62:	8b af       	std	Y+59, r24	; 0x3b
    2c64:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c66:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	f1 f7       	brne	.-4      	; 0x2c68 <main+0x8fe>
    2c6c:	9c af       	std	Y+60, r25	; 0x3c
    2c6e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c70:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c72:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	9e af       	std	Y+62, r25	; 0x3e
    2c78:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	69 f7       	brne	.-38     	; 0x2c5c <main+0x8f2>
    2c82:	16 c0       	rjmp	.+44     	; 0x2cb0 <main+0x946>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c84:	fe 01       	movw	r30, r28
    2c86:	ff 96       	adiw	r30, 0x3f	; 63
    2c88:	60 81       	ld	r22, Z
    2c8a:	71 81       	ldd	r23, Z+1	; 0x01
    2c8c:	82 81       	ldd	r24, Z+2	; 0x02
    2c8e:	93 81       	ldd	r25, Z+3	; 0x03
    2c90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	9e af       	std	Y+62, r25	; 0x3e
    2c9a:	8d af       	std	Y+61, r24	; 0x3d
    2c9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ca0:	9a af       	std	Y+58, r25	; 0x3a
    2ca2:	89 af       	std	Y+57, r24	; 0x39
    2ca4:	89 ad       	ldd	r24, Y+57	; 0x39
    2ca6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <main+0x93e>
    2cac:	9a af       	std	Y+58, r25	; 0x3a
    2cae:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(1000);
					LCD_clearScreen();
    2cb0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_clearScreen>
			lcdConfigure();
		}
		key = KeyPad_getPressedKey();
		if (key){
			choice = key;
			while (choice == '1'){
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	e1 57       	subi	r30, 0x71	; 113
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	80 81       	ld	r24, Z
    2cbc:	81 33       	cpi	r24, 0x31	; 49
    2cbe:	09 f4       	brne	.+2      	; 0x2cc2 <main+0x958>
    2cc0:	8e cb       	rjmp	.-2276   	; 0x23de <main+0x74>
    2cc2:	fc c1       	rjmp	.+1016   	; 0x30bc <main+0xd52>
					_delay_ms(1000);
					LCD_clearScreen();
				}
			}
			while(choice == '2'){
				UART_sendByte(0x02); // Entering Passcode
    2cc4:	82 e0       	ldi	r24, 0x02	; 2
    2cc6:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
				keypad_Passcode(password_arr);
    2cca:	ce 01       	movw	r24, r28
    2ccc:	80 57       	subi	r24, 0x70	; 112
    2cce:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd0:	0e 94 00 11 	call	0x2200	; 0x2200 <keypad_Passcode>
				UART_sendByte(password_arr[0]);
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	e0 57       	subi	r30, 0x70	; 112
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	80 81       	ld	r24, Z
    2cdc:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	a8 e4       	ldi	r26, 0x48	; 72
    2ce6:	b2 e4       	ldi	r27, 0x42	; 66
    2ce8:	8d ab       	std	Y+53, r24	; 0x35
    2cea:	9e ab       	std	Y+54, r25	; 0x36
    2cec:	af ab       	std	Y+55, r26	; 0x37
    2cee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf0:	6d a9       	ldd	r22, Y+53	; 0x35
    2cf2:	7e a9       	ldd	r23, Y+54	; 0x36
    2cf4:	8f a9       	ldd	r24, Y+55	; 0x37
    2cf6:	98 ad       	ldd	r25, Y+56	; 0x38
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	4a e7       	ldi	r20, 0x7A	; 122
    2cfe:	53 e4       	ldi	r21, 0x43	; 67
    2d00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	89 ab       	std	Y+49, r24	; 0x31
    2d0a:	9a ab       	std	Y+50, r25	; 0x32
    2d0c:	ab ab       	std	Y+51, r26	; 0x33
    2d0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d10:	69 a9       	ldd	r22, Y+49	; 0x31
    2d12:	7a a9       	ldd	r23, Y+50	; 0x32
    2d14:	8b a9       	ldd	r24, Y+51	; 0x33
    2d16:	9c a9       	ldd	r25, Y+52	; 0x34
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e8       	ldi	r20, 0x80	; 128
    2d1e:	5f e3       	ldi	r21, 0x3F	; 63
    2d20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d24:	88 23       	and	r24, r24
    2d26:	2c f4       	brge	.+10     	; 0x2d32 <main+0x9c8>
		__ticks = 1;
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	98 ab       	std	Y+48, r25	; 0x30
    2d2e:	8f a7       	std	Y+47, r24	; 0x2f
    2d30:	3f c0       	rjmp	.+126    	; 0x2db0 <main+0xa46>
	else if (__tmp > 65535)
    2d32:	69 a9       	ldd	r22, Y+49	; 0x31
    2d34:	7a a9       	ldd	r23, Y+50	; 0x32
    2d36:	8b a9       	ldd	r24, Y+51	; 0x33
    2d38:	9c a9       	ldd	r25, Y+52	; 0x34
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	3f ef       	ldi	r19, 0xFF	; 255
    2d3e:	4f e7       	ldi	r20, 0x7F	; 127
    2d40:	57 e4       	ldi	r21, 0x47	; 71
    2d42:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d46:	18 16       	cp	r1, r24
    2d48:	4c f5       	brge	.+82     	; 0x2d9c <main+0xa32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d4c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d4e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d50:	98 ad       	ldd	r25, Y+56	; 0x38
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e2       	ldi	r20, 0x20	; 32
    2d58:	51 e4       	ldi	r21, 0x41	; 65
    2d5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	bc 01       	movw	r22, r24
    2d64:	cd 01       	movw	r24, r26
    2d66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	98 ab       	std	Y+48, r25	; 0x30
    2d70:	8f a7       	std	Y+47, r24	; 0x2f
    2d72:	0f c0       	rjmp	.+30     	; 0x2d92 <main+0xa28>
    2d74:	89 e1       	ldi	r24, 0x19	; 25
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	9e a7       	std	Y+46, r25	; 0x2e
    2d7a:	8d a7       	std	Y+45, r24	; 0x2d
    2d7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	f1 f7       	brne	.-4      	; 0x2d80 <main+0xa16>
    2d84:	9e a7       	std	Y+46, r25	; 0x2e
    2d86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d88:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d8a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	98 ab       	std	Y+48, r25	; 0x30
    2d90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d94:	98 a9       	ldd	r25, Y+48	; 0x30
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	69 f7       	brne	.-38     	; 0x2d74 <main+0xa0a>
    2d9a:	14 c0       	rjmp	.+40     	; 0x2dc4 <main+0xa5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2da0:	8b a9       	ldd	r24, Y+51	; 0x33
    2da2:	9c a9       	ldd	r25, Y+52	; 0x34
    2da4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	98 ab       	std	Y+48, r25	; 0x30
    2dae:	8f a7       	std	Y+47, r24	; 0x2f
    2db0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2db2:	98 a9       	ldd	r25, Y+48	; 0x30
    2db4:	9c a7       	std	Y+44, r25	; 0x2c
    2db6:	8b a7       	std	Y+43, r24	; 0x2b
    2db8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dba:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <main+0xa52>
    2dc0:	9c a7       	std	Y+44, r25	; 0x2c
    2dc2:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(50);
				UART_sendByte(password_arr[1]);
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e0 57       	subi	r30, 0x70	; 112
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	81 81       	ldd	r24, Z+1	; 0x01
    2dcc:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	a8 e4       	ldi	r26, 0x48	; 72
    2dd6:	b2 e4       	ldi	r27, 0x42	; 66
    2dd8:	8f a3       	std	Y+39, r24	; 0x27
    2dda:	98 a7       	std	Y+40, r25	; 0x28
    2ddc:	a9 a7       	std	Y+41, r26	; 0x29
    2dde:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de0:	6f a1       	ldd	r22, Y+39	; 0x27
    2de2:	78 a5       	ldd	r23, Y+40	; 0x28
    2de4:	89 a5       	ldd	r24, Y+41	; 0x29
    2de6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	4a e7       	ldi	r20, 0x7A	; 122
    2dee:	53 e4       	ldi	r21, 0x43	; 67
    2df0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	8b a3       	std	Y+35, r24	; 0x23
    2dfa:	9c a3       	std	Y+36, r25	; 0x24
    2dfc:	ad a3       	std	Y+37, r26	; 0x25
    2dfe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e00:	6b a1       	ldd	r22, Y+35	; 0x23
    2e02:	7c a1       	ldd	r23, Y+36	; 0x24
    2e04:	8d a1       	ldd	r24, Y+37	; 0x25
    2e06:	9e a1       	ldd	r25, Y+38	; 0x26
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e8       	ldi	r20, 0x80	; 128
    2e0e:	5f e3       	ldi	r21, 0x3F	; 63
    2e10:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e14:	88 23       	and	r24, r24
    2e16:	2c f4       	brge	.+10     	; 0x2e22 <main+0xab8>
		__ticks = 1;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	9a a3       	std	Y+34, r25	; 0x22
    2e1e:	89 a3       	std	Y+33, r24	; 0x21
    2e20:	3f c0       	rjmp	.+126    	; 0x2ea0 <main+0xb36>
	else if (__tmp > 65535)
    2e22:	6b a1       	ldd	r22, Y+35	; 0x23
    2e24:	7c a1       	ldd	r23, Y+36	; 0x24
    2e26:	8d a1       	ldd	r24, Y+37	; 0x25
    2e28:	9e a1       	ldd	r25, Y+38	; 0x26
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	3f ef       	ldi	r19, 0xFF	; 255
    2e2e:	4f e7       	ldi	r20, 0x7F	; 127
    2e30:	57 e4       	ldi	r21, 0x47	; 71
    2e32:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e36:	18 16       	cp	r1, r24
    2e38:	4c f5       	brge	.+82     	; 0x2e8c <main+0xb22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e3c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e3e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e40:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	40 e2       	ldi	r20, 0x20	; 32
    2e48:	51 e4       	ldi	r21, 0x41	; 65
    2e4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	bc 01       	movw	r22, r24
    2e54:	cd 01       	movw	r24, r26
    2e56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	9a a3       	std	Y+34, r25	; 0x22
    2e60:	89 a3       	std	Y+33, r24	; 0x21
    2e62:	0f c0       	rjmp	.+30     	; 0x2e82 <main+0xb18>
    2e64:	89 e1       	ldi	r24, 0x19	; 25
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	98 a3       	std	Y+32, r25	; 0x20
    2e6a:	8f 8f       	std	Y+31, r24	; 0x1f
    2e6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e6e:	98 a1       	ldd	r25, Y+32	; 0x20
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <main+0xb06>
    2e74:	98 a3       	std	Y+32, r25	; 0x20
    2e76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e78:	89 a1       	ldd	r24, Y+33	; 0x21
    2e7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	9a a3       	std	Y+34, r25	; 0x22
    2e80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e82:	89 a1       	ldd	r24, Y+33	; 0x21
    2e84:	9a a1       	ldd	r25, Y+34	; 0x22
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	69 f7       	brne	.-38     	; 0x2e64 <main+0xafa>
    2e8a:	14 c0       	rjmp	.+40     	; 0x2eb4 <main+0xb4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e90:	8d a1       	ldd	r24, Y+37	; 0x25
    2e92:	9e a1       	ldd	r25, Y+38	; 0x26
    2e94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	9a a3       	std	Y+34, r25	; 0x22
    2e9e:	89 a3       	std	Y+33, r24	; 0x21
    2ea0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ea2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ea4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ea6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ea8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eaa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <main+0xb42>
    2eb0:	9e 8f       	std	Y+30, r25	; 0x1e
    2eb2:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(50);
				UART_sendByte(password_arr[2]);
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e0 57       	subi	r30, 0x70	; 112
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	82 81       	ldd	r24, Z+2	; 0x02
    2ebc:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	a8 e4       	ldi	r26, 0x48	; 72
    2ec6:	b2 e4       	ldi	r27, 0x42	; 66
    2ec8:	89 8f       	std	Y+25, r24	; 0x19
    2eca:	9a 8f       	std	Y+26, r25	; 0x1a
    2ecc:	ab 8f       	std	Y+27, r26	; 0x1b
    2ece:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ed2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ed4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	4a e7       	ldi	r20, 0x7A	; 122
    2ede:	53 e4       	ldi	r21, 0x43	; 67
    2ee0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	8d 8b       	std	Y+21, r24	; 0x15
    2eea:	9e 8b       	std	Y+22, r25	; 0x16
    2eec:	af 8b       	std	Y+23, r26	; 0x17
    2eee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ef0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ef2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ef4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	40 e8       	ldi	r20, 0x80	; 128
    2efe:	5f e3       	ldi	r21, 0x3F	; 63
    2f00:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f04:	88 23       	and	r24, r24
    2f06:	2c f4       	brge	.+10     	; 0x2f12 <main+0xba8>
		__ticks = 1;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	9c 8b       	std	Y+20, r25	; 0x14
    2f0e:	8b 8b       	std	Y+19, r24	; 0x13
    2f10:	3f c0       	rjmp	.+126    	; 0x2f90 <main+0xc26>
	else if (__tmp > 65535)
    2f12:	6d 89       	ldd	r22, Y+21	; 0x15
    2f14:	7e 89       	ldd	r23, Y+22	; 0x16
    2f16:	8f 89       	ldd	r24, Y+23	; 0x17
    2f18:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	3f ef       	ldi	r19, 0xFF	; 255
    2f1e:	4f e7       	ldi	r20, 0x7F	; 127
    2f20:	57 e4       	ldi	r21, 0x47	; 71
    2f22:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f26:	18 16       	cp	r1, r24
    2f28:	4c f5       	brge	.+82     	; 0x2f7c <main+0xc12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e2       	ldi	r20, 0x20	; 32
    2f38:	51 e4       	ldi	r21, 0x41	; 65
    2f3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	bc 01       	movw	r22, r24
    2f44:	cd 01       	movw	r24, r26
    2f46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	9c 8b       	std	Y+20, r25	; 0x14
    2f50:	8b 8b       	std	Y+19, r24	; 0x13
    2f52:	0f c0       	rjmp	.+30     	; 0x2f72 <main+0xc08>
    2f54:	89 e1       	ldi	r24, 0x19	; 25
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	9a 8b       	std	Y+18, r25	; 0x12
    2f5a:	89 8b       	std	Y+17, r24	; 0x11
    2f5c:	89 89       	ldd	r24, Y+17	; 0x11
    2f5e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	f1 f7       	brne	.-4      	; 0x2f60 <main+0xbf6>
    2f64:	9a 8b       	std	Y+18, r25	; 0x12
    2f66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f68:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	9c 8b       	std	Y+20, r25	; 0x14
    2f70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f72:	8b 89       	ldd	r24, Y+19	; 0x13
    2f74:	9c 89       	ldd	r25, Y+20	; 0x14
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	69 f7       	brne	.-38     	; 0x2f54 <main+0xbea>
    2f7a:	14 c0       	rjmp	.+40     	; 0x2fa4 <main+0xc3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f80:	8f 89       	ldd	r24, Y+23	; 0x17
    2f82:	98 8d       	ldd	r25, Y+24	; 0x18
    2f84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	9c 8b       	std	Y+20, r25	; 0x14
    2f8e:	8b 8b       	std	Y+19, r24	; 0x13
    2f90:	8b 89       	ldd	r24, Y+19	; 0x13
    2f92:	9c 89       	ldd	r25, Y+20	; 0x14
    2f94:	98 8b       	std	Y+16, r25	; 0x10
    2f96:	8f 87       	std	Y+15, r24	; 0x0f
    2f98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f9a:	98 89       	ldd	r25, Y+16	; 0x10
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <main+0xc32>
    2fa0:	98 8b       	std	Y+16, r25	; 0x10
    2fa2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(50);
				UART_sendByte(password_arr[3]);
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e0 57       	subi	r30, 0x70	; 112
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	83 81       	ldd	r24, Z+3	; 0x03
    2fac:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	a8 e4       	ldi	r26, 0x48	; 72
    2fb6:	b2 e4       	ldi	r27, 0x42	; 66
    2fb8:	8b 87       	std	Y+11, r24	; 0x0b
    2fba:	9c 87       	std	Y+12, r25	; 0x0c
    2fbc:	ad 87       	std	Y+13, r26	; 0x0d
    2fbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	4a e7       	ldi	r20, 0x7A	; 122
    2fce:	53 e4       	ldi	r21, 0x43	; 67
    2fd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	8f 83       	std	Y+7, r24	; 0x07
    2fda:	98 87       	std	Y+8, r25	; 0x08
    2fdc:	a9 87       	std	Y+9, r26	; 0x09
    2fde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe2:	78 85       	ldd	r23, Y+8	; 0x08
    2fe4:	89 85       	ldd	r24, Y+9	; 0x09
    2fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e8       	ldi	r20, 0x80	; 128
    2fee:	5f e3       	ldi	r21, 0x3F	; 63
    2ff0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ff4:	88 23       	and	r24, r24
    2ff6:	2c f4       	brge	.+10     	; 0x3002 <main+0xc98>
		__ticks = 1;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	9e 83       	std	Y+6, r25	; 0x06
    2ffe:	8d 83       	std	Y+5, r24	; 0x05
    3000:	3f c0       	rjmp	.+126    	; 0x3080 <main+0xd16>
	else if (__tmp > 65535)
    3002:	6f 81       	ldd	r22, Y+7	; 0x07
    3004:	78 85       	ldd	r23, Y+8	; 0x08
    3006:	89 85       	ldd	r24, Y+9	; 0x09
    3008:	9a 85       	ldd	r25, Y+10	; 0x0a
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	3f ef       	ldi	r19, 0xFF	; 255
    300e:	4f e7       	ldi	r20, 0x7F	; 127
    3010:	57 e4       	ldi	r21, 0x47	; 71
    3012:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3016:	18 16       	cp	r1, r24
    3018:	4c f5       	brge	.+82     	; 0x306c <main+0xd02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301a:	6b 85       	ldd	r22, Y+11	; 0x0b
    301c:	7c 85       	ldd	r23, Y+12	; 0x0c
    301e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3020:	9e 85       	ldd	r25, Y+14	; 0x0e
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e2       	ldi	r20, 0x20	; 32
    3028:	51 e4       	ldi	r21, 0x41	; 65
    302a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	bc 01       	movw	r22, r24
    3034:	cd 01       	movw	r24, r26
    3036:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	9e 83       	std	Y+6, r25	; 0x06
    3040:	8d 83       	std	Y+5, r24	; 0x05
    3042:	0f c0       	rjmp	.+30     	; 0x3062 <main+0xcf8>
    3044:	89 e1       	ldi	r24, 0x19	; 25
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	9c 83       	std	Y+4, r25	; 0x04
    304a:	8b 83       	std	Y+3, r24	; 0x03
    304c:	8b 81       	ldd	r24, Y+3	; 0x03
    304e:	9c 81       	ldd	r25, Y+4	; 0x04
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	f1 f7       	brne	.-4      	; 0x3050 <main+0xce6>
    3054:	9c 83       	std	Y+4, r25	; 0x04
    3056:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3058:	8d 81       	ldd	r24, Y+5	; 0x05
    305a:	9e 81       	ldd	r25, Y+6	; 0x06
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	9e 83       	std	Y+6, r25	; 0x06
    3060:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3062:	8d 81       	ldd	r24, Y+5	; 0x05
    3064:	9e 81       	ldd	r25, Y+6	; 0x06
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	69 f7       	brne	.-38     	; 0x3044 <main+0xcda>
    306a:	14 c0       	rjmp	.+40     	; 0x3094 <main+0xd2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306c:	6f 81       	ldd	r22, Y+7	; 0x07
    306e:	78 85       	ldd	r23, Y+8	; 0x08
    3070:	89 85       	ldd	r24, Y+9	; 0x09
    3072:	9a 85       	ldd	r25, Y+10	; 0x0a
    3074:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	9e 83       	std	Y+6, r25	; 0x06
    307e:	8d 83       	std	Y+5, r24	; 0x05
    3080:	8d 81       	ldd	r24, Y+5	; 0x05
    3082:	9e 81       	ldd	r25, Y+6	; 0x06
    3084:	9a 83       	std	Y+2, r25	; 0x02
    3086:	89 83       	std	Y+1, r24	; 0x01
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	9a 81       	ldd	r25, Y+2	; 0x02
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <main+0xd22>
    3090:	9a 83       	std	Y+2, r25	; 0x02
    3092:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				if(UART_recieveByte()){
    3094:	0e 94 9e 18 	call	0x313c	; 0x313c <UART_recieveByte>
    3098:	88 23       	and	r24, r24
    309a:	81 f0       	breq	.+32     	; 0x30bc <main+0xd52>
					choice = 0;
    309c:	fe 01       	movw	r30, r28
    309e:	e1 57       	subi	r30, 0x71	; 113
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	10 82       	st	Z, r1
					key = 0;
    30a4:	fe 01       	movw	r30, r28
    30a6:	e3 57       	subi	r30, 0x73	; 115
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	10 82       	st	Z, r1
					LCD_clearScreen();
    30ac:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_clearScreen>
					LCD_displayString("Password Created");
    30b0:	86 eb       	ldi	r24, 0xB6	; 182
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_displayString>
					LCD_clearScreen();
    30b8:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_clearScreen>
					LCD_displayString("Correct Passcode");
					_delay_ms(1000);
					LCD_clearScreen();
				}
			}
			while(choice == '2'){
    30bc:	fe 01       	movw	r30, r28
    30be:	e1 57       	subi	r30, 0x71	; 113
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	80 81       	ld	r24, Z
    30c4:	82 33       	cpi	r24, 0x32	; 50
    30c6:	09 f4       	brne	.+2      	; 0x30ca <main+0xd60>
    30c8:	fd cd       	rjmp	.-1030   	; 0x2cc4 <main+0x95a>
    30ca:	6c c9       	rjmp	.-3368   	; 0x23a4 <main+0x3a>

000030cc <UART_init>:
#include "uart.h"
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL)))-1)

void UART_init(){
    30cc:	df 93       	push	r29
    30ce:	cf 93       	push	r28
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1<<U2X);
    30d4:	eb e2       	ldi	r30, 0x2B	; 43
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	82 e0       	ldi	r24, 0x02	; 2
    30da:	80 83       	st	Z, r24
	UCSRB = (1<<TXEN)|(1<<RXEN); // The flags are set automatically no need for interrupt
    30dc:	ea e2       	ldi	r30, 0x2A	; 42
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	88 e1       	ldi	r24, 0x18	; 24
    30e2:	80 83       	st	Z, r24
	UCSRC = (1<<URSEL) | (1<<UCSZ1)| (1<<UCSZ0);
    30e4:	e0 e4       	ldi	r30, 0x40	; 64
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	86 e8       	ldi	r24, 0x86	; 134
    30ea:	80 83       	st	Z, r24
	// UBRR is about 2bytes divided to UBRR_High & UBRR_Low
	// Therefore if you have a data more than 1 byte then store this data in  UBRR_High
	// Since URSEL is the first bit in UBRR then it will be set to 0;
	UBRRH = BAUD_PRESCALE >> 8;
    30ec:	e0 e4       	ldi	r30, 0x40	; 64
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    30f2:	e9 e2       	ldi	r30, 0x29	; 41
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	8c e0       	ldi	r24, 0x0C	; 12
    30f8:	80 83       	st	Z, r24
}
    30fa:	cf 91       	pop	r28
    30fc:	df 91       	pop	r29
    30fe:	08 95       	ret

00003100 <UART_sendByte>:
void UART_sendByte(uint8 data){
    3100:	df 93       	push	r29
    3102:	cf 93       	push	r28
    3104:	0f 92       	push	r0
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	89 83       	std	Y+1, r24	; 0x01
	UDR = data; //Transmit
    310c:	ec e2       	ldi	r30, 0x2C	; 44
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	80 83       	st	Z, r24
	while(bitIsClear(UCSRA,TXC)); // Wait for transmit flag
    3114:	eb e2       	ldi	r30, 0x2B	; 43
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
    311a:	88 2f       	mov	r24, r24
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	80 74       	andi	r24, 0x40	; 64
    3120:	90 70       	andi	r25, 0x00	; 0
    3122:	00 97       	sbiw	r24, 0x00	; 0
    3124:	b9 f3       	breq	.-18     	; 0x3114 <UART_sendByte+0x14>
	setBit(UCSRA,TXC); //Clear flag
    3126:	ab e2       	ldi	r26, 0x2B	; 43
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	eb e2       	ldi	r30, 0x2B	; 43
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	80 64       	ori	r24, 0x40	; 64
    3132:	8c 93       	st	X, r24
}
    3134:	0f 90       	pop	r0
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <UART_recieveByte>:
uint8 UART_recieveByte(){
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
	while(bitIsClear(UCSRA,RXC)){}
    3144:	eb e2       	ldi	r30, 0x2B	; 43
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
    314a:	88 23       	and	r24, r24
    314c:	dc f7       	brge	.-10     	; 0x3144 <UART_recieveByte+0x8>
	return UDR;
    314e:	ec e2       	ldi	r30, 0x2C	; 44
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
}
    3154:	cf 91       	pop	r28
    3156:	df 91       	pop	r29
    3158:	08 95       	ret

0000315a <UART_sendString>:
void UART_sendString(uint8 *Str){
    315a:	df 93       	push	r29
    315c:	cf 93       	push	r28
    315e:	00 d0       	rcall	.+0      	; 0x3160 <UART_sendString+0x6>
    3160:	0f 92       	push	r0
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	9b 83       	std	Y+3, r25	; 0x03
    3168:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    316a:	19 82       	std	Y+1, r1	; 0x01
    316c:	0e c0       	rjmp	.+28     	; 0x318a <UART_sendString+0x30>
	while(Str[i] != '\0'){
		UART_sendByte(Str[i]);
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	28 2f       	mov	r18, r24
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	8a 81       	ldd	r24, Y+2	; 0x02
    3176:	9b 81       	ldd	r25, Y+3	; 0x03
    3178:	fc 01       	movw	r30, r24
    317a:	e2 0f       	add	r30, r18
    317c:	f3 1f       	adc	r31, r19
    317e:	80 81       	ld	r24, Z
    3180:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
		i++;
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	8f 5f       	subi	r24, 0xFF	; 255
    3188:	89 83       	std	Y+1, r24	; 0x01
	while(bitIsClear(UCSRA,RXC)){}
	return UDR;
}
void UART_sendString(uint8 *Str){
	uint8 i = 0;
	while(Str[i] != '\0'){
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	28 2f       	mov	r18, r24
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	8a 81       	ldd	r24, Y+2	; 0x02
    3192:	9b 81       	ldd	r25, Y+3	; 0x03
    3194:	fc 01       	movw	r30, r24
    3196:	e2 0f       	add	r30, r18
    3198:	f3 1f       	adc	r31, r19
    319a:	80 81       	ld	r24, Z
    319c:	88 23       	and	r24, r24
    319e:	39 f7       	brne	.-50     	; 0x316e <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}
}
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	cf 91       	pop	r28
    31a8:	df 91       	pop	r29
    31aa:	08 95       	ret

000031ac <UART_recieveString>:
void UART_recieveString(uint8 * Str){
    31ac:	0f 93       	push	r16
    31ae:	1f 93       	push	r17
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	00 d0       	rcall	.+0      	; 0x31b6 <UART_recieveString+0xa>
    31b6:	0f 92       	push	r0
    31b8:	cd b7       	in	r28, 0x3d	; 61
    31ba:	de b7       	in	r29, 0x3e	; 62
    31bc:	9b 83       	std	Y+3, r25	; 0x03
    31be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    31c0:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte(); // Checks if there is even a msg
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	28 2f       	mov	r18, r24
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ca:	9b 81       	ldd	r25, Y+3	; 0x03
    31cc:	8c 01       	movw	r16, r24
    31ce:	02 0f       	add	r16, r18
    31d0:	13 1f       	adc	r17, r19
    31d2:	0e 94 9e 18 	call	0x313c	; 0x313c <UART_recieveByte>
    31d6:	f8 01       	movw	r30, r16
    31d8:	80 83       	st	Z, r24
    31da:	0f c0       	rjmp	.+30     	; 0x31fa <UART_recieveString+0x4e>
	while(Str[i] == '#'){ // The agreed stop symbol because there is no representation in data.
		i++;
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	8f 5f       	subi	r24, 0xFF	; 255
    31e0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	28 2f       	mov	r18, r24
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ea:	9b 81       	ldd	r25, Y+3	; 0x03
    31ec:	8c 01       	movw	r16, r24
    31ee:	02 0f       	add	r16, r18
    31f0:	13 1f       	adc	r17, r19
    31f2:	0e 94 9e 18 	call	0x313c	; 0x313c <UART_recieveByte>
    31f6:	f8 01       	movw	r30, r16
    31f8:	80 83       	st	Z, r24
	}
}
void UART_recieveString(uint8 * Str){
	uint8 i = 0;
	Str[i] = UART_recieveByte(); // Checks if there is even a msg
	while(Str[i] == '#'){ // The agreed stop symbol because there is no representation in data.
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
    31fc:	28 2f       	mov	r18, r24
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	9b 81       	ldd	r25, Y+3	; 0x03
    3204:	fc 01       	movw	r30, r24
    3206:	e2 0f       	add	r30, r18
    3208:	f3 1f       	adc	r31, r19
    320a:	80 81       	ld	r24, Z
    320c:	83 32       	cpi	r24, 0x23	; 35
    320e:	31 f3       	breq	.-52     	; 0x31dc <UART_recieveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0'; // let the agreed stop sign be the end of the string.
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	8a 81       	ldd	r24, Y+2	; 0x02
    3218:	9b 81       	ldd	r25, Y+3	; 0x03
    321a:	fc 01       	movw	r30, r24
    321c:	e2 0f       	add	r30, r18
    321e:	f3 1f       	adc	r31, r19
    3220:	10 82       	st	Z, r1
}
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	cf 91       	pop	r28
    322a:	df 91       	pop	r29
    322c:	1f 91       	pop	r17
    322e:	0f 91       	pop	r16
    3230:	08 95       	ret

00003232 <__prologue_saves__>:
    3232:	2f 92       	push	r2
    3234:	3f 92       	push	r3
    3236:	4f 92       	push	r4
    3238:	5f 92       	push	r5
    323a:	6f 92       	push	r6
    323c:	7f 92       	push	r7
    323e:	8f 92       	push	r8
    3240:	9f 92       	push	r9
    3242:	af 92       	push	r10
    3244:	bf 92       	push	r11
    3246:	cf 92       	push	r12
    3248:	df 92       	push	r13
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	ca 1b       	sub	r28, r26
    325c:	db 0b       	sbc	r29, r27
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	de bf       	out	0x3e, r29	; 62
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	09 94       	ijmp

0000326a <__epilogue_restores__>:
    326a:	2a 88       	ldd	r2, Y+18	; 0x12
    326c:	39 88       	ldd	r3, Y+17	; 0x11
    326e:	48 88       	ldd	r4, Y+16	; 0x10
    3270:	5f 84       	ldd	r5, Y+15	; 0x0f
    3272:	6e 84       	ldd	r6, Y+14	; 0x0e
    3274:	7d 84       	ldd	r7, Y+13	; 0x0d
    3276:	8c 84       	ldd	r8, Y+12	; 0x0c
    3278:	9b 84       	ldd	r9, Y+11	; 0x0b
    327a:	aa 84       	ldd	r10, Y+10	; 0x0a
    327c:	b9 84       	ldd	r11, Y+9	; 0x09
    327e:	c8 84       	ldd	r12, Y+8	; 0x08
    3280:	df 80       	ldd	r13, Y+7	; 0x07
    3282:	ee 80       	ldd	r14, Y+6	; 0x06
    3284:	fd 80       	ldd	r15, Y+5	; 0x05
    3286:	0c 81       	ldd	r16, Y+4	; 0x04
    3288:	1b 81       	ldd	r17, Y+3	; 0x03
    328a:	aa 81       	ldd	r26, Y+2	; 0x02
    328c:	b9 81       	ldd	r27, Y+1	; 0x01
    328e:	ce 0f       	add	r28, r30
    3290:	d1 1d       	adc	r29, r1
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	f8 94       	cli
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	cd bf       	out	0x3d, r28	; 61
    329c:	ed 01       	movw	r28, r26
    329e:	08 95       	ret

000032a0 <itoa>:
    32a0:	fb 01       	movw	r30, r22
    32a2:	9f 01       	movw	r18, r30
    32a4:	e8 94       	clt
    32a6:	42 30       	cpi	r20, 0x02	; 2
    32a8:	c4 f0       	brlt	.+48     	; 0x32da <itoa+0x3a>
    32aa:	45 32       	cpi	r20, 0x25	; 37
    32ac:	b4 f4       	brge	.+44     	; 0x32da <itoa+0x3a>
    32ae:	4a 30       	cpi	r20, 0x0A	; 10
    32b0:	29 f4       	brne	.+10     	; 0x32bc <itoa+0x1c>
    32b2:	97 fb       	bst	r25, 7
    32b4:	1e f4       	brtc	.+6      	; 0x32bc <itoa+0x1c>
    32b6:	90 95       	com	r25
    32b8:	81 95       	neg	r24
    32ba:	9f 4f       	sbci	r25, 0xFF	; 255
    32bc:	64 2f       	mov	r22, r20
    32be:	77 27       	eor	r23, r23
    32c0:	0e 94 81 19 	call	0x3302	; 0x3302 <__udivmodhi4>
    32c4:	80 5d       	subi	r24, 0xD0	; 208
    32c6:	8a 33       	cpi	r24, 0x3A	; 58
    32c8:	0c f0       	brlt	.+2      	; 0x32cc <itoa+0x2c>
    32ca:	89 5d       	subi	r24, 0xD9	; 217
    32cc:	81 93       	st	Z+, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	00 97       	sbiw	r24, 0x00	; 0
    32d2:	a1 f7       	brne	.-24     	; 0x32bc <itoa+0x1c>
    32d4:	16 f4       	brtc	.+4      	; 0x32da <itoa+0x3a>
    32d6:	5d e2       	ldi	r21, 0x2D	; 45
    32d8:	51 93       	st	Z+, r21
    32da:	10 82       	st	Z, r1
    32dc:	c9 01       	movw	r24, r18
    32de:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <strrev>

000032e2 <strrev>:
    32e2:	dc 01       	movw	r26, r24
    32e4:	fc 01       	movw	r30, r24
    32e6:	67 2f       	mov	r22, r23
    32e8:	71 91       	ld	r23, Z+
    32ea:	77 23       	and	r23, r23
    32ec:	e1 f7       	brne	.-8      	; 0x32e6 <strrev+0x4>
    32ee:	32 97       	sbiw	r30, 0x02	; 2
    32f0:	04 c0       	rjmp	.+8      	; 0x32fa <strrev+0x18>
    32f2:	7c 91       	ld	r23, X
    32f4:	6d 93       	st	X+, r22
    32f6:	70 83       	st	Z, r23
    32f8:	62 91       	ld	r22, -Z
    32fa:	ae 17       	cp	r26, r30
    32fc:	bf 07       	cpc	r27, r31
    32fe:	c8 f3       	brcs	.-14     	; 0x32f2 <strrev+0x10>
    3300:	08 95       	ret

00003302 <__udivmodhi4>:
    3302:	aa 1b       	sub	r26, r26
    3304:	bb 1b       	sub	r27, r27
    3306:	51 e1       	ldi	r21, 0x11	; 17
    3308:	07 c0       	rjmp	.+14     	; 0x3318 <__udivmodhi4_ep>

0000330a <__udivmodhi4_loop>:
    330a:	aa 1f       	adc	r26, r26
    330c:	bb 1f       	adc	r27, r27
    330e:	a6 17       	cp	r26, r22
    3310:	b7 07       	cpc	r27, r23
    3312:	10 f0       	brcs	.+4      	; 0x3318 <__udivmodhi4_ep>
    3314:	a6 1b       	sub	r26, r22
    3316:	b7 0b       	sbc	r27, r23

00003318 <__udivmodhi4_ep>:
    3318:	88 1f       	adc	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	5a 95       	dec	r21
    331e:	a9 f7       	brne	.-22     	; 0x330a <__udivmodhi4_loop>
    3320:	80 95       	com	r24
    3322:	90 95       	com	r25
    3324:	bc 01       	movw	r22, r24
    3326:	cd 01       	movw	r24, r26
    3328:	08 95       	ret

0000332a <_exit>:
    332a:	f8 94       	cli

0000332c <__stop_program>:
    332c:	ff cf       	rjmp	.-2      	; 0x332c <__stop_program>
