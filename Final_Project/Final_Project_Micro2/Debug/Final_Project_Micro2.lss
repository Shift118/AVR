
Final_Project_Micro2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000026f8  0000276c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e78  00000000  00000000  00002774  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ab1  00000000  00000000  000045ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000509d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000051dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000534d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000901d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000097eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <main>
      7a:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <EEPROM_init>:
#include "External_EEPROM.h"
#include "i2c.h"

void EEPROM_init(){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	TWI_init();
     b3e:	0e 94 45 06 	call	0xc8a	; 0xc8a <TWI_init>
}
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	08 95       	ret

00000b48 <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data){
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <EEPROM_writeByte+0x6>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <EEPROM_writeByte+0x8>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01
     b58:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     b5a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_start>

	if (TWI_getStatus() != TW_START){
     b5e:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     b62:	88 30       	cpi	r24, 0x08	; 8
     b64:	11 f0       	breq	.+4      	; 0xb6a <EEPROM_writeByte+0x22>
			return ERROR;
     b66:	1c 82       	std	Y+4, r1	; 0x04
     b68:	28 c0       	rjmp	.+80     	; 0xbba <EEPROM_writeByte+0x72>
	}//                                       A10,A9,A8, (R/W = 0)"Write"
	//                             1010 or (SlaveAdress & 0111 0000 0000) >> 7)
	TWI_write((uint8)(0xA0 | ( (u16addr & 0x0700)>>7) ));
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	80 70       	andi	r24, 0x00	; 0
     b70:	97 70       	andi	r25, 0x07	; 7
     b72:	88 0f       	add	r24, r24
     b74:	89 2f       	mov	r24, r25
     b76:	88 1f       	adc	r24, r24
     b78:	99 0b       	sbc	r25, r25
     b7a:	91 95       	neg	r25
     b7c:	80 6a       	ori	r24, 0xA0	; 160
     b7e:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>

	if (TWI_getStatus() != TW_MT_SLA_W_ACK){
     b82:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     b86:	88 31       	cpi	r24, 0x18	; 24
     b88:	11 f0       	breq	.+4      	; 0xb8e <EEPROM_writeByte+0x46>
		return ERROR;
     b8a:	1c 82       	std	Y+4, r1	; 0x04
     b8c:	16 c0       	rjmp	.+44     	; 0xbba <EEPROM_writeByte+0x72>
	}
	TWI_write((uint8)(u16addr)); // Send the required Memory Location
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>

	if(TWI_getStatus() != TW_MT_DATA_ACK){
     b94:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     b98:	88 32       	cpi	r24, 0x28	; 40
     b9a:	11 f0       	breq	.+4      	; 0xba0 <EEPROM_writeByte+0x58>
		return ERROR;
     b9c:	1c 82       	std	Y+4, r1	; 0x04
     b9e:	0d c0       	rjmp	.+26     	; 0xbba <EEPROM_writeByte+0x72>
	}
	TWI_write(u8data);// write byte to eeprom
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>

	if (TWI_getStatus() != TW_MT_DATA_ACK){
     ba6:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     baa:	88 32       	cpi	r24, 0x28	; 40
     bac:	11 f0       	breq	.+4      	; 0xbb2 <EEPROM_writeByte+0x6a>
		return ERROR;
     bae:	1c 82       	std	Y+4, r1	; 0x04
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <EEPROM_writeByte+0x72>
	}
	TWI_stop();
     bb2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TWI_stop>
	return SUCCESS;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 83       	std	Y+4, r24	; 0x04
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data){
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <EEPROM_readByte+0x6>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <EEPROM_readByte+0x8>
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	9a 83       	std	Y+2, r25	; 0x02
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	7c 83       	std	Y+4, r23	; 0x04
     bde:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     be0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_start>
	if (TWI_getStatus() != TW_START){
     be4:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     be8:	88 30       	cpi	r24, 0x08	; 8
     bea:	11 f0       	breq	.+4      	; 0xbf0 <EEPROM_readByte+0x26>
		return ERROR;
     bec:	1d 82       	std	Y+5, r1	; 0x05
     bee:	44 c0       	rjmp	.+136    	; 0xc78 <EEPROM_readByte+0xae>
	}
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	80 70       	andi	r24, 0x00	; 0
     bf6:	97 70       	andi	r25, 0x07	; 7
     bf8:	88 0f       	add	r24, r24
     bfa:	89 2f       	mov	r24, r25
     bfc:	88 1f       	adc	r24, r24
     bfe:	99 0b       	sbc	r25, r25
     c00:	91 95       	neg	r25
     c02:	80 6a       	ori	r24, 0xA0	; 160
     c04:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>

	if (TWI_getStatus() != TW_MT_SLA_W_ACK){
     c08:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c0c:	88 31       	cpi	r24, 0x18	; 24
     c0e:	11 f0       	breq	.+4      	; 0xc14 <EEPROM_readByte+0x4a>
		return ERROR;
     c10:	1d 82       	std	Y+5, r1	; 0x05
     c12:	32 c0       	rjmp	.+100    	; 0xc78 <EEPROM_readByte+0xae>
	}

	TWI_write((uint8)(u16addr)); // Memory Location.
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK){
     c1a:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c1e:	88 32       	cpi	r24, 0x28	; 40
     c20:	11 f0       	breq	.+4      	; 0xc26 <EEPROM_readByte+0x5c>
		return ERROR;
     c22:	1d 82       	std	Y+5, r1	; 0x05
     c24:	29 c0       	rjmp	.+82     	; 0xc78 <EEPROM_readByte+0xae>
	}

	//////Send Repeated Start Bit//////
	TWI_start(); // repeated start
     c26:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_start>
	if(TWI_getStatus() != TW_REP_START){
     c2a:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c2e:	80 31       	cpi	r24, 0x10	; 16
     c30:	11 f0       	breq	.+4      	; 0xc36 <EEPROM_readByte+0x6c>
		return ERROR;
     c32:	1d 82       	std	Y+5, r1	; 0x05
     c34:	21 c0       	rjmp	.+66     	; 0xc78 <EEPROM_readByte+0xae>
	}

	//                                          Memory Location + Read
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	80 70       	andi	r24, 0x00	; 0
     c3c:	97 70       	andi	r25, 0x07	; 7
     c3e:	88 0f       	add	r24, r24
     c40:	89 2f       	mov	r24, r25
     c42:	88 1f       	adc	r24, r24
     c44:	99 0b       	sbc	r25, r25
     c46:	91 95       	neg	r25
     c48:	81 6a       	ori	r24, 0xA1	; 161
     c4a:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
	if(TWI_getStatus() != TW_MT_SLA_R_ACK){
     c4e:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c52:	80 34       	cpi	r24, 0x40	; 64
     c54:	11 f0       	breq	.+4      	; 0xc5a <EEPROM_readByte+0x90>
		return ERROR;
     c56:	1d 82       	std	Y+5, r1	; 0x05
     c58:	0f c0       	rjmp	.+30     	; 0xc78 <EEPROM_readByte+0xae>
	}

	*u8data = TWI_readWithNACK();
     c5a:	0e 94 a0 06 	call	0xd40	; 0xd40 <TWI_readWithNACK>
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	80 83       	st	Z, r24
	if(TWI_getStatus() != TW_MR_DATA_NACK){
     c64:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c68:	88 35       	cpi	r24, 0x58	; 88
     c6a:	11 f0       	breq	.+4      	; 0xc70 <EEPROM_readByte+0xa6>
		return ERROR;
     c6c:	1d 82       	std	Y+5, r1	; 0x05
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <EEPROM_readByte+0xae>
	}
	TWI_stop();
     c70:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TWI_stop>
	return SUCCESS;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	8d 83       	std	Y+5, r24	; 0x05
     c78:	8d 81       	ldd	r24, Y+5	; 0x05

}
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <TWI_init>:
#include "i2c.h"

void TWI_init(){
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
	TWBR = 0x02; // Bit Rate: 400.000 kbps using 0 prescaler "TWSR" and F_cpu = 8MHZ;
     c92:	e0 e2       	ldi	r30, 0x20	; 32
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	80 83       	st	Z, r24
	TWSR = 0;
     c9a:	e1 e2       	ldi	r30, 0x21	; 33
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	10 82       	st	Z, r1
	TWI address bits contain TWI 7-bit address with which it can called by other masters in slave mode.

	Bit 0 – TWGCE: TWI general call enable bit
	TWI general call enable bit when set it enables recognition of general call over the TWI bus
*/
	TWAR = 0b00000010;  // My address for slave mode.
     ca0:	e2 e2       	ldi	r30, 0x22	; 34
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	80 83       	st	Z, r24
	TWCR = (1<<TWEN); // TWI enable bit
     ca8:	e6 e5       	ldi	r30, 0x56	; 86
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	80 83       	st	Z, r24
}
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <TWI_start>:
void TWI_start(){
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // Clear flag for further use , Start bit, Enable I2C bit
     cbe:	e6 e5       	ldi	r30, 0x56	; 86
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	84 ea       	ldi	r24, 0xA4	; 164
     cc4:	80 83       	st	Z, r24
	while(bitIsClear(TWCR,TWINT)); // While is cleared wait , But when transmit is successful continue.
     cc6:	e6 e5       	ldi	r30, 0x56	; 86
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	88 23       	and	r24, r24
     cce:	dc f7       	brge	.-10     	; 0xcc6 <TWI_start+0x10>
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <TWI_stop>:
void TWI_stop(){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // Clear flag for further use , Stop bit, Enable I2C Bit.
     cde:	e6 e5       	ldi	r30, 0x56	; 86
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	84 e9       	ldi	r24, 0x94	; 148
     ce4:	80 83       	st	Z, r24
	// Here I don't care about checking the flag because I have already stopped.
}
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <TWI_write>:
void TWI_write(uint8 data){
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	0f 92       	push	r0
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
     cf8:	e3 e2       	ldi	r30, 0x23	; 35
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);// Clear flag for further use, Enable I2C bit
     d00:	e6 e5       	ldi	r30, 0x56	; 86
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	84 e8       	ldi	r24, 0x84	; 132
     d06:	80 83       	st	Z, r24
	while(bitIsClear(TWCR,TWINT));
     d08:	e6 e5       	ldi	r30, 0x56	; 86
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	88 23       	and	r24, r24
     d10:	dc f7       	brge	.-10     	; 0xd08 <TWI_write+0x1c>
}
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <TWI_readWithACK>:
uint8 TWI_readWithACK(){
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     d22:	e6 e5       	ldi	r30, 0x56	; 86
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	84 ec       	ldi	r24, 0xC4	; 196
     d28:	80 83       	st	Z, r24
	while(bitIsClear(TWCR,TWINT));
     d2a:	e6 e5       	ldi	r30, 0x56	; 86
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 23       	and	r24, r24
     d32:	dc f7       	brge	.-10     	; 0xd2a <TWI_readWithACK+0x10>
	return TWDR;
     d34:	e3 e2       	ldi	r30, 0x23	; 35
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
}
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <TWI_readWithNACK>:
uint8 TWI_readWithNACK(){
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
     d48:	e6 e5       	ldi	r30, 0x56	; 86
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	84 e8       	ldi	r24, 0x84	; 132
     d4e:	80 83       	st	Z, r24
	while(bitIsClear(TWCR,TWINT));
     d50:	e6 e5       	ldi	r30, 0x56	; 86
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	88 23       	and	r24, r24
     d58:	dc f7       	brge	.-10     	; 0xd50 <TWI_readWithNACK+0x10>
	return TWDR;
     d5a:	e3 e2       	ldi	r30, 0x23	; 35
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
}
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <TWI_getStatus>:
uint8 TWI_getStatus(){
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	0f 92       	push	r0
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	status = TWSR & 0xf8; // I only need the last 5 bit (status bits)
     d70:	e1 e2       	ldi	r30, 0x21	; 33
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	88 7f       	andi	r24, 0xF8	; 248
     d78:	89 83       	std	Y+1, r24	; 0x01
	return status;
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <PassCheckResponse>:
#define read "read"
#define correct 1
#define wrong 0


void PassCheckResponse(bool condition){
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	a1 97       	sbiw	r28, 0x21	; 33
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	89 a3       	std	Y+33, r24	; 0x21
	if (condition == wrong){
     d9a:	89 a1       	ldd	r24, Y+33	; 0x21
     d9c:	88 23       	and	r24, r24
     d9e:	09 f0       	breq	.+2      	; 0xda2 <PassCheckResponse+0x1e>
     da0:	b3 c0       	rjmp	.+358    	; 0xf08 <PassCheckResponse+0x184>
		setBit(PORTD,PD7); //buzzer
     da2:	a2 e3       	ldi	r26, 0x32	; 50
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e2 e3       	ldi	r30, 0x32	; 50
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	80 68       	ori	r24, 0x80	; 128
     dae:	8c 93       	st	X, r24
		setBit(PORTD,PD2); // Motor
     db0:	a2 e3       	ldi	r26, 0x32	; 50
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e2 e3       	ldi	r30, 0x32	; 50
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	84 60       	ori	r24, 0x04	; 4
     dbc:	8c 93       	st	X, r24
		clearBit(PORTD,PD5); // Motor
     dbe:	a2 e3       	ldi	r26, 0x32	; 50
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e2 e3       	ldi	r30, 0x32	; 50
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8f 7d       	andi	r24, 0xDF	; 223
     dca:	8c 93       	st	X, r24
		for (int i = 0 ; i < 3 ; i++){
     dcc:	18 a2       	std	Y+32, r1	; 0x20
     dce:	1f 8e       	std	Y+31, r1	; 0x1f
     dd0:	7f c0       	rjmp	.+254    	; 0xed0 <PassCheckResponse+0x14c>
			toggleBit(PORTD,PD4); // red led
     dd2:	a2 e3       	ldi	r26, 0x32	; 50
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e2 e3       	ldi	r30, 0x32	; 50
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	90 81       	ld	r25, Z
     ddc:	80 e1       	ldi	r24, 0x10	; 16
     dde:	89 27       	eor	r24, r25
     de0:	8c 93       	st	X, r24
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	aa ef       	ldi	r26, 0xFA	; 250
     de8:	b3 e4       	ldi	r27, 0x43	; 67
     dea:	89 8f       	std	Y+25, r24	; 0x19
     dec:	9a 8f       	std	Y+26, r25	; 0x1a
     dee:	ab 8f       	std	Y+27, r26	; 0x1b
     df0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df2:	69 8d       	ldd	r22, Y+25	; 0x19
     df4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     df6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     df8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	4a e7       	ldi	r20, 0x7A	; 122
     e00:	53 e4       	ldi	r21, 0x43	; 67
     e02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	8d 8b       	std	Y+21, r24	; 0x15
     e0c:	9e 8b       	std	Y+22, r25	; 0x16
     e0e:	af 8b       	std	Y+23, r26	; 0x17
     e10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e12:	6d 89       	ldd	r22, Y+21	; 0x15
     e14:	7e 89       	ldd	r23, Y+22	; 0x16
     e16:	8f 89       	ldd	r24, Y+23	; 0x17
     e18:	98 8d       	ldd	r25, Y+24	; 0x18
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e8       	ldi	r20, 0x80	; 128
     e20:	5f e3       	ldi	r21, 0x3F	; 63
     e22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e26:	88 23       	and	r24, r24
     e28:	2c f4       	brge	.+10     	; 0xe34 <PassCheckResponse+0xb0>
		__ticks = 1;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	9c 8b       	std	Y+20, r25	; 0x14
     e30:	8b 8b       	std	Y+19, r24	; 0x13
     e32:	3f c0       	rjmp	.+126    	; 0xeb2 <PassCheckResponse+0x12e>
	else if (__tmp > 65535)
     e34:	6d 89       	ldd	r22, Y+21	; 0x15
     e36:	7e 89       	ldd	r23, Y+22	; 0x16
     e38:	8f 89       	ldd	r24, Y+23	; 0x17
     e3a:	98 8d       	ldd	r25, Y+24	; 0x18
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	3f ef       	ldi	r19, 0xFF	; 255
     e40:	4f e7       	ldi	r20, 0x7F	; 127
     e42:	57 e4       	ldi	r21, 0x47	; 71
     e44:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e48:	18 16       	cp	r1, r24
     e4a:	4c f5       	brge	.+82     	; 0xe9e <PassCheckResponse+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4c:	69 8d       	ldd	r22, Y+25	; 0x19
     e4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e50:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e52:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e2       	ldi	r20, 0x20	; 32
     e5a:	51 e4       	ldi	r21, 0x41	; 65
     e5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	bc 01       	movw	r22, r24
     e66:	cd 01       	movw	r24, r26
     e68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	9c 8b       	std	Y+20, r25	; 0x14
     e72:	8b 8b       	std	Y+19, r24	; 0x13
     e74:	0f c0       	rjmp	.+30     	; 0xe94 <PassCheckResponse+0x110>
     e76:	89 e1       	ldi	r24, 0x19	; 25
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9a 8b       	std	Y+18, r25	; 0x12
     e7c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e7e:	89 89       	ldd	r24, Y+17	; 0x11
     e80:	9a 89       	ldd	r25, Y+18	; 0x12
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <PassCheckResponse+0xfe>
     e86:	9a 8b       	std	Y+18, r25	; 0x12
     e88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8a:	8b 89       	ldd	r24, Y+19	; 0x13
     e8c:	9c 89       	ldd	r25, Y+20	; 0x14
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	9c 8b       	std	Y+20, r25	; 0x14
     e92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e94:	8b 89       	ldd	r24, Y+19	; 0x13
     e96:	9c 89       	ldd	r25, Y+20	; 0x14
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	69 f7       	brne	.-38     	; 0xe76 <PassCheckResponse+0xf2>
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <PassCheckResponse+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9e:	6d 89       	ldd	r22, Y+21	; 0x15
     ea0:	7e 89       	ldd	r23, Y+22	; 0x16
     ea2:	8f 89       	ldd	r24, Y+23	; 0x17
     ea4:	98 8d       	ldd	r25, Y+24	; 0x18
     ea6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	9c 8b       	std	Y+20, r25	; 0x14
     eb0:	8b 8b       	std	Y+19, r24	; 0x13
     eb2:	8b 89       	ldd	r24, Y+19	; 0x13
     eb4:	9c 89       	ldd	r25, Y+20	; 0x14
     eb6:	98 8b       	std	Y+16, r25	; 0x10
     eb8:	8f 87       	std	Y+15, r24	; 0x0f
     eba:	8f 85       	ldd	r24, Y+15	; 0x0f
     ebc:	98 89       	ldd	r25, Y+16	; 0x10
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <PassCheckResponse+0x13a>
     ec2:	98 8b       	std	Y+16, r25	; 0x10
     ec4:	8f 87       	std	Y+15, r24	; 0x0f
void PassCheckResponse(bool condition){
	if (condition == wrong){
		setBit(PORTD,PD7); //buzzer
		setBit(PORTD,PD2); // Motor
		clearBit(PORTD,PD5); // Motor
		for (int i = 0 ; i < 3 ; i++){
     ec6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ec8:	98 a1       	ldd	r25, Y+32	; 0x20
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	98 a3       	std	Y+32, r25	; 0x20
     ece:	8f 8f       	std	Y+31, r24	; 0x1f
     ed0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ed2:	98 a1       	ldd	r25, Y+32	; 0x20
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	91 05       	cpc	r25, r1
     ed8:	0c f4       	brge	.+2      	; 0xedc <PassCheckResponse+0x158>
     eda:	7b cf       	rjmp	.-266    	; 0xdd2 <PassCheckResponse+0x4e>
			toggleBit(PORTD,PD4); // red led
			_delay_ms(500);
		}
		clearBit(PORTD,PD7); //Buzzer
     edc:	a2 e3       	ldi	r26, 0x32	; 50
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e2 e3       	ldi	r30, 0x32	; 50
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8f 77       	andi	r24, 0x7F	; 127
     ee8:	8c 93       	st	X, r24
		clearBit(PORTD,PD4); //red led
     eea:	a2 e3       	ldi	r26, 0x32	; 50
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e2 e3       	ldi	r30, 0x32	; 50
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8f 7e       	andi	r24, 0xEF	; 239
     ef6:	8c 93       	st	X, r24
		clearBit(PORTD,PD2); //Motor
     ef8:	a2 e3       	ldi	r26, 0x32	; 50
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e2 e3       	ldi	r30, 0x32	; 50
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	8b 7f       	andi	r24, 0xFB	; 251
     f04:	8c 93       	st	X, r24
     f06:	a8 c0       	rjmp	.+336    	; 0x1058 <PassCheckResponse+0x2d4>
	}
	else if(condition == correct){
     f08:	89 a1       	ldd	r24, Y+33	; 0x21
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <PassCheckResponse+0x18c>
     f0e:	a4 c0       	rjmp	.+328    	; 0x1058 <PassCheckResponse+0x2d4>
		clearBit(PORTD,PD2); // Motor
     f10:	a2 e3       	ldi	r26, 0x32	; 50
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e2 e3       	ldi	r30, 0x32	; 50
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8b 7f       	andi	r24, 0xFB	; 251
     f1c:	8c 93       	st	X, r24
		setBit(PORTD,PD5); // Motor
     f1e:	a2 e3       	ldi	r26, 0x32	; 50
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e2 e3       	ldi	r30, 0x32	; 50
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 62       	ori	r24, 0x20	; 32
     f2a:	8c 93       	st	X, r24
		for (int i = 0 ; i < 3 ; i++){
     f2c:	1e 8e       	std	Y+30, r1	; 0x1e
     f2e:	1d 8e       	std	Y+29, r1	; 0x1d
     f30:	7f c0       	rjmp	.+254    	; 0x1030 <PassCheckResponse+0x2ac>
			toggleBit(PORTD,PD3); // red led
     f32:	a2 e3       	ldi	r26, 0x32	; 50
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e2 e3       	ldi	r30, 0x32	; 50
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	88 e0       	ldi	r24, 0x08	; 8
     f3e:	89 27       	eor	r24, r25
     f40:	8c 93       	st	X, r24
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	aa ef       	ldi	r26, 0xFA	; 250
     f48:	b3 e4       	ldi	r27, 0x43	; 67
     f4a:	8b 87       	std	Y+11, r24	; 0x0b
     f4c:	9c 87       	std	Y+12, r25	; 0x0c
     f4e:	ad 87       	std	Y+13, r26	; 0x0d
     f50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f52:	6b 85       	ldd	r22, Y+11	; 0x0b
     f54:	7c 85       	ldd	r23, Y+12	; 0x0c
     f56:	8d 85       	ldd	r24, Y+13	; 0x0d
     f58:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	4a e7       	ldi	r20, 0x7A	; 122
     f60:	53 e4       	ldi	r21, 0x43	; 67
     f62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	8f 83       	std	Y+7, r24	; 0x07
     f6c:	98 87       	std	Y+8, r25	; 0x08
     f6e:	a9 87       	std	Y+9, r26	; 0x09
     f70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f72:	6f 81       	ldd	r22, Y+7	; 0x07
     f74:	78 85       	ldd	r23, Y+8	; 0x08
     f76:	89 85       	ldd	r24, Y+9	; 0x09
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e8       	ldi	r20, 0x80	; 128
     f80:	5f e3       	ldi	r21, 0x3F	; 63
     f82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f86:	88 23       	and	r24, r24
     f88:	2c f4       	brge	.+10     	; 0xf94 <PassCheckResponse+0x210>
		__ticks = 1;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	9e 83       	std	Y+6, r25	; 0x06
     f90:	8d 83       	std	Y+5, r24	; 0x05
     f92:	3f c0       	rjmp	.+126    	; 0x1012 <PassCheckResponse+0x28e>
	else if (__tmp > 65535)
     f94:	6f 81       	ldd	r22, Y+7	; 0x07
     f96:	78 85       	ldd	r23, Y+8	; 0x08
     f98:	89 85       	ldd	r24, Y+9	; 0x09
     f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	3f ef       	ldi	r19, 0xFF	; 255
     fa0:	4f e7       	ldi	r20, 0x7F	; 127
     fa2:	57 e4       	ldi	r21, 0x47	; 71
     fa4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fa8:	18 16       	cp	r1, r24
     faa:	4c f5       	brge	.+82     	; 0xffe <PassCheckResponse+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fac:	6b 85       	ldd	r22, Y+11	; 0x0b
     fae:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e2       	ldi	r20, 0x20	; 32
     fba:	51 e4       	ldi	r21, 0x41	; 65
     fbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9e 83       	std	Y+6, r25	; 0x06
     fd2:	8d 83       	std	Y+5, r24	; 0x05
     fd4:	0f c0       	rjmp	.+30     	; 0xff4 <PassCheckResponse+0x270>
     fd6:	89 e1       	ldi	r24, 0x19	; 25
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	9c 83       	std	Y+4, r25	; 0x04
     fdc:	8b 83       	std	Y+3, r24	; 0x03
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <PassCheckResponse+0x25e>
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	9e 83       	std	Y+6, r25	; 0x06
     ff2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	69 f7       	brne	.-38     	; 0xfd6 <PassCheckResponse+0x252>
     ffc:	14 c0       	rjmp	.+40     	; 0x1026 <PassCheckResponse+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    1000:	78 85       	ldd	r23, Y+8	; 0x08
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	9a 85       	ldd	r25, Y+10	; 0x0a
    1006:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	9e 81       	ldd	r25, Y+6	; 0x06
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	9a 81       	ldd	r25, Y+2	; 0x02
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <PassCheckResponse+0x29a>
    1022:	9a 83       	std	Y+2, r25	; 0x02
    1024:	89 83       	std	Y+1, r24	; 0x01
		clearBit(PORTD,PD2); //Motor
	}
	else if(condition == correct){
		clearBit(PORTD,PD2); // Motor
		setBit(PORTD,PD5); // Motor
		for (int i = 0 ; i < 3 ; i++){
    1026:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1028:	9e 8d       	ldd	r25, Y+30	; 0x1e
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	9e 8f       	std	Y+30, r25	; 0x1e
    102e:	8d 8f       	std	Y+29, r24	; 0x1d
    1030:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1032:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1034:	83 30       	cpi	r24, 0x03	; 3
    1036:	91 05       	cpc	r25, r1
    1038:	0c f4       	brge	.+2      	; 0x103c <PassCheckResponse+0x2b8>
    103a:	7b cf       	rjmp	.-266    	; 0xf32 <PassCheckResponse+0x1ae>
			toggleBit(PORTD,PD3); // red led
			_delay_ms(500);
		}
		clearBit(PORTD,PD3); //red led
    103c:	a2 e3       	ldi	r26, 0x32	; 50
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e2 e3       	ldi	r30, 0x32	; 50
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	87 7f       	andi	r24, 0xF7	; 247
    1048:	8c 93       	st	X, r24
		clearBit(PORTD,PD5); //Motor
    104a:	a2 e3       	ldi	r26, 0x32	; 50
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e2 e3       	ldi	r30, 0x32	; 50
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8f 7d       	andi	r24, 0xDF	; 223
    1056:	8c 93       	st	X, r24
	}
}
    1058:	a1 96       	adiw	r28, 0x21	; 33
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <passCheck>:

uint8 passCheck(uint8 * pass_arr){
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	ef 97       	sbiw	r28, 0x3f	; 63
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	9e af       	std	Y+62, r25	; 0x3e
    1080:	8d af       	std	Y+61, r24	; 0x3d
	uint8 pin1,pin2,pin3,pin4;
	EEPROM_readByte(0x0311, &pin1);
    1082:	9e 01       	movw	r18, r28
    1084:	27 5c       	subi	r18, 0xC7	; 199
    1086:	3f 4f       	sbci	r19, 0xFF	; 255
    1088:	81 e1       	ldi	r24, 0x11	; 17
    108a:	93 e0       	ldi	r25, 0x03	; 3
    108c:	b9 01       	movw	r22, r18
    108e:	0e 94 e5 05 	call	0xbca	; 0xbca <EEPROM_readByte>
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	a0 e2       	ldi	r26, 0x20	; 32
    1098:	b1 e4       	ldi	r27, 0x41	; 65
    109a:	8d ab       	std	Y+53, r24	; 0x35
    109c:	9e ab       	std	Y+54, r25	; 0x36
    109e:	af ab       	std	Y+55, r26	; 0x37
    10a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a2:	6d a9       	ldd	r22, Y+53	; 0x35
    10a4:	7e a9       	ldd	r23, Y+54	; 0x36
    10a6:	8f a9       	ldd	r24, Y+55	; 0x37
    10a8:	98 ad       	ldd	r25, Y+56	; 0x38
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	4a e7       	ldi	r20, 0x7A	; 122
    10b0:	53 e4       	ldi	r21, 0x43	; 67
    10b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	89 ab       	std	Y+49, r24	; 0x31
    10bc:	9a ab       	std	Y+50, r25	; 0x32
    10be:	ab ab       	std	Y+51, r26	; 0x33
    10c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10c2:	69 a9       	ldd	r22, Y+49	; 0x31
    10c4:	7a a9       	ldd	r23, Y+50	; 0x32
    10c6:	8b a9       	ldd	r24, Y+51	; 0x33
    10c8:	9c a9       	ldd	r25, Y+52	; 0x34
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e8       	ldi	r20, 0x80	; 128
    10d0:	5f e3       	ldi	r21, 0x3F	; 63
    10d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10d6:	88 23       	and	r24, r24
    10d8:	2c f4       	brge	.+10     	; 0x10e4 <passCheck+0x7a>
		__ticks = 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	98 ab       	std	Y+48, r25	; 0x30
    10e0:	8f a7       	std	Y+47, r24	; 0x2f
    10e2:	3f c0       	rjmp	.+126    	; 0x1162 <passCheck+0xf8>
	else if (__tmp > 65535)
    10e4:	69 a9       	ldd	r22, Y+49	; 0x31
    10e6:	7a a9       	ldd	r23, Y+50	; 0x32
    10e8:	8b a9       	ldd	r24, Y+51	; 0x33
    10ea:	9c a9       	ldd	r25, Y+52	; 0x34
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	3f ef       	ldi	r19, 0xFF	; 255
    10f0:	4f e7       	ldi	r20, 0x7F	; 127
    10f2:	57 e4       	ldi	r21, 0x47	; 71
    10f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10f8:	18 16       	cp	r1, r24
    10fa:	4c f5       	brge	.+82     	; 0x114e <passCheck+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fc:	6d a9       	ldd	r22, Y+53	; 0x35
    10fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1100:	8f a9       	ldd	r24, Y+55	; 0x37
    1102:	98 ad       	ldd	r25, Y+56	; 0x38
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e2       	ldi	r20, 0x20	; 32
    110a:	51 e4       	ldi	r21, 0x41	; 65
    110c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	bc 01       	movw	r22, r24
    1116:	cd 01       	movw	r24, r26
    1118:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	98 ab       	std	Y+48, r25	; 0x30
    1122:	8f a7       	std	Y+47, r24	; 0x2f
    1124:	0f c0       	rjmp	.+30     	; 0x1144 <passCheck+0xda>
    1126:	89 e1       	ldi	r24, 0x19	; 25
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9e a7       	std	Y+46, r25	; 0x2e
    112c:	8d a7       	std	Y+45, r24	; 0x2d
    112e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1130:	9e a5       	ldd	r25, Y+46	; 0x2e
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <passCheck+0xc8>
    1136:	9e a7       	std	Y+46, r25	; 0x2e
    1138:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113a:	8f a5       	ldd	r24, Y+47	; 0x2f
    113c:	98 a9       	ldd	r25, Y+48	; 0x30
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	98 ab       	std	Y+48, r25	; 0x30
    1142:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1144:	8f a5       	ldd	r24, Y+47	; 0x2f
    1146:	98 a9       	ldd	r25, Y+48	; 0x30
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	69 f7       	brne	.-38     	; 0x1126 <passCheck+0xbc>
    114c:	14 c0       	rjmp	.+40     	; 0x1176 <passCheck+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114e:	69 a9       	ldd	r22, Y+49	; 0x31
    1150:	7a a9       	ldd	r23, Y+50	; 0x32
    1152:	8b a9       	ldd	r24, Y+51	; 0x33
    1154:	9c a9       	ldd	r25, Y+52	; 0x34
    1156:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	98 ab       	std	Y+48, r25	; 0x30
    1160:	8f a7       	std	Y+47, r24	; 0x2f
    1162:	8f a5       	ldd	r24, Y+47	; 0x2f
    1164:	98 a9       	ldd	r25, Y+48	; 0x30
    1166:	9c a7       	std	Y+44, r25	; 0x2c
    1168:	8b a7       	std	Y+43, r24	; 0x2b
    116a:	8b a5       	ldd	r24, Y+43	; 0x2b
    116c:	9c a5       	ldd	r25, Y+44	; 0x2c
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	f1 f7       	brne	.-4      	; 0x116e <passCheck+0x104>
    1172:	9c a7       	std	Y+44, r25	; 0x2c
    1174:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	EEPROM_readByte(0x0312, &pin2);
    1176:	9e 01       	movw	r18, r28
    1178:	26 5c       	subi	r18, 0xC6	; 198
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
    117c:	82 e1       	ldi	r24, 0x12	; 18
    117e:	93 e0       	ldi	r25, 0x03	; 3
    1180:	b9 01       	movw	r22, r18
    1182:	0e 94 e5 05 	call	0xbca	; 0xbca <EEPROM_readByte>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a0 e2       	ldi	r26, 0x20	; 32
    118c:	b1 e4       	ldi	r27, 0x41	; 65
    118e:	8f a3       	std	Y+39, r24	; 0x27
    1190:	98 a7       	std	Y+40, r25	; 0x28
    1192:	a9 a7       	std	Y+41, r26	; 0x29
    1194:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1196:	6f a1       	ldd	r22, Y+39	; 0x27
    1198:	78 a5       	ldd	r23, Y+40	; 0x28
    119a:	89 a5       	ldd	r24, Y+41	; 0x29
    119c:	9a a5       	ldd	r25, Y+42	; 0x2a
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	4a e7       	ldi	r20, 0x7A	; 122
    11a4:	53 e4       	ldi	r21, 0x43	; 67
    11a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	8b a3       	std	Y+35, r24	; 0x23
    11b0:	9c a3       	std	Y+36, r25	; 0x24
    11b2:	ad a3       	std	Y+37, r26	; 0x25
    11b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11b6:	6b a1       	ldd	r22, Y+35	; 0x23
    11b8:	7c a1       	ldd	r23, Y+36	; 0x24
    11ba:	8d a1       	ldd	r24, Y+37	; 0x25
    11bc:	9e a1       	ldd	r25, Y+38	; 0x26
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e8       	ldi	r20, 0x80	; 128
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11ca:	88 23       	and	r24, r24
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <passCheck+0x16e>
		__ticks = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9a a3       	std	Y+34, r25	; 0x22
    11d4:	89 a3       	std	Y+33, r24	; 0x21
    11d6:	3f c0       	rjmp	.+126    	; 0x1256 <passCheck+0x1ec>
	else if (__tmp > 65535)
    11d8:	6b a1       	ldd	r22, Y+35	; 0x23
    11da:	7c a1       	ldd	r23, Y+36	; 0x24
    11dc:	8d a1       	ldd	r24, Y+37	; 0x25
    11de:	9e a1       	ldd	r25, Y+38	; 0x26
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	3f ef       	ldi	r19, 0xFF	; 255
    11e4:	4f e7       	ldi	r20, 0x7F	; 127
    11e6:	57 e4       	ldi	r21, 0x47	; 71
    11e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11ec:	18 16       	cp	r1, r24
    11ee:	4c f5       	brge	.+82     	; 0x1242 <passCheck+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f0:	6f a1       	ldd	r22, Y+39	; 0x27
    11f2:	78 a5       	ldd	r23, Y+40	; 0x28
    11f4:	89 a5       	ldd	r24, Y+41	; 0x29
    11f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e2       	ldi	r20, 0x20	; 32
    11fe:	51 e4       	ldi	r21, 0x41	; 65
    1200:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	bc 01       	movw	r22, r24
    120a:	cd 01       	movw	r24, r26
    120c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9a a3       	std	Y+34, r25	; 0x22
    1216:	89 a3       	std	Y+33, r24	; 0x21
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <passCheck+0x1ce>
    121a:	89 e1       	ldi	r24, 0x19	; 25
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	98 a3       	std	Y+32, r25	; 0x20
    1220:	8f 8f       	std	Y+31, r24	; 0x1f
    1222:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1224:	98 a1       	ldd	r25, Y+32	; 0x20
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <passCheck+0x1bc>
    122a:	98 a3       	std	Y+32, r25	; 0x20
    122c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122e:	89 a1       	ldd	r24, Y+33	; 0x21
    1230:	9a a1       	ldd	r25, Y+34	; 0x22
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	9a a3       	std	Y+34, r25	; 0x22
    1236:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1238:	89 a1       	ldd	r24, Y+33	; 0x21
    123a:	9a a1       	ldd	r25, Y+34	; 0x22
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	69 f7       	brne	.-38     	; 0x121a <passCheck+0x1b0>
    1240:	14 c0       	rjmp	.+40     	; 0x126a <passCheck+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1242:	6b a1       	ldd	r22, Y+35	; 0x23
    1244:	7c a1       	ldd	r23, Y+36	; 0x24
    1246:	8d a1       	ldd	r24, Y+37	; 0x25
    1248:	9e a1       	ldd	r25, Y+38	; 0x26
    124a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9a a3       	std	Y+34, r25	; 0x22
    1254:	89 a3       	std	Y+33, r24	; 0x21
    1256:	89 a1       	ldd	r24, Y+33	; 0x21
    1258:	9a a1       	ldd	r25, Y+34	; 0x22
    125a:	9e 8f       	std	Y+30, r25	; 0x1e
    125c:	8d 8f       	std	Y+29, r24	; 0x1d
    125e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1260:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <passCheck+0x1f8>
    1266:	9e 8f       	std	Y+30, r25	; 0x1e
    1268:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	EEPROM_readByte(0x0313, &pin3);
    126a:	9e 01       	movw	r18, r28
    126c:	25 5c       	subi	r18, 0xC5	; 197
    126e:	3f 4f       	sbci	r19, 0xFF	; 255
    1270:	83 e1       	ldi	r24, 0x13	; 19
    1272:	93 e0       	ldi	r25, 0x03	; 3
    1274:	b9 01       	movw	r22, r18
    1276:	0e 94 e5 05 	call	0xbca	; 0xbca <EEPROM_readByte>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 e2       	ldi	r26, 0x20	; 32
    1280:	b1 e4       	ldi	r27, 0x41	; 65
    1282:	89 8f       	std	Y+25, r24	; 0x19
    1284:	9a 8f       	std	Y+26, r25	; 0x1a
    1286:	ab 8f       	std	Y+27, r26	; 0x1b
    1288:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128a:	69 8d       	ldd	r22, Y+25	; 0x19
    128c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    128e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1290:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	4a e7       	ldi	r20, 0x7A	; 122
    1298:	53 e4       	ldi	r21, 0x43	; 67
    129a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	8d 8b       	std	Y+21, r24	; 0x15
    12a4:	9e 8b       	std	Y+22, r25	; 0x16
    12a6:	af 8b       	std	Y+23, r26	; 0x17
    12a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12aa:	6d 89       	ldd	r22, Y+21	; 0x15
    12ac:	7e 89       	ldd	r23, Y+22	; 0x16
    12ae:	8f 89       	ldd	r24, Y+23	; 0x17
    12b0:	98 8d       	ldd	r25, Y+24	; 0x18
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e8       	ldi	r20, 0x80	; 128
    12b8:	5f e3       	ldi	r21, 0x3F	; 63
    12ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12be:	88 23       	and	r24, r24
    12c0:	2c f4       	brge	.+10     	; 0x12cc <passCheck+0x262>
		__ticks = 1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9c 8b       	std	Y+20, r25	; 0x14
    12c8:	8b 8b       	std	Y+19, r24	; 0x13
    12ca:	3f c0       	rjmp	.+126    	; 0x134a <passCheck+0x2e0>
	else if (__tmp > 65535)
    12cc:	6d 89       	ldd	r22, Y+21	; 0x15
    12ce:	7e 89       	ldd	r23, Y+22	; 0x16
    12d0:	8f 89       	ldd	r24, Y+23	; 0x17
    12d2:	98 8d       	ldd	r25, Y+24	; 0x18
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	3f ef       	ldi	r19, 0xFF	; 255
    12d8:	4f e7       	ldi	r20, 0x7F	; 127
    12da:	57 e4       	ldi	r21, 0x47	; 71
    12dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12e0:	18 16       	cp	r1, r24
    12e2:	4c f5       	brge	.+82     	; 0x1336 <passCheck+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e4:	69 8d       	ldd	r22, Y+25	; 0x19
    12e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	51 e4       	ldi	r21, 0x41	; 65
    12f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9c 8b       	std	Y+20, r25	; 0x14
    130a:	8b 8b       	std	Y+19, r24	; 0x13
    130c:	0f c0       	rjmp	.+30     	; 0x132c <passCheck+0x2c2>
    130e:	89 e1       	ldi	r24, 0x19	; 25
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9a 8b       	std	Y+18, r25	; 0x12
    1314:	89 8b       	std	Y+17, r24	; 0x11
    1316:	89 89       	ldd	r24, Y+17	; 0x11
    1318:	9a 89       	ldd	r25, Y+18	; 0x12
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <passCheck+0x2b0>
    131e:	9a 8b       	std	Y+18, r25	; 0x12
    1320:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1322:	8b 89       	ldd	r24, Y+19	; 0x13
    1324:	9c 89       	ldd	r25, Y+20	; 0x14
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	9c 8b       	std	Y+20, r25	; 0x14
    132a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132c:	8b 89       	ldd	r24, Y+19	; 0x13
    132e:	9c 89       	ldd	r25, Y+20	; 0x14
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	69 f7       	brne	.-38     	; 0x130e <passCheck+0x2a4>
    1334:	14 c0       	rjmp	.+40     	; 0x135e <passCheck+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1336:	6d 89       	ldd	r22, Y+21	; 0x15
    1338:	7e 89       	ldd	r23, Y+22	; 0x16
    133a:	8f 89       	ldd	r24, Y+23	; 0x17
    133c:	98 8d       	ldd	r25, Y+24	; 0x18
    133e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9c 8b       	std	Y+20, r25	; 0x14
    1348:	8b 8b       	std	Y+19, r24	; 0x13
    134a:	8b 89       	ldd	r24, Y+19	; 0x13
    134c:	9c 89       	ldd	r25, Y+20	; 0x14
    134e:	98 8b       	std	Y+16, r25	; 0x10
    1350:	8f 87       	std	Y+15, r24	; 0x0f
    1352:	8f 85       	ldd	r24, Y+15	; 0x0f
    1354:	98 89       	ldd	r25, Y+16	; 0x10
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <passCheck+0x2ec>
    135a:	98 8b       	std	Y+16, r25	; 0x10
    135c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	EEPROM_readByte(0x0314, &pin4);
    135e:	9e 01       	movw	r18, r28
    1360:	24 5c       	subi	r18, 0xC4	; 196
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	84 e1       	ldi	r24, 0x14	; 20
    1366:	93 e0       	ldi	r25, 0x03	; 3
    1368:	b9 01       	movw	r22, r18
    136a:	0e 94 e5 05 	call	0xbca	; 0xbca <EEPROM_readByte>
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a0 e2       	ldi	r26, 0x20	; 32
    1374:	b1 e4       	ldi	r27, 0x41	; 65
    1376:	8b 87       	std	Y+11, r24	; 0x0b
    1378:	9c 87       	std	Y+12, r25	; 0x0c
    137a:	ad 87       	std	Y+13, r26	; 0x0d
    137c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    137e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1380:	7c 85       	ldd	r23, Y+12	; 0x0c
    1382:	8d 85       	ldd	r24, Y+13	; 0x0d
    1384:	9e 85       	ldd	r25, Y+14	; 0x0e
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	4a e7       	ldi	r20, 0x7A	; 122
    138c:	53 e4       	ldi	r21, 0x43	; 67
    138e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	8f 83       	std	Y+7, r24	; 0x07
    1398:	98 87       	std	Y+8, r25	; 0x08
    139a:	a9 87       	std	Y+9, r26	; 0x09
    139c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    139e:	6f 81       	ldd	r22, Y+7	; 0x07
    13a0:	78 85       	ldd	r23, Y+8	; 0x08
    13a2:	89 85       	ldd	r24, Y+9	; 0x09
    13a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e8       	ldi	r20, 0x80	; 128
    13ac:	5f e3       	ldi	r21, 0x3F	; 63
    13ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13b2:	88 23       	and	r24, r24
    13b4:	2c f4       	brge	.+10     	; 0x13c0 <passCheck+0x356>
		__ticks = 1;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	8d 83       	std	Y+5, r24	; 0x05
    13be:	3f c0       	rjmp	.+126    	; 0x143e <passCheck+0x3d4>
	else if (__tmp > 65535)
    13c0:	6f 81       	ldd	r22, Y+7	; 0x07
    13c2:	78 85       	ldd	r23, Y+8	; 0x08
    13c4:	89 85       	ldd	r24, Y+9	; 0x09
    13c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	3f ef       	ldi	r19, 0xFF	; 255
    13cc:	4f e7       	ldi	r20, 0x7F	; 127
    13ce:	57 e4       	ldi	r21, 0x47	; 71
    13d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13d4:	18 16       	cp	r1, r24
    13d6:	4c f5       	brge	.+82     	; 0x142a <passCheck+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13da:	7c 85       	ldd	r23, Y+12	; 0x0c
    13dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13de:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e2       	ldi	r20, 0x20	; 32
    13e6:	51 e4       	ldi	r21, 0x41	; 65
    13e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	bc 01       	movw	r22, r24
    13f2:	cd 01       	movw	r24, r26
    13f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	9e 83       	std	Y+6, r25	; 0x06
    13fe:	8d 83       	std	Y+5, r24	; 0x05
    1400:	0f c0       	rjmp	.+30     	; 0x1420 <passCheck+0x3b6>
    1402:	89 e1       	ldi	r24, 0x19	; 25
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9c 83       	std	Y+4, r25	; 0x04
    1408:	8b 83       	std	Y+3, r24	; 0x03
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <passCheck+0x3a4>
    1412:	9c 83       	std	Y+4, r25	; 0x04
    1414:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	9e 83       	std	Y+6, r25	; 0x06
    141e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	69 f7       	brne	.-38     	; 0x1402 <passCheck+0x398>
    1428:	14 c0       	rjmp	.+40     	; 0x1452 <passCheck+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142a:	6f 81       	ldd	r22, Y+7	; 0x07
    142c:	78 85       	ldd	r23, Y+8	; 0x08
    142e:	89 85       	ldd	r24, Y+9	; 0x09
    1430:	9a 85       	ldd	r25, Y+10	; 0x0a
    1432:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	9e 83       	std	Y+6, r25	; 0x06
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	9a 83       	std	Y+2, r25	; 0x02
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <passCheck+0x3e0>
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	if(pass_arr[0] != pin1){return 0;}
    1452:	ed ad       	ldd	r30, Y+61	; 0x3d
    1454:	fe ad       	ldd	r31, Y+62	; 0x3e
    1456:	90 81       	ld	r25, Z
    1458:	89 ad       	ldd	r24, Y+57	; 0x39
    145a:	98 17       	cp	r25, r24
    145c:	11 f0       	breq	.+4      	; 0x1462 <passCheck+0x3f8>
    145e:	1f ae       	std	Y+63, r1	; 0x3f
    1460:	20 c0       	rjmp	.+64     	; 0x14a2 <passCheck+0x438>
	else if(pass_arr[1] != pin2){return 0;}
    1462:	8d ad       	ldd	r24, Y+61	; 0x3d
    1464:	9e ad       	ldd	r25, Y+62	; 0x3e
    1466:	fc 01       	movw	r30, r24
    1468:	31 96       	adiw	r30, 0x01	; 1
    146a:	90 81       	ld	r25, Z
    146c:	8a ad       	ldd	r24, Y+58	; 0x3a
    146e:	98 17       	cp	r25, r24
    1470:	11 f0       	breq	.+4      	; 0x1476 <passCheck+0x40c>
    1472:	1f ae       	std	Y+63, r1	; 0x3f
    1474:	16 c0       	rjmp	.+44     	; 0x14a2 <passCheck+0x438>
	else if(pass_arr[2] != pin3){return 0;}
    1476:	8d ad       	ldd	r24, Y+61	; 0x3d
    1478:	9e ad       	ldd	r25, Y+62	; 0x3e
    147a:	fc 01       	movw	r30, r24
    147c:	32 96       	adiw	r30, 0x02	; 2
    147e:	90 81       	ld	r25, Z
    1480:	8b ad       	ldd	r24, Y+59	; 0x3b
    1482:	98 17       	cp	r25, r24
    1484:	11 f0       	breq	.+4      	; 0x148a <passCheck+0x420>
    1486:	1f ae       	std	Y+63, r1	; 0x3f
    1488:	0c c0       	rjmp	.+24     	; 0x14a2 <passCheck+0x438>
	else if(pass_arr[3] != pin4){return 0;}
    148a:	8d ad       	ldd	r24, Y+61	; 0x3d
    148c:	9e ad       	ldd	r25, Y+62	; 0x3e
    148e:	fc 01       	movw	r30, r24
    1490:	33 96       	adiw	r30, 0x03	; 3
    1492:	90 81       	ld	r25, Z
    1494:	8c ad       	ldd	r24, Y+60	; 0x3c
    1496:	98 17       	cp	r25, r24
    1498:	11 f0       	breq	.+4      	; 0x149e <passCheck+0x434>
    149a:	1f ae       	std	Y+63, r1	; 0x3f
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <passCheck+0x438>
	return 1;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	8f af       	std	Y+63, r24	; 0x3f
    14a2:	8f ad       	ldd	r24, Y+63	; 0x3f
}
    14a4:	ef 96       	adiw	r28, 0x3f	; 63
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <main>:
int main(void){
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	ce 5a       	subi	r28, 0xAE	; 174
    14c4:	d0 40       	sbci	r29, 0x00	; 0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
	//init
	setBit(DDRD,PD7);
    14d0:	a1 e3       	ldi	r26, 0x31	; 49
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e1 e3       	ldi	r30, 0x31	; 49
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	80 68       	ori	r24, 0x80	; 128
    14dc:	8c 93       	st	X, r24
	setBit(DDRD,PD5);
    14de:	a1 e3       	ldi	r26, 0x31	; 49
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e1 e3       	ldi	r30, 0x31	; 49
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	80 62       	ori	r24, 0x20	; 32
    14ea:	8c 93       	st	X, r24
	setBit(DDRD,PD4);
    14ec:	a1 e3       	ldi	r26, 0x31	; 49
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e1 e3       	ldi	r30, 0x31	; 49
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	80 61       	ori	r24, 0x10	; 16
    14f8:	8c 93       	st	X, r24
	setBit(DDRD,PD3);
    14fa:	a1 e3       	ldi	r26, 0x31	; 49
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e1 e3       	ldi	r30, 0x31	; 49
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	88 60       	ori	r24, 0x08	; 8
    1506:	8c 93       	st	X, r24
	setBit(DDRD,PD2);
    1508:	a1 e3       	ldi	r26, 0x31	; 49
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e1 e3       	ldi	r30, 0x31	; 49
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	84 60       	ori	r24, 0x04	; 4
    1514:	8c 93       	st	X, r24
	clearBit(PORTD,PD7);
    1516:	a2 e3       	ldi	r26, 0x32	; 50
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e2 e3       	ldi	r30, 0x32	; 50
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8f 77       	andi	r24, 0x7F	; 127
    1522:	8c 93       	st	X, r24
	clearBit(PORTD,PD5);
    1524:	a2 e3       	ldi	r26, 0x32	; 50
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e2 e3       	ldi	r30, 0x32	; 50
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8f 7d       	andi	r24, 0xDF	; 223
    1530:	8c 93       	st	X, r24
	clearBit(PORTD,PD4);
    1532:	a2 e3       	ldi	r26, 0x32	; 50
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e2 e3       	ldi	r30, 0x32	; 50
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	8f 7e       	andi	r24, 0xEF	; 239
    153e:	8c 93       	st	X, r24
	clearBit(PORTD,PD3);
    1540:	a2 e3       	ldi	r26, 0x32	; 50
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e2 e3       	ldi	r30, 0x32	; 50
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	87 7f       	andi	r24, 0xF7	; 247
    154c:	8c 93       	st	X, r24
	clearBit(PORTD,PD2);
    154e:	a2 e3       	ldi	r26, 0x32	; 50
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e2 e3       	ldi	r30, 0x32	; 50
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	8b 7f       	andi	r24, 0xFB	; 251
    155a:	8c 93       	st	X, r24
	// EEPROM
	uint8 password[4] , choice = 0 ,count = 0;
    155c:	fe 01       	movw	r30, r28
    155e:	e6 55       	subi	r30, 0x56	; 86
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	10 82       	st	Z, r1
    1564:	fe 01       	movw	r30, r28
    1566:	e7 55       	subi	r30, 0x57	; 87
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	10 82       	st	Z, r1

	EEPROM_init();
    156c:	0e 94 9b 05 	call	0xb36	; 0xb36 <EEPROM_init>
	EEPROM_writeByte(0x0311, '0');
    1570:	81 e1       	ldi	r24, 0x11	; 17
    1572:	93 e0       	ldi	r25, 0x03	; 3
    1574:	60 e3       	ldi	r22, 0x30	; 48
    1576:	0e 94 a4 05 	call	0xb48	; 0xb48 <EEPROM_writeByte>
    157a:	fe 01       	movw	r30, r28
    157c:	eb 55       	subi	r30, 0x5B	; 91
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	a0 e2       	ldi	r26, 0x20	; 32
    1586:	b1 e4       	ldi	r27, 0x41	; 65
    1588:	80 83       	st	Z, r24
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	a2 83       	std	Z+2, r26	; 0x02
    158e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1590:	8e 01       	movw	r16, r28
    1592:	0f 55       	subi	r16, 0x5F	; 95
    1594:	1f 4f       	sbci	r17, 0xFF	; 255
    1596:	fe 01       	movw	r30, r28
    1598:	eb 55       	subi	r30, 0x5B	; 91
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	60 81       	ld	r22, Z
    159e:	71 81       	ldd	r23, Z+1	; 0x01
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	93 81       	ldd	r25, Z+3	; 0x03
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4a e7       	ldi	r20, 0x7A	; 122
    15aa:	53 e4       	ldi	r21, 0x43	; 67
    15ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	f8 01       	movw	r30, r16
    15b6:	80 83       	st	Z, r24
    15b8:	91 83       	std	Z+1, r25	; 0x01
    15ba:	a2 83       	std	Z+2, r26	; 0x02
    15bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15be:	fe 01       	movw	r30, r28
    15c0:	ef 55       	subi	r30, 0x5F	; 95
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	60 81       	ld	r22, Z
    15c6:	71 81       	ldd	r23, Z+1	; 0x01
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e8       	ldi	r20, 0x80	; 128
    15d2:	5f e3       	ldi	r21, 0x3F	; 63
    15d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15d8:	88 23       	and	r24, r24
    15da:	44 f4       	brge	.+16     	; 0x15ec <main+0x136>
		__ticks = 1;
    15dc:	fe 01       	movw	r30, r28
    15de:	e1 56       	subi	r30, 0x61	; 97
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	91 83       	std	Z+1, r25	; 0x01
    15e8:	80 83       	st	Z, r24
    15ea:	64 c0       	rjmp	.+200    	; 0x16b4 <main+0x1fe>
	else if (__tmp > 65535)
    15ec:	fe 01       	movw	r30, r28
    15ee:	ef 55       	subi	r30, 0x5F	; 95
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	60 81       	ld	r22, Z
    15f4:	71 81       	ldd	r23, Z+1	; 0x01
    15f6:	82 81       	ldd	r24, Z+2	; 0x02
    15f8:	93 81       	ldd	r25, Z+3	; 0x03
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	3f ef       	ldi	r19, 0xFF	; 255
    15fe:	4f e7       	ldi	r20, 0x7F	; 127
    1600:	57 e4       	ldi	r21, 0x47	; 71
    1602:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1606:	18 16       	cp	r1, r24
    1608:	0c f0       	brlt	.+2      	; 0x160c <main+0x156>
    160a:	43 c0       	rjmp	.+134    	; 0x1692 <main+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160c:	fe 01       	movw	r30, r28
    160e:	eb 55       	subi	r30, 0x5B	; 91
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e2       	ldi	r20, 0x20	; 32
    1620:	51 e4       	ldi	r21, 0x41	; 65
    1622:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	8e 01       	movw	r16, r28
    162c:	01 56       	subi	r16, 0x61	; 97
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	bc 01       	movw	r22, r24
    1632:	cd 01       	movw	r24, r26
    1634:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	f8 01       	movw	r30, r16
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	80 83       	st	Z, r24
    1642:	1f c0       	rjmp	.+62     	; 0x1682 <main+0x1cc>
    1644:	fe 01       	movw	r30, r28
    1646:	e3 56       	subi	r30, 0x63	; 99
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	89 e1       	ldi	r24, 0x19	; 25
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	91 83       	std	Z+1, r25	; 0x01
    1650:	80 83       	st	Z, r24
    1652:	fe 01       	movw	r30, r28
    1654:	e3 56       	subi	r30, 0x63	; 99
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	80 81       	ld	r24, Z
    165a:	91 81       	ldd	r25, Z+1	; 0x01
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <main+0x1a6>
    1660:	fe 01       	movw	r30, r28
    1662:	e3 56       	subi	r30, 0x63	; 99
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	91 83       	std	Z+1, r25	; 0x01
    1668:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166a:	de 01       	movw	r26, r28
    166c:	a1 56       	subi	r26, 0x61	; 97
    166e:	bf 4f       	sbci	r27, 0xFF	; 255
    1670:	fe 01       	movw	r30, r28
    1672:	e1 56       	subi	r30, 0x61	; 97
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	11 96       	adiw	r26, 0x01	; 1
    167e:	9c 93       	st	X, r25
    1680:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1682:	fe 01       	movw	r30, r28
    1684:	e1 56       	subi	r30, 0x61	; 97
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	d1 f6       	brne	.-76     	; 0x1644 <main+0x18e>
    1690:	27 c0       	rjmp	.+78     	; 0x16e0 <main+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1692:	8e 01       	movw	r16, r28
    1694:	01 56       	subi	r16, 0x61	; 97
    1696:	1f 4f       	sbci	r17, 0xFF	; 255
    1698:	fe 01       	movw	r30, r28
    169a:	ef 55       	subi	r30, 0x5F	; 95
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	f8 01       	movw	r30, r16
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	80 83       	st	Z, r24
    16b4:	de 01       	movw	r26, r28
    16b6:	a5 56       	subi	r26, 0x65	; 101
    16b8:	bf 4f       	sbci	r27, 0xFF	; 255
    16ba:	fe 01       	movw	r30, r28
    16bc:	e1 56       	subi	r30, 0x61	; 97
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 81       	ld	r24, Z
    16c2:	91 81       	ldd	r25, Z+1	; 0x01
    16c4:	8d 93       	st	X+, r24
    16c6:	9c 93       	st	X, r25
    16c8:	fe 01       	movw	r30, r28
    16ca:	e5 56       	subi	r30, 0x65	; 101
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	80 81       	ld	r24, Z
    16d0:	91 81       	ldd	r25, Z+1	; 0x01
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <main+0x21c>
    16d6:	fe 01       	movw	r30, r28
    16d8:	e5 56       	subi	r30, 0x65	; 101
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	91 83       	std	Z+1, r25	; 0x01
    16de:	80 83       	st	Z, r24
	_delay_ms(10);
	EEPROM_writeByte(0x0312, '0');
    16e0:	82 e1       	ldi	r24, 0x12	; 18
    16e2:	93 e0       	ldi	r25, 0x03	; 3
    16e4:	60 e3       	ldi	r22, 0x30	; 48
    16e6:	0e 94 a4 05 	call	0xb48	; 0xb48 <EEPROM_writeByte>
    16ea:	fe 01       	movw	r30, r28
    16ec:	e9 56       	subi	r30, 0x69	; 105
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a0 e2       	ldi	r26, 0x20	; 32
    16f6:	b1 e4       	ldi	r27, 0x41	; 65
    16f8:	80 83       	st	Z, r24
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	a2 83       	std	Z+2, r26	; 0x02
    16fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1700:	8e 01       	movw	r16, r28
    1702:	0d 56       	subi	r16, 0x6D	; 109
    1704:	1f 4f       	sbci	r17, 0xFF	; 255
    1706:	fe 01       	movw	r30, r28
    1708:	e9 56       	subi	r30, 0x69	; 105
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	60 81       	ld	r22, Z
    170e:	71 81       	ldd	r23, Z+1	; 0x01
    1710:	82 81       	ldd	r24, Z+2	; 0x02
    1712:	93 81       	ldd	r25, Z+3	; 0x03
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	4a e7       	ldi	r20, 0x7A	; 122
    171a:	53 e4       	ldi	r21, 0x43	; 67
    171c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	f8 01       	movw	r30, r16
    1726:	80 83       	st	Z, r24
    1728:	91 83       	std	Z+1, r25	; 0x01
    172a:	a2 83       	std	Z+2, r26	; 0x02
    172c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    172e:	fe 01       	movw	r30, r28
    1730:	ed 56       	subi	r30, 0x6D	; 109
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e8       	ldi	r20, 0x80	; 128
    1742:	5f e3       	ldi	r21, 0x3F	; 63
    1744:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1748:	88 23       	and	r24, r24
    174a:	44 f4       	brge	.+16     	; 0x175c <main+0x2a6>
		__ticks = 1;
    174c:	fe 01       	movw	r30, r28
    174e:	ef 56       	subi	r30, 0x6F	; 111
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	80 83       	st	Z, r24
    175a:	64 c0       	rjmp	.+200    	; 0x1824 <main+0x36e>
	else if (__tmp > 65535)
    175c:	fe 01       	movw	r30, r28
    175e:	ed 56       	subi	r30, 0x6D	; 109
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	60 81       	ld	r22, Z
    1764:	71 81       	ldd	r23, Z+1	; 0x01
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	93 81       	ldd	r25, Z+3	; 0x03
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	3f ef       	ldi	r19, 0xFF	; 255
    176e:	4f e7       	ldi	r20, 0x7F	; 127
    1770:	57 e4       	ldi	r21, 0x47	; 71
    1772:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1776:	18 16       	cp	r1, r24
    1778:	0c f0       	brlt	.+2      	; 0x177c <main+0x2c6>
    177a:	43 c0       	rjmp	.+134    	; 0x1802 <main+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177c:	fe 01       	movw	r30, r28
    177e:	e9 56       	subi	r30, 0x69	; 105
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e2       	ldi	r20, 0x20	; 32
    1790:	51 e4       	ldi	r21, 0x41	; 65
    1792:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	8e 01       	movw	r16, r28
    179c:	0f 56       	subi	r16, 0x6F	; 111
    179e:	1f 4f       	sbci	r17, 0xFF	; 255
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	f8 01       	movw	r30, r16
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	80 83       	st	Z, r24
    17b2:	1f c0       	rjmp	.+62     	; 0x17f2 <main+0x33c>
    17b4:	fe 01       	movw	r30, r28
    17b6:	e1 57       	subi	r30, 0x71	; 113
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	89 e1       	ldi	r24, 0x19	; 25
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
    17c2:	fe 01       	movw	r30, r28
    17c4:	e1 57       	subi	r30, 0x71	; 113
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	80 81       	ld	r24, Z
    17ca:	91 81       	ldd	r25, Z+1	; 0x01
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <main+0x316>
    17d0:	fe 01       	movw	r30, r28
    17d2:	e1 57       	subi	r30, 0x71	; 113
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	91 83       	std	Z+1, r25	; 0x01
    17d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17da:	de 01       	movw	r26, r28
    17dc:	af 56       	subi	r26, 0x6F	; 111
    17de:	bf 4f       	sbci	r27, 0xFF	; 255
    17e0:	fe 01       	movw	r30, r28
    17e2:	ef 56       	subi	r30, 0x6F	; 111
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	11 96       	adiw	r26, 0x01	; 1
    17ee:	9c 93       	st	X, r25
    17f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f2:	fe 01       	movw	r30, r28
    17f4:	ef 56       	subi	r30, 0x6F	; 111
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	d1 f6       	brne	.-76     	; 0x17b4 <main+0x2fe>
    1800:	27 c0       	rjmp	.+78     	; 0x1850 <main+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1802:	8e 01       	movw	r16, r28
    1804:	0f 56       	subi	r16, 0x6F	; 111
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	fe 01       	movw	r30, r28
    180a:	ed 56       	subi	r30, 0x6D	; 109
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	82 81       	ldd	r24, Z+2	; 0x02
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	f8 01       	movw	r30, r16
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	80 83       	st	Z, r24
    1824:	de 01       	movw	r26, r28
    1826:	a3 57       	subi	r26, 0x73	; 115
    1828:	bf 4f       	sbci	r27, 0xFF	; 255
    182a:	fe 01       	movw	r30, r28
    182c:	ef 56       	subi	r30, 0x6F	; 111
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	8d 93       	st	X+, r24
    1836:	9c 93       	st	X, r25
    1838:	fe 01       	movw	r30, r28
    183a:	e3 57       	subi	r30, 0x73	; 115
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <main+0x38c>
    1846:	fe 01       	movw	r30, r28
    1848:	e3 57       	subi	r30, 0x73	; 115
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	80 83       	st	Z, r24
	_delay_ms(10);
	EEPROM_writeByte(0x0313, '0');
    1850:	83 e1       	ldi	r24, 0x13	; 19
    1852:	93 e0       	ldi	r25, 0x03	; 3
    1854:	60 e3       	ldi	r22, 0x30	; 48
    1856:	0e 94 a4 05 	call	0xb48	; 0xb48 <EEPROM_writeByte>
    185a:	fe 01       	movw	r30, r28
    185c:	e7 57       	subi	r30, 0x77	; 119
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a0 e2       	ldi	r26, 0x20	; 32
    1866:	b1 e4       	ldi	r27, 0x41	; 65
    1868:	80 83       	st	Z, r24
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	a2 83       	std	Z+2, r26	; 0x02
    186e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1870:	8e 01       	movw	r16, r28
    1872:	0b 57       	subi	r16, 0x7B	; 123
    1874:	1f 4f       	sbci	r17, 0xFF	; 255
    1876:	fe 01       	movw	r30, r28
    1878:	e7 57       	subi	r30, 0x77	; 119
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	60 81       	ld	r22, Z
    187e:	71 81       	ldd	r23, Z+1	; 0x01
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	4a e7       	ldi	r20, 0x7A	; 122
    188a:	53 e4       	ldi	r21, 0x43	; 67
    188c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	f8 01       	movw	r30, r16
    1896:	80 83       	st	Z, r24
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	a2 83       	std	Z+2, r26	; 0x02
    189c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    189e:	fe 01       	movw	r30, r28
    18a0:	eb 57       	subi	r30, 0x7B	; 123
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e8       	ldi	r20, 0x80	; 128
    18b2:	5f e3       	ldi	r21, 0x3F	; 63
    18b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18b8:	88 23       	and	r24, r24
    18ba:	44 f4       	brge	.+16     	; 0x18cc <main+0x416>
		__ticks = 1;
    18bc:	fe 01       	movw	r30, r28
    18be:	ed 57       	subi	r30, 0x7D	; 125
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	80 83       	st	Z, r24
    18ca:	64 c0       	rjmp	.+200    	; 0x1994 <main+0x4de>
	else if (__tmp > 65535)
    18cc:	fe 01       	movw	r30, r28
    18ce:	eb 57       	subi	r30, 0x7B	; 123
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	60 81       	ld	r22, Z
    18d4:	71 81       	ldd	r23, Z+1	; 0x01
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	3f ef       	ldi	r19, 0xFF	; 255
    18de:	4f e7       	ldi	r20, 0x7F	; 127
    18e0:	57 e4       	ldi	r21, 0x47	; 71
    18e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18e6:	18 16       	cp	r1, r24
    18e8:	0c f0       	brlt	.+2      	; 0x18ec <main+0x436>
    18ea:	43 c0       	rjmp	.+134    	; 0x1972 <main+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	fe 01       	movw	r30, r28
    18ee:	e7 57       	subi	r30, 0x77	; 119
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e2       	ldi	r20, 0x20	; 32
    1900:	51 e4       	ldi	r21, 0x41	; 65
    1902:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	8e 01       	movw	r16, r28
    190c:	0d 57       	subi	r16, 0x7D	; 125
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	f8 01       	movw	r30, r16
    191e:	91 83       	std	Z+1, r25	; 0x01
    1920:	80 83       	st	Z, r24
    1922:	1f c0       	rjmp	.+62     	; 0x1962 <main+0x4ac>
    1924:	fe 01       	movw	r30, r28
    1926:	ef 57       	subi	r30, 0x7F	; 127
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	89 e1       	ldi	r24, 0x19	; 25
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	80 83       	st	Z, r24
    1932:	fe 01       	movw	r30, r28
    1934:	ef 57       	subi	r30, 0x7F	; 127
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <main+0x486>
    1940:	fe 01       	movw	r30, r28
    1942:	ef 57       	subi	r30, 0x7F	; 127
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194a:	de 01       	movw	r26, r28
    194c:	ad 57       	subi	r26, 0x7D	; 125
    194e:	bf 4f       	sbci	r27, 0xFF	; 255
    1950:	fe 01       	movw	r30, r28
    1952:	ed 57       	subi	r30, 0x7D	; 125
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	80 81       	ld	r24, Z
    1958:	91 81       	ldd	r25, Z+1	; 0x01
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	11 96       	adiw	r26, 0x01	; 1
    195e:	9c 93       	st	X, r25
    1960:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1962:	fe 01       	movw	r30, r28
    1964:	ed 57       	subi	r30, 0x7D	; 125
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	80 81       	ld	r24, Z
    196a:	91 81       	ldd	r25, Z+1	; 0x01
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	d1 f6       	brne	.-76     	; 0x1924 <main+0x46e>
    1970:	27 c0       	rjmp	.+78     	; 0x19c0 <main+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1972:	8e 01       	movw	r16, r28
    1974:	0d 57       	subi	r16, 0x7D	; 125
    1976:	1f 4f       	sbci	r17, 0xFF	; 255
    1978:	fe 01       	movw	r30, r28
    197a:	eb 57       	subi	r30, 0x7B	; 123
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	f8 01       	movw	r30, r16
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	80 83       	st	Z, r24
    1994:	de 01       	movw	r26, r28
    1996:	a1 58       	subi	r26, 0x81	; 129
    1998:	bf 4f       	sbci	r27, 0xFF	; 255
    199a:	fe 01       	movw	r30, r28
    199c:	ed 57       	subi	r30, 0x7D	; 125
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 81       	ld	r24, Z
    19a2:	91 81       	ldd	r25, Z+1	; 0x01
    19a4:	8d 93       	st	X+, r24
    19a6:	9c 93       	st	X, r25
    19a8:	fe 01       	movw	r30, r28
    19aa:	e1 58       	subi	r30, 0x81	; 129
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	80 81       	ld	r24, Z
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <main+0x4fc>
    19b6:	fe 01       	movw	r30, r28
    19b8:	e1 58       	subi	r30, 0x81	; 129
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	80 83       	st	Z, r24
	_delay_ms(10);
	EEPROM_writeByte(0x0314, '0');
    19c0:	84 e1       	ldi	r24, 0x14	; 20
    19c2:	93 e0       	ldi	r25, 0x03	; 3
    19c4:	60 e3       	ldi	r22, 0x30	; 48
    19c6:	0e 94 a4 05 	call	0xb48	; 0xb48 <EEPROM_writeByte>
    19ca:	fe 01       	movw	r30, r28
    19cc:	e5 58       	subi	r30, 0x85	; 133
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a0 e2       	ldi	r26, 0x20	; 32
    19d6:	b1 e4       	ldi	r27, 0x41	; 65
    19d8:	80 83       	st	Z, r24
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	a2 83       	std	Z+2, r26	; 0x02
    19de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e0:	8e 01       	movw	r16, r28
    19e2:	09 58       	subi	r16, 0x89	; 137
    19e4:	1f 4f       	sbci	r17, 0xFF	; 255
    19e6:	fe 01       	movw	r30, r28
    19e8:	e5 58       	subi	r30, 0x85	; 133
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	60 81       	ld	r22, Z
    19ee:	71 81       	ldd	r23, Z+1	; 0x01
    19f0:	82 81       	ldd	r24, Z+2	; 0x02
    19f2:	93 81       	ldd	r25, Z+3	; 0x03
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a e7       	ldi	r20, 0x7A	; 122
    19fa:	53 e4       	ldi	r21, 0x43	; 67
    19fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	f8 01       	movw	r30, r16
    1a06:	80 83       	st	Z, r24
    1a08:	91 83       	std	Z+1, r25	; 0x01
    1a0a:	a2 83       	std	Z+2, r26	; 0x02
    1a0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e9 58       	subi	r30, 0x89	; 137
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	60 81       	ld	r22, Z
    1a16:	71 81       	ldd	r23, Z+1	; 0x01
    1a18:	82 81       	ldd	r24, Z+2	; 0x02
    1a1a:	93 81       	ldd	r25, Z+3	; 0x03
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	44 f4       	brge	.+16     	; 0x1a3c <main+0x586>
		__ticks = 1;
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	eb 58       	subi	r30, 0x8B	; 139
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	91 83       	std	Z+1, r25	; 0x01
    1a38:	80 83       	st	Z, r24
    1a3a:	64 c0       	rjmp	.+200    	; 0x1b04 <main+0x64e>
	else if (__tmp > 65535)
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e9 58       	subi	r30, 0x89	; 137
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	60 81       	ld	r22, Z
    1a44:	71 81       	ldd	r23, Z+1	; 0x01
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	93 81       	ldd	r25, Z+3	; 0x03
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	3f ef       	ldi	r19, 0xFF	; 255
    1a4e:	4f e7       	ldi	r20, 0x7F	; 127
    1a50:	57 e4       	ldi	r21, 0x47	; 71
    1a52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	0c f0       	brlt	.+2      	; 0x1a5c <main+0x5a6>
    1a5a:	43 c0       	rjmp	.+134    	; 0x1ae2 <main+0x62c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e5 58       	subi	r30, 0x85	; 133
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	82 81       	ldd	r24, Z+2	; 0x02
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e2       	ldi	r20, 0x20	; 32
    1a70:	51 e4       	ldi	r21, 0x41	; 65
    1a72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8e 01       	movw	r16, r28
    1a7c:	0b 58       	subi	r16, 0x8B	; 139
    1a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
    1a92:	1f c0       	rjmp	.+62     	; 0x1ad2 <main+0x61c>
    1a94:	fe 01       	movw	r30, r28
    1a96:	ed 58       	subi	r30, 0x8D	; 141
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	89 e1       	ldi	r24, 0x19	; 25
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	91 83       	std	Z+1, r25	; 0x01
    1aa0:	80 83       	st	Z, r24
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	ed 58       	subi	r30, 0x8D	; 141
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	80 81       	ld	r24, Z
    1aaa:	91 81       	ldd	r25, Z+1	; 0x01
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <main+0x5f6>
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	ed 58       	subi	r30, 0x8D	; 141
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aba:	de 01       	movw	r26, r28
    1abc:	ab 58       	subi	r26, 0x8B	; 139
    1abe:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	eb 58       	subi	r30, 0x8B	; 139
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	80 81       	ld	r24, Z
    1ac8:	91 81       	ldd	r25, Z+1	; 0x01
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	11 96       	adiw	r26, 0x01	; 1
    1ace:	9c 93       	st	X, r25
    1ad0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	eb 58       	subi	r30, 0x8B	; 139
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	d1 f6       	brne	.-76     	; 0x1a94 <main+0x5de>
    1ae0:	27 c0       	rjmp	.+78     	; 0x1b30 <main+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae2:	8e 01       	movw	r16, r28
    1ae4:	0b 58       	subi	r16, 0x8B	; 139
    1ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae8:	fe 01       	movw	r30, r28
    1aea:	e9 58       	subi	r30, 0x89	; 137
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	60 81       	ld	r22, Z
    1af0:	71 81       	ldd	r23, Z+1	; 0x01
    1af2:	82 81       	ldd	r24, Z+2	; 0x02
    1af4:	93 81       	ldd	r25, Z+3	; 0x03
    1af6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	f8 01       	movw	r30, r16
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	80 83       	st	Z, r24
    1b04:	de 01       	movw	r26, r28
    1b06:	af 58       	subi	r26, 0x8F	; 143
    1b08:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	eb 58       	subi	r30, 0x8B	; 139
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 81       	ld	r24, Z
    1b12:	91 81       	ldd	r25, Z+1	; 0x01
    1b14:	8d 93       	st	X+, r24
    1b16:	9c 93       	st	X, r25
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ef 58       	subi	r30, 0x8F	; 143
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	80 81       	ld	r24, Z
    1b20:	91 81       	ldd	r25, Z+1	; 0x01
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <main+0x66c>
    1b26:	fe 01       	movw	r30, r28
    1b28:	ef 58       	subi	r30, 0x8F	; 143
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	91 83       	std	Z+1, r25	; 0x01
    1b2e:	80 83       	st	Z, r24
	_delay_ms(10);
	//UART
	UART_init();
    1b30:	0e 94 89 12 	call	0x2512	; 0x2512 <UART_init>

	while(1){
		choice = UART_recieveByte();
    1b34:	0e 94 c1 12 	call	0x2582	; 0x2582 <UART_recieveByte>
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e6 55       	subi	r30, 0x56	; 86
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 83       	st	Z, r24
    1b40:	e9 c2       	rjmp	.+1490   	; 0x2114 <main+0xc5e>
		//Choice 1
		while (choice == 0x01){
			password[0] = UART_recieveByte();
    1b42:	0e 94 c1 12 	call	0x2582	; 0x2582 <UART_recieveByte>
    1b46:	fe 01       	movw	r30, r28
    1b48:	e5 55       	subi	r30, 0x55	; 85
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 83       	st	Z, r24
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e3 59       	subi	r30, 0x93	; 147
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	a0 e2       	ldi	r26, 0x20	; 32
    1b5a:	b1 e4       	ldi	r27, 0x41	; 65
    1b5c:	80 83       	st	Z, r24
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	a2 83       	std	Z+2, r26	; 0x02
    1b62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b64:	8e 01       	movw	r16, r28
    1b66:	07 59       	subi	r16, 0x97	; 151
    1b68:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	e3 59       	subi	r30, 0x93	; 147
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	4a e7       	ldi	r20, 0x7A	; 122
    1b7e:	53 e4       	ldi	r21, 0x43	; 67
    1b80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	f8 01       	movw	r30, r16
    1b8a:	80 83       	st	Z, r24
    1b8c:	91 83       	std	Z+1, r25	; 0x01
    1b8e:	a2 83       	std	Z+2, r26	; 0x02
    1b90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b92:	fe 01       	movw	r30, r28
    1b94:	e7 59       	subi	r30, 0x97	; 151
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	44 f4       	brge	.+16     	; 0x1bc0 <main+0x70a>
		__ticks = 1;
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e9 59       	subi	r30, 0x99	; 153
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	91 83       	std	Z+1, r25	; 0x01
    1bbc:	80 83       	st	Z, r24
    1bbe:	64 c0       	rjmp	.+200    	; 0x1c88 <main+0x7d2>
	else if (__tmp > 65535)
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	e7 59       	subi	r30, 0x97	; 151
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	3f ef       	ldi	r19, 0xFF	; 255
    1bd2:	4f e7       	ldi	r20, 0x7F	; 127
    1bd4:	57 e4       	ldi	r21, 0x47	; 71
    1bd6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bda:	18 16       	cp	r1, r24
    1bdc:	0c f0       	brlt	.+2      	; 0x1be0 <main+0x72a>
    1bde:	43 c0       	rjmp	.+134    	; 0x1c66 <main+0x7b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be0:	fe 01       	movw	r30, r28
    1be2:	e3 59       	subi	r30, 0x93	; 147
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e2       	ldi	r20, 0x20	; 32
    1bf4:	51 e4       	ldi	r21, 0x41	; 65
    1bf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8e 01       	movw	r16, r28
    1c00:	09 59       	subi	r16, 0x99	; 153
    1c02:	1f 4f       	sbci	r17, 0xFF	; 255
    1c04:	bc 01       	movw	r22, r24
    1c06:	cd 01       	movw	r24, r26
    1c08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	f8 01       	movw	r30, r16
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	80 83       	st	Z, r24
    1c16:	1f c0       	rjmp	.+62     	; 0x1c56 <main+0x7a0>
    1c18:	fe 01       	movw	r30, r28
    1c1a:	eb 59       	subi	r30, 0x9B	; 155
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	89 e1       	ldi	r24, 0x19	; 25
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	80 83       	st	Z, r24
    1c26:	fe 01       	movw	r30, r28
    1c28:	eb 59       	subi	r30, 0x9B	; 155
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	80 81       	ld	r24, Z
    1c2e:	91 81       	ldd	r25, Z+1	; 0x01
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <main+0x77a>
    1c34:	fe 01       	movw	r30, r28
    1c36:	eb 59       	subi	r30, 0x9B	; 155
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3e:	de 01       	movw	r26, r28
    1c40:	a9 59       	subi	r26, 0x99	; 153
    1c42:	bf 4f       	sbci	r27, 0xFF	; 255
    1c44:	fe 01       	movw	r30, r28
    1c46:	e9 59       	subi	r30, 0x99	; 153
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	11 96       	adiw	r26, 0x01	; 1
    1c52:	9c 93       	st	X, r25
    1c54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	fe 01       	movw	r30, r28
    1c58:	e9 59       	subi	r30, 0x99	; 153
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	80 81       	ld	r24, Z
    1c5e:	91 81       	ldd	r25, Z+1	; 0x01
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	d1 f6       	brne	.-76     	; 0x1c18 <main+0x762>
    1c64:	27 c0       	rjmp	.+78     	; 0x1cb4 <main+0x7fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c66:	8e 01       	movw	r16, r28
    1c68:	09 59       	subi	r16, 0x99	; 153
    1c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e7 59       	subi	r30, 0x97	; 151
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	60 81       	ld	r22, Z
    1c74:	71 81       	ldd	r23, Z+1	; 0x01
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	93 81       	ldd	r25, Z+3	; 0x03
    1c7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	f8 01       	movw	r30, r16
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	80 83       	st	Z, r24
    1c88:	de 01       	movw	r26, r28
    1c8a:	ad 59       	subi	r26, 0x9D	; 157
    1c8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e9 59       	subi	r30, 0x99	; 153
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 81       	ld	r24, Z
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	8d 93       	st	X+, r24
    1c9a:	9c 93       	st	X, r25
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	ed 59       	subi	r30, 0x9D	; 157
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <main+0x7f0>
    1caa:	fe 01       	movw	r30, r28
    1cac:	ed 59       	subi	r30, 0x9D	; 157
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	80 83       	st	Z, r24
			_delay_ms(10);
			password[1] = UART_recieveByte();
    1cb4:	0e 94 c1 12 	call	0x2582	; 0x2582 <UART_recieveByte>
    1cb8:	fe 01       	movw	r30, r28
    1cba:	e5 55       	subi	r30, 0x55	; 85
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	81 83       	std	Z+1, r24	; 0x01
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e1 5a       	subi	r30, 0xA1	; 161
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a0 e2       	ldi	r26, 0x20	; 32
    1ccc:	b1 e4       	ldi	r27, 0x41	; 65
    1cce:	80 83       	st	Z, r24
    1cd0:	91 83       	std	Z+1, r25	; 0x01
    1cd2:	a2 83       	std	Z+2, r26	; 0x02
    1cd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	8e 01       	movw	r16, r28
    1cd8:	05 5a       	subi	r16, 0xA5	; 165
    1cda:	1f 4f       	sbci	r17, 0xFF	; 255
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e1 5a       	subi	r30, 0xA1	; 161
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	60 81       	ld	r22, Z
    1ce4:	71 81       	ldd	r23, Z+1	; 0x01
    1ce6:	82 81       	ldd	r24, Z+2	; 0x02
    1ce8:	93 81       	ldd	r25, Z+3	; 0x03
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	4a e7       	ldi	r20, 0x7A	; 122
    1cf0:	53 e4       	ldi	r21, 0x43	; 67
    1cf2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	80 83       	st	Z, r24
    1cfe:	91 83       	std	Z+1, r25	; 0x01
    1d00:	a2 83       	std	Z+2, r26	; 0x02
    1d02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d04:	fe 01       	movw	r30, r28
    1d06:	e5 5a       	subi	r30, 0xA5	; 165
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	44 f4       	brge	.+16     	; 0x1d32 <main+0x87c>
		__ticks = 1;
    1d22:	fe 01       	movw	r30, r28
    1d24:	e7 5a       	subi	r30, 0xA7	; 167
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	91 83       	std	Z+1, r25	; 0x01
    1d2e:	80 83       	st	Z, r24
    1d30:	64 c0       	rjmp	.+200    	; 0x1dfa <main+0x944>
	else if (__tmp > 65535)
    1d32:	fe 01       	movw	r30, r28
    1d34:	e5 5a       	subi	r30, 0xA5	; 165
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	60 81       	ld	r22, Z
    1d3a:	71 81       	ldd	r23, Z+1	; 0x01
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	57 e4       	ldi	r21, 0x47	; 71
    1d48:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	0c f0       	brlt	.+2      	; 0x1d52 <main+0x89c>
    1d50:	43 c0       	rjmp	.+134    	; 0x1dd8 <main+0x922>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d52:	fe 01       	movw	r30, r28
    1d54:	e1 5a       	subi	r30, 0xA1	; 161
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	60 81       	ld	r22, Z
    1d5a:	71 81       	ldd	r23, Z+1	; 0x01
    1d5c:	82 81       	ldd	r24, Z+2	; 0x02
    1d5e:	93 81       	ldd	r25, Z+3	; 0x03
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e2       	ldi	r20, 0x20	; 32
    1d66:	51 e4       	ldi	r21, 0x41	; 65
    1d68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	8e 01       	movw	r16, r28
    1d72:	07 5a       	subi	r16, 0xA7	; 167
    1d74:	1f 4f       	sbci	r17, 0xFF	; 255
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	f8 01       	movw	r30, r16
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
    1d88:	1f c0       	rjmp	.+62     	; 0x1dc8 <main+0x912>
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e9 5a       	subi	r30, 0xA9	; 169
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	89 e1       	ldi	r24, 0x19	; 25
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
    1d98:	fe 01       	movw	r30, r28
    1d9a:	e9 5a       	subi	r30, 0xA9	; 169
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	80 81       	ld	r24, Z
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <main+0x8ec>
    1da6:	fe 01       	movw	r30, r28
    1da8:	e9 5a       	subi	r30, 0xA9	; 169
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db0:	de 01       	movw	r26, r28
    1db2:	a7 5a       	subi	r26, 0xA7	; 167
    1db4:	bf 4f       	sbci	r27, 0xFF	; 255
    1db6:	fe 01       	movw	r30, r28
    1db8:	e7 5a       	subi	r30, 0xA7	; 167
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	11 96       	adiw	r26, 0x01	; 1
    1dc4:	9c 93       	st	X, r25
    1dc6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e7 5a       	subi	r30, 0xA7	; 167
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	d1 f6       	brne	.-76     	; 0x1d8a <main+0x8d4>
    1dd6:	27 c0       	rjmp	.+78     	; 0x1e26 <main+0x970>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd8:	8e 01       	movw	r16, r28
    1dda:	07 5a       	subi	r16, 0xA7	; 167
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	fe 01       	movw	r30, r28
    1de0:	e5 5a       	subi	r30, 0xA5	; 165
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	f8 01       	movw	r30, r16
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24
    1dfa:	de 01       	movw	r26, r28
    1dfc:	ab 5a       	subi	r26, 0xAB	; 171
    1dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1e00:	fe 01       	movw	r30, r28
    1e02:	e7 5a       	subi	r30, 0xA7	; 167
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 81       	ld	r24, Z
    1e08:	91 81       	ldd	r25, Z+1	; 0x01
    1e0a:	8d 93       	st	X+, r24
    1e0c:	9c 93       	st	X, r25
    1e0e:	fe 01       	movw	r30, r28
    1e10:	eb 5a       	subi	r30, 0xAB	; 171
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	80 81       	ld	r24, Z
    1e16:	91 81       	ldd	r25, Z+1	; 0x01
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <main+0x962>
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	eb 5a       	subi	r30, 0xAB	; 171
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	80 83       	st	Z, r24
			_delay_ms(10);
			password[2] = UART_recieveByte();
    1e26:	0e 94 c1 12 	call	0x2582	; 0x2582 <UART_recieveByte>
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e5 55       	subi	r30, 0x55	; 85
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	82 83       	std	Z+2, r24	; 0x02
    1e32:	fe 01       	movw	r30, r28
    1e34:	ef 5a       	subi	r30, 0xAF	; 175
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a0 e2       	ldi	r26, 0x20	; 32
    1e3e:	b1 e4       	ldi	r27, 0x41	; 65
    1e40:	80 83       	st	Z, r24
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	a2 83       	std	Z+2, r26	; 0x02
    1e46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e48:	8e 01       	movw	r16, r28
    1e4a:	03 5b       	subi	r16, 0xB3	; 179
    1e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4e:	fe 01       	movw	r30, r28
    1e50:	ef 5a       	subi	r30, 0xAF	; 175
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	60 81       	ld	r22, Z
    1e56:	71 81       	ldd	r23, Z+1	; 0x01
    1e58:	82 81       	ldd	r24, Z+2	; 0x02
    1e5a:	93 81       	ldd	r25, Z+3	; 0x03
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	4a e7       	ldi	r20, 0x7A	; 122
    1e62:	53 e4       	ldi	r21, 0x43	; 67
    1e64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	f8 01       	movw	r30, r16
    1e6e:	80 83       	st	Z, r24
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	a2 83       	std	Z+2, r26	; 0x02
    1e74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e76:	fe 01       	movw	r30, r28
    1e78:	e3 5b       	subi	r30, 0xB3	; 179
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	60 81       	ld	r22, Z
    1e7e:	71 81       	ldd	r23, Z+1	; 0x01
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	93 81       	ldd	r25, Z+3	; 0x03
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e90:	88 23       	and	r24, r24
    1e92:	44 f4       	brge	.+16     	; 0x1ea4 <main+0x9ee>
		__ticks = 1;
    1e94:	fe 01       	movw	r30, r28
    1e96:	e5 5b       	subi	r30, 0xB5	; 181
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
    1ea2:	64 c0       	rjmp	.+200    	; 0x1f6c <main+0xab6>
	else if (__tmp > 65535)
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e3 5b       	subi	r30, 0xB3	; 179
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	3f ef       	ldi	r19, 0xFF	; 255
    1eb6:	4f e7       	ldi	r20, 0x7F	; 127
    1eb8:	57 e4       	ldi	r21, 0x47	; 71
    1eba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ebe:	18 16       	cp	r1, r24
    1ec0:	0c f0       	brlt	.+2      	; 0x1ec4 <main+0xa0e>
    1ec2:	43 c0       	rjmp	.+134    	; 0x1f4a <main+0xa94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	ef 5a       	subi	r30, 0xAF	; 175
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	60 81       	ld	r22, Z
    1ecc:	71 81       	ldd	r23, Z+1	; 0x01
    1ece:	82 81       	ldd	r24, Z+2	; 0x02
    1ed0:	93 81       	ldd	r25, Z+3	; 0x03
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	51 e4       	ldi	r21, 0x41	; 65
    1eda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	8e 01       	movw	r16, r28
    1ee4:	05 5b       	subi	r16, 0xB5	; 181
    1ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee8:	bc 01       	movw	r22, r24
    1eea:	cd 01       	movw	r24, r26
    1eec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	91 83       	std	Z+1, r25	; 0x01
    1ef8:	80 83       	st	Z, r24
    1efa:	1f c0       	rjmp	.+62     	; 0x1f3a <main+0xa84>
    1efc:	fe 01       	movw	r30, r28
    1efe:	e7 5b       	subi	r30, 0xB7	; 183
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	89 e1       	ldi	r24, 0x19	; 25
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e7 5b       	subi	r30, 0xB7	; 183
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	80 81       	ld	r24, Z
    1f12:	91 81       	ldd	r25, Z+1	; 0x01
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <main+0xa5e>
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e7 5b       	subi	r30, 0xB7	; 183
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	de 01       	movw	r26, r28
    1f24:	a5 5b       	subi	r26, 0xB5	; 181
    1f26:	bf 4f       	sbci	r27, 0xFF	; 255
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e5 5b       	subi	r30, 0xB5	; 181
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 81       	ld	r24, Z
    1f30:	91 81       	ldd	r25, Z+1	; 0x01
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	11 96       	adiw	r26, 0x01	; 1
    1f36:	9c 93       	st	X, r25
    1f38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e5 5b       	subi	r30, 0xB5	; 181
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	91 81       	ldd	r25, Z+1	; 0x01
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	d1 f6       	brne	.-76     	; 0x1efc <main+0xa46>
    1f48:	27 c0       	rjmp	.+78     	; 0x1f98 <main+0xae2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4a:	8e 01       	movw	r16, r28
    1f4c:	05 5b       	subi	r16, 0xB5	; 181
    1f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f50:	fe 01       	movw	r30, r28
    1f52:	e3 5b       	subi	r30, 0xB3	; 179
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	60 81       	ld	r22, Z
    1f58:	71 81       	ldd	r23, Z+1	; 0x01
    1f5a:	82 81       	ldd	r24, Z+2	; 0x02
    1f5c:	93 81       	ldd	r25, Z+3	; 0x03
    1f5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	f8 01       	movw	r30, r16
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	80 83       	st	Z, r24
    1f6c:	de 01       	movw	r26, r28
    1f6e:	a9 5b       	subi	r26, 0xB9	; 185
    1f70:	bf 4f       	sbci	r27, 0xFF	; 255
    1f72:	fe 01       	movw	r30, r28
    1f74:	e5 5b       	subi	r30, 0xB5	; 181
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	8d 93       	st	X+, r24
    1f7e:	9c 93       	st	X, r25
    1f80:	fe 01       	movw	r30, r28
    1f82:	e9 5b       	subi	r30, 0xB9	; 185
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 81       	ld	r24, Z
    1f88:	91 81       	ldd	r25, Z+1	; 0x01
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <main+0xad4>
    1f8e:	fe 01       	movw	r30, r28
    1f90:	e9 5b       	subi	r30, 0xB9	; 185
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
			_delay_ms(10);
			password[3] = UART_recieveByte();
    1f98:	0e 94 c1 12 	call	0x2582	; 0x2582 <UART_recieveByte>
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e5 55       	subi	r30, 0x55	; 85
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	83 83       	std	Z+3, r24	; 0x03
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	ed 5b       	subi	r30, 0xBD	; 189
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a0 e2       	ldi	r26, 0x20	; 32
    1fb0:	b1 e4       	ldi	r27, 0x41	; 65
    1fb2:	80 83       	st	Z, r24
    1fb4:	91 83       	std	Z+1, r25	; 0x01
    1fb6:	a2 83       	std	Z+2, r26	; 0x02
    1fb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fba:	8e 01       	movw	r16, r28
    1fbc:	01 5c       	subi	r16, 0xC1	; 193
    1fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	ed 5b       	subi	r30, 0xBD	; 189
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a e7       	ldi	r20, 0x7A	; 122
    1fd4:	53 e4       	ldi	r21, 0x43	; 67
    1fd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	f8 01       	movw	r30, r16
    1fe0:	80 83       	st	Z, r24
    1fe2:	91 83       	std	Z+1, r25	; 0x01
    1fe4:	a2 83       	std	Z+2, r26	; 0x02
    1fe6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fe8:	fe 01       	movw	r30, r28
    1fea:	ff 96       	adiw	r30, 0x3f	; 63
    1fec:	60 81       	ld	r22, Z
    1fee:	71 81       	ldd	r23, Z+1	; 0x01
    1ff0:	82 81       	ldd	r24, Z+2	; 0x02
    1ff2:	93 81       	ldd	r25, Z+3	; 0x03
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e8       	ldi	r20, 0x80	; 128
    1ffa:	5f e3       	ldi	r21, 0x3F	; 63
    1ffc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2000:	88 23       	and	r24, r24
    2002:	2c f4       	brge	.+10     	; 0x200e <main+0xb58>
		__ticks = 1;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9e af       	std	Y+62, r25	; 0x3e
    200a:	8d af       	std	Y+61, r24	; 0x3d
    200c:	46 c0       	rjmp	.+140    	; 0x209a <main+0xbe4>
	else if (__tmp > 65535)
    200e:	fe 01       	movw	r30, r28
    2010:	ff 96       	adiw	r30, 0x3f	; 63
    2012:	60 81       	ld	r22, Z
    2014:	71 81       	ldd	r23, Z+1	; 0x01
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	64 f5       	brge	.+88     	; 0x2082 <main+0xbcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202a:	fe 01       	movw	r30, r28
    202c:	ed 5b       	subi	r30, 0xBD	; 189
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e2       	ldi	r20, 0x20	; 32
    203e:	51 e4       	ldi	r21, 0x41	; 65
    2040:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
    204c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9e af       	std	Y+62, r25	; 0x3e
    2056:	8d af       	std	Y+61, r24	; 0x3d
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <main+0xbc2>
    205a:	89 e1       	ldi	r24, 0x19	; 25
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9c af       	std	Y+60, r25	; 0x3c
    2060:	8b af       	std	Y+59, r24	; 0x3b
    2062:	8b ad       	ldd	r24, Y+59	; 0x3b
    2064:	9c ad       	ldd	r25, Y+60	; 0x3c
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <main+0xbb0>
    206a:	9c af       	std	Y+60, r25	; 0x3c
    206c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2070:	9e ad       	ldd	r25, Y+62	; 0x3e
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	9e af       	std	Y+62, r25	; 0x3e
    2076:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	8d ad       	ldd	r24, Y+61	; 0x3d
    207a:	9e ad       	ldd	r25, Y+62	; 0x3e
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	69 f7       	brne	.-38     	; 0x205a <main+0xba4>
    2080:	16 c0       	rjmp	.+44     	; 0x20ae <main+0xbf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2082:	fe 01       	movw	r30, r28
    2084:	ff 96       	adiw	r30, 0x3f	; 63
    2086:	60 81       	ld	r22, Z
    2088:	71 81       	ldd	r23, Z+1	; 0x01
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9e af       	std	Y+62, r25	; 0x3e
    2098:	8d af       	std	Y+61, r24	; 0x3d
    209a:	8d ad       	ldd	r24, Y+61	; 0x3d
    209c:	9e ad       	ldd	r25, Y+62	; 0x3e
    209e:	9a af       	std	Y+58, r25	; 0x3a
    20a0:	89 af       	std	Y+57, r24	; 0x39
    20a2:	89 ad       	ldd	r24, Y+57	; 0x39
    20a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <main+0xbf0>
    20aa:	9a af       	std	Y+58, r25	; 0x3a
    20ac:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(10);

			if (!passCheck(password)){
    20ae:	ce 01       	movw	r24, r28
    20b0:	85 55       	subi	r24, 0x55	; 85
    20b2:	9f 4f       	sbci	r25, 0xFF	; 255
    20b4:	0e 94 35 08 	call	0x106a	; 0x106a <passCheck>
    20b8:	88 23       	and	r24, r24
    20ba:	f1 f4       	brne	.+60     	; 0x20f8 <main+0xc42>
				UART_sendByte(0);
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	0e 94 a3 12 	call	0x2546	; 0x2546 <UART_sendByte>
				count++;
    20c2:	de 01       	movw	r26, r28
    20c4:	a7 55       	subi	r26, 0x57	; 87
    20c6:	bf 4f       	sbci	r27, 0xFF	; 255
    20c8:	fe 01       	movw	r30, r28
    20ca:	e7 55       	subi	r30, 0x57	; 87
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	80 81       	ld	r24, Z
    20d0:	8f 5f       	subi	r24, 0xFF	; 255
    20d2:	8c 93       	st	X, r24
				if (count == 3){
    20d4:	fe 01       	movw	r30, r28
    20d6:	e7 55       	subi	r30, 0x57	; 87
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 81       	ld	r24, Z
    20dc:	83 30       	cpi	r24, 0x03	; 3
    20de:	d1 f4       	brne	.+52     	; 0x2114 <main+0xc5e>
					PassCheckResponse(wrong);
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	0e 94 c2 06 	call	0xd84	; 0xd84 <PassCheckResponse>
					count = 0;
    20e6:	fe 01       	movw	r30, r28
    20e8:	e7 55       	subi	r30, 0x57	; 87
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	10 82       	st	Z, r1
					choice = 0;
    20ee:	fe 01       	movw	r30, r28
    20f0:	e6 55       	subi	r30, 0x56	; 86
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	10 82       	st	Z, r1
    20f6:	0e c0       	rjmp	.+28     	; 0x2114 <main+0xc5e>
				}
			}else {
				UART_sendByte(1);
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	0e 94 a3 12 	call	0x2546	; 0x2546 <UART_sendByte>
				count=0;
    20fe:	fe 01       	movw	r30, r28
    2100:	e7 55       	subi	r30, 0x57	; 87
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	10 82       	st	Z, r1
				choice = 0;
    2106:	fe 01       	movw	r30, r28
    2108:	e6 55       	subi	r30, 0x56	; 86
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	10 82       	st	Z, r1
				PassCheckResponse(correct);
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	0e 94 c2 06 	call	0xd84	; 0xd84 <PassCheckResponse>
	UART_init();

	while(1){
		choice = UART_recieveByte();
		//Choice 1
		while (choice == 0x01){
    2114:	fe 01       	movw	r30, r28
    2116:	e6 55       	subi	r30, 0x56	; 86
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	80 81       	ld	r24, Z
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	09 f4       	brne	.+2      	; 0x2122 <main+0xc6c>
    2120:	10 cd       	rjmp	.-1504   	; 0x1b42 <main+0x68c>
    2122:	ef c1       	rjmp	.+990    	; 0x2502 <main+0x104c>
				PassCheckResponse(correct);
			}
		}
		//Choice 2
		while (choice == 0x02){
			EEPROM_writeByte(0x0311, UART_recieveByte());
    2124:	0e 94 c1 12 	call	0x2582	; 0x2582 <UART_recieveByte>
    2128:	28 2f       	mov	r18, r24
    212a:	81 e1       	ldi	r24, 0x11	; 17
    212c:	93 e0       	ldi	r25, 0x03	; 3
    212e:	62 2f       	mov	r22, r18
    2130:	0e 94 a4 05 	call	0xb48	; 0xb48 <EEPROM_writeByte>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e2       	ldi	r26, 0x20	; 32
    213a:	b1 e4       	ldi	r27, 0x41	; 65
    213c:	8d ab       	std	Y+53, r24	; 0x35
    213e:	9e ab       	std	Y+54, r25	; 0x36
    2140:	af ab       	std	Y+55, r26	; 0x37
    2142:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2144:	6d a9       	ldd	r22, Y+53	; 0x35
    2146:	7e a9       	ldd	r23, Y+54	; 0x36
    2148:	8f a9       	ldd	r24, Y+55	; 0x37
    214a:	98 ad       	ldd	r25, Y+56	; 0x38
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a e7       	ldi	r20, 0x7A	; 122
    2152:	53 e4       	ldi	r21, 0x43	; 67
    2154:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	89 ab       	std	Y+49, r24	; 0x31
    215e:	9a ab       	std	Y+50, r25	; 0x32
    2160:	ab ab       	std	Y+51, r26	; 0x33
    2162:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2164:	69 a9       	ldd	r22, Y+49	; 0x31
    2166:	7a a9       	ldd	r23, Y+50	; 0x32
    2168:	8b a9       	ldd	r24, Y+51	; 0x33
    216a:	9c a9       	ldd	r25, Y+52	; 0x34
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	2c f4       	brge	.+10     	; 0x2186 <main+0xcd0>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	98 ab       	std	Y+48, r25	; 0x30
    2182:	8f a7       	std	Y+47, r24	; 0x2f
    2184:	3f c0       	rjmp	.+126    	; 0x2204 <main+0xd4e>
	else if (__tmp > 65535)
    2186:	69 a9       	ldd	r22, Y+49	; 0x31
    2188:	7a a9       	ldd	r23, Y+50	; 0x32
    218a:	8b a9       	ldd	r24, Y+51	; 0x33
    218c:	9c a9       	ldd	r25, Y+52	; 0x34
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    219a:	18 16       	cp	r1, r24
    219c:	4c f5       	brge	.+82     	; 0x21f0 <main+0xd3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219e:	6d a9       	ldd	r22, Y+53	; 0x35
    21a0:	7e a9       	ldd	r23, Y+54	; 0x36
    21a2:	8f a9       	ldd	r24, Y+55	; 0x37
    21a4:	98 ad       	ldd	r25, Y+56	; 0x38
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	98 ab       	std	Y+48, r25	; 0x30
    21c4:	8f a7       	std	Y+47, r24	; 0x2f
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <main+0xd30>
    21c8:	89 e1       	ldi	r24, 0x19	; 25
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9e a7       	std	Y+46, r25	; 0x2e
    21ce:	8d a7       	std	Y+45, r24	; 0x2d
    21d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    21d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <main+0xd1e>
    21d8:	9e a7       	std	Y+46, r25	; 0x2e
    21da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    21de:	98 a9       	ldd	r25, Y+48	; 0x30
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	98 ab       	std	Y+48, r25	; 0x30
    21e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e8:	98 a9       	ldd	r25, Y+48	; 0x30
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	69 f7       	brne	.-38     	; 0x21c8 <main+0xd12>
    21ee:	14 c0       	rjmp	.+40     	; 0x2218 <main+0xd62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f0:	69 a9       	ldd	r22, Y+49	; 0x31
    21f2:	7a a9       	ldd	r23, Y+50	; 0x32
    21f4:	8b a9       	ldd	r24, Y+51	; 0x33
    21f6:	9c a9       	ldd	r25, Y+52	; 0x34
    21f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	98 ab       	std	Y+48, r25	; 0x30
    2202:	8f a7       	std	Y+47, r24	; 0x2f
    2204:	8f a5       	ldd	r24, Y+47	; 0x2f
    2206:	98 a9       	ldd	r25, Y+48	; 0x30
    2208:	9c a7       	std	Y+44, r25	; 0x2c
    220a:	8b a7       	std	Y+43, r24	; 0x2b
    220c:	8b a5       	ldd	r24, Y+43	; 0x2b
    220e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <main+0xd5a>
    2214:	9c a7       	std	Y+44, r25	; 0x2c
    2216:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			EEPROM_writeByte(0x0312, UART_recieveByte());
    2218:	0e 94 c1 12 	call	0x2582	; 0x2582 <UART_recieveByte>
    221c:	28 2f       	mov	r18, r24
    221e:	82 e1       	ldi	r24, 0x12	; 18
    2220:	93 e0       	ldi	r25, 0x03	; 3
    2222:	62 2f       	mov	r22, r18
    2224:	0e 94 a4 05 	call	0xb48	; 0xb48 <EEPROM_writeByte>
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	a0 e2       	ldi	r26, 0x20	; 32
    222e:	b1 e4       	ldi	r27, 0x41	; 65
    2230:	8f a3       	std	Y+39, r24	; 0x27
    2232:	98 a7       	std	Y+40, r25	; 0x28
    2234:	a9 a7       	std	Y+41, r26	; 0x29
    2236:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2238:	6f a1       	ldd	r22, Y+39	; 0x27
    223a:	78 a5       	ldd	r23, Y+40	; 0x28
    223c:	89 a5       	ldd	r24, Y+41	; 0x29
    223e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	4a e7       	ldi	r20, 0x7A	; 122
    2246:	53 e4       	ldi	r21, 0x43	; 67
    2248:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	8b a3       	std	Y+35, r24	; 0x23
    2252:	9c a3       	std	Y+36, r25	; 0x24
    2254:	ad a3       	std	Y+37, r26	; 0x25
    2256:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2258:	6b a1       	ldd	r22, Y+35	; 0x23
    225a:	7c a1       	ldd	r23, Y+36	; 0x24
    225c:	8d a1       	ldd	r24, Y+37	; 0x25
    225e:	9e a1       	ldd	r25, Y+38	; 0x26
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e8       	ldi	r20, 0x80	; 128
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    226c:	88 23       	and	r24, r24
    226e:	2c f4       	brge	.+10     	; 0x227a <main+0xdc4>
		__ticks = 1;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9a a3       	std	Y+34, r25	; 0x22
    2276:	89 a3       	std	Y+33, r24	; 0x21
    2278:	3f c0       	rjmp	.+126    	; 0x22f8 <main+0xe42>
	else if (__tmp > 65535)
    227a:	6b a1       	ldd	r22, Y+35	; 0x23
    227c:	7c a1       	ldd	r23, Y+36	; 0x24
    227e:	8d a1       	ldd	r24, Y+37	; 0x25
    2280:	9e a1       	ldd	r25, Y+38	; 0x26
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	3f ef       	ldi	r19, 0xFF	; 255
    2286:	4f e7       	ldi	r20, 0x7F	; 127
    2288:	57 e4       	ldi	r21, 0x47	; 71
    228a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    228e:	18 16       	cp	r1, r24
    2290:	4c f5       	brge	.+82     	; 0x22e4 <main+0xe2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	6f a1       	ldd	r22, Y+39	; 0x27
    2294:	78 a5       	ldd	r23, Y+40	; 0x28
    2296:	89 a5       	ldd	r24, Y+41	; 0x29
    2298:	9a a5       	ldd	r25, Y+42	; 0x2a
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	9a a3       	std	Y+34, r25	; 0x22
    22b8:	89 a3       	std	Y+33, r24	; 0x21
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <main+0xe24>
    22bc:	89 e1       	ldi	r24, 0x19	; 25
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	98 a3       	std	Y+32, r25	; 0x20
    22c2:	8f 8f       	std	Y+31, r24	; 0x1f
    22c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22c6:	98 a1       	ldd	r25, Y+32	; 0x20
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <main+0xe12>
    22cc:	98 a3       	std	Y+32, r25	; 0x20
    22ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d0:	89 a1       	ldd	r24, Y+33	; 0x21
    22d2:	9a a1       	ldd	r25, Y+34	; 0x22
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	9a a3       	std	Y+34, r25	; 0x22
    22d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22da:	89 a1       	ldd	r24, Y+33	; 0x21
    22dc:	9a a1       	ldd	r25, Y+34	; 0x22
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	69 f7       	brne	.-38     	; 0x22bc <main+0xe06>
    22e2:	14 c0       	rjmp	.+40     	; 0x230c <main+0xe56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e4:	6b a1       	ldd	r22, Y+35	; 0x23
    22e6:	7c a1       	ldd	r23, Y+36	; 0x24
    22e8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ea:	9e a1       	ldd	r25, Y+38	; 0x26
    22ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9a a3       	std	Y+34, r25	; 0x22
    22f6:	89 a3       	std	Y+33, r24	; 0x21
    22f8:	89 a1       	ldd	r24, Y+33	; 0x21
    22fa:	9a a1       	ldd	r25, Y+34	; 0x22
    22fc:	9e 8f       	std	Y+30, r25	; 0x1e
    22fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2302:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <main+0xe4e>
    2308:	9e 8f       	std	Y+30, r25	; 0x1e
    230a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			EEPROM_writeByte(0x0313, UART_recieveByte());
    230c:	0e 94 c1 12 	call	0x2582	; 0x2582 <UART_recieveByte>
    2310:	28 2f       	mov	r18, r24
    2312:	83 e1       	ldi	r24, 0x13	; 19
    2314:	93 e0       	ldi	r25, 0x03	; 3
    2316:	62 2f       	mov	r22, r18
    2318:	0e 94 a4 05 	call	0xb48	; 0xb48 <EEPROM_writeByte>
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	a0 e2       	ldi	r26, 0x20	; 32
    2322:	b1 e4       	ldi	r27, 0x41	; 65
    2324:	89 8f       	std	Y+25, r24	; 0x19
    2326:	9a 8f       	std	Y+26, r25	; 0x1a
    2328:	ab 8f       	std	Y+27, r26	; 0x1b
    232a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232c:	69 8d       	ldd	r22, Y+25	; 0x19
    232e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2330:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2332:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	4a e7       	ldi	r20, 0x7A	; 122
    233a:	53 e4       	ldi	r21, 0x43	; 67
    233c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	8d 8b       	std	Y+21, r24	; 0x15
    2346:	9e 8b       	std	Y+22, r25	; 0x16
    2348:	af 8b       	std	Y+23, r26	; 0x17
    234a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    234c:	6d 89       	ldd	r22, Y+21	; 0x15
    234e:	7e 89       	ldd	r23, Y+22	; 0x16
    2350:	8f 89       	ldd	r24, Y+23	; 0x17
    2352:	98 8d       	ldd	r25, Y+24	; 0x18
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e8       	ldi	r20, 0x80	; 128
    235a:	5f e3       	ldi	r21, 0x3F	; 63
    235c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2360:	88 23       	and	r24, r24
    2362:	2c f4       	brge	.+10     	; 0x236e <main+0xeb8>
		__ticks = 1;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	9c 8b       	std	Y+20, r25	; 0x14
    236a:	8b 8b       	std	Y+19, r24	; 0x13
    236c:	3f c0       	rjmp	.+126    	; 0x23ec <main+0xf36>
	else if (__tmp > 65535)
    236e:	6d 89       	ldd	r22, Y+21	; 0x15
    2370:	7e 89       	ldd	r23, Y+22	; 0x16
    2372:	8f 89       	ldd	r24, Y+23	; 0x17
    2374:	98 8d       	ldd	r25, Y+24	; 0x18
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	3f ef       	ldi	r19, 0xFF	; 255
    237a:	4f e7       	ldi	r20, 0x7F	; 127
    237c:	57 e4       	ldi	r21, 0x47	; 71
    237e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2382:	18 16       	cp	r1, r24
    2384:	4c f5       	brge	.+82     	; 0x23d8 <main+0xf22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2386:	69 8d       	ldd	r22, Y+25	; 0x19
    2388:	7a 8d       	ldd	r23, Y+26	; 0x1a
    238a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    238c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e2       	ldi	r20, 0x20	; 32
    2394:	51 e4       	ldi	r21, 0x41	; 65
    2396:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9c 8b       	std	Y+20, r25	; 0x14
    23ac:	8b 8b       	std	Y+19, r24	; 0x13
    23ae:	0f c0       	rjmp	.+30     	; 0x23ce <main+0xf18>
    23b0:	89 e1       	ldi	r24, 0x19	; 25
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9a 8b       	std	Y+18, r25	; 0x12
    23b6:	89 8b       	std	Y+17, r24	; 0x11
    23b8:	89 89       	ldd	r24, Y+17	; 0x11
    23ba:	9a 89       	ldd	r25, Y+18	; 0x12
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <main+0xf06>
    23c0:	9a 8b       	std	Y+18, r25	; 0x12
    23c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c4:	8b 89       	ldd	r24, Y+19	; 0x13
    23c6:	9c 89       	ldd	r25, Y+20	; 0x14
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	9c 8b       	std	Y+20, r25	; 0x14
    23cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	8b 89       	ldd	r24, Y+19	; 0x13
    23d0:	9c 89       	ldd	r25, Y+20	; 0x14
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	69 f7       	brne	.-38     	; 0x23b0 <main+0xefa>
    23d6:	14 c0       	rjmp	.+40     	; 0x2400 <main+0xf4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d8:	6d 89       	ldd	r22, Y+21	; 0x15
    23da:	7e 89       	ldd	r23, Y+22	; 0x16
    23dc:	8f 89       	ldd	r24, Y+23	; 0x17
    23de:	98 8d       	ldd	r25, Y+24	; 0x18
    23e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9c 8b       	std	Y+20, r25	; 0x14
    23ea:	8b 8b       	std	Y+19, r24	; 0x13
    23ec:	8b 89       	ldd	r24, Y+19	; 0x13
    23ee:	9c 89       	ldd	r25, Y+20	; 0x14
    23f0:	98 8b       	std	Y+16, r25	; 0x10
    23f2:	8f 87       	std	Y+15, r24	; 0x0f
    23f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f6:	98 89       	ldd	r25, Y+16	; 0x10
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <main+0xf42>
    23fc:	98 8b       	std	Y+16, r25	; 0x10
    23fe:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			EEPROM_writeByte(0x0314, UART_recieveByte());
    2400:	0e 94 c1 12 	call	0x2582	; 0x2582 <UART_recieveByte>
    2404:	28 2f       	mov	r18, r24
    2406:	84 e1       	ldi	r24, 0x14	; 20
    2408:	93 e0       	ldi	r25, 0x03	; 3
    240a:	62 2f       	mov	r22, r18
    240c:	0e 94 a4 05 	call	0xb48	; 0xb48 <EEPROM_writeByte>
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	a0 e2       	ldi	r26, 0x20	; 32
    2416:	b1 e4       	ldi	r27, 0x41	; 65
    2418:	8b 87       	std	Y+11, r24	; 0x0b
    241a:	9c 87       	std	Y+12, r25	; 0x0c
    241c:	ad 87       	std	Y+13, r26	; 0x0d
    241e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2420:	6b 85       	ldd	r22, Y+11	; 0x0b
    2422:	7c 85       	ldd	r23, Y+12	; 0x0c
    2424:	8d 85       	ldd	r24, Y+13	; 0x0d
    2426:	9e 85       	ldd	r25, Y+14	; 0x0e
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	4a e7       	ldi	r20, 0x7A	; 122
    242e:	53 e4       	ldi	r21, 0x43	; 67
    2430:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	8f 83       	std	Y+7, r24	; 0x07
    243a:	98 87       	std	Y+8, r25	; 0x08
    243c:	a9 87       	std	Y+9, r26	; 0x09
    243e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2440:	6f 81       	ldd	r22, Y+7	; 0x07
    2442:	78 85       	ldd	r23, Y+8	; 0x08
    2444:	89 85       	ldd	r24, Y+9	; 0x09
    2446:	9a 85       	ldd	r25, Y+10	; 0x0a
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e8       	ldi	r20, 0x80	; 128
    244e:	5f e3       	ldi	r21, 0x3F	; 63
    2450:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2454:	88 23       	and	r24, r24
    2456:	2c f4       	brge	.+10     	; 0x2462 <main+0xfac>
		__ticks = 1;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
    2460:	3f c0       	rjmp	.+126    	; 0x24e0 <main+0x102a>
	else if (__tmp > 65535)
    2462:	6f 81       	ldd	r22, Y+7	; 0x07
    2464:	78 85       	ldd	r23, Y+8	; 0x08
    2466:	89 85       	ldd	r24, Y+9	; 0x09
    2468:	9a 85       	ldd	r25, Y+10	; 0x0a
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	3f ef       	ldi	r19, 0xFF	; 255
    246e:	4f e7       	ldi	r20, 0x7F	; 127
    2470:	57 e4       	ldi	r21, 0x47	; 71
    2472:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2476:	18 16       	cp	r1, r24
    2478:	4c f5       	brge	.+82     	; 0x24cc <main+0x1016>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247a:	6b 85       	ldd	r22, Y+11	; 0x0b
    247c:	7c 85       	ldd	r23, Y+12	; 0x0c
    247e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2480:	9e 85       	ldd	r25, Y+14	; 0x0e
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e2       	ldi	r20, 0x20	; 32
    2488:	51 e4       	ldi	r21, 0x41	; 65
    248a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	9e 83       	std	Y+6, r25	; 0x06
    24a0:	8d 83       	std	Y+5, r24	; 0x05
    24a2:	0f c0       	rjmp	.+30     	; 0x24c2 <main+0x100c>
    24a4:	89 e1       	ldi	r24, 0x19	; 25
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	9c 83       	std	Y+4, r25	; 0x04
    24aa:	8b 83       	std	Y+3, r24	; 0x03
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <main+0xffa>
    24b4:	9c 83       	std	Y+4, r25	; 0x04
    24b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c2:	8d 81       	ldd	r24, Y+5	; 0x05
    24c4:	9e 81       	ldd	r25, Y+6	; 0x06
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	69 f7       	brne	.-38     	; 0x24a4 <main+0xfee>
    24ca:	14 c0       	rjmp	.+40     	; 0x24f4 <main+0x103e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24cc:	6f 81       	ldd	r22, Y+7	; 0x07
    24ce:	78 85       	ldd	r23, Y+8	; 0x08
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	9a 83       	std	Y+2, r25	; 0x02
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	9a 81       	ldd	r25, Y+2	; 0x02
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <main+0x1036>
    24f0:	9a 83       	std	Y+2, r25	; 0x02
    24f2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			UART_sendByte(1);
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	0e 94 a3 12 	call	0x2546	; 0x2546 <UART_sendByte>
			choice = 0;
    24fa:	fe 01       	movw	r30, r28
    24fc:	e6 55       	subi	r30, 0x56	; 86
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	10 82       	st	Z, r1
				choice = 0;
				PassCheckResponse(correct);
			}
		}
		//Choice 2
		while (choice == 0x02){
    2502:	fe 01       	movw	r30, r28
    2504:	e6 55       	subi	r30, 0x56	; 86
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	80 81       	ld	r24, Z
    250a:	82 30       	cpi	r24, 0x02	; 2
    250c:	09 f4       	brne	.+2      	; 0x2510 <main+0x105a>
    250e:	0a ce       	rjmp	.-1004   	; 0x2124 <main+0xc6e>
    2510:	11 cb       	rjmp	.-2526   	; 0x1b34 <main+0x67e>

00002512 <UART_init>:
#include "uart.h"
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL)))-1)

void UART_init(){
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1<<U2X);
    251a:	eb e2       	ldi	r30, 0x2B	; 43
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	80 83       	st	Z, r24
	UCSRB = (1<<TXEN)|(1<<RXEN); // The flags are set automatically no need for interrupt
    2522:	ea e2       	ldi	r30, 0x2A	; 42
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	88 e1       	ldi	r24, 0x18	; 24
    2528:	80 83       	st	Z, r24
	UCSRC = (1<<URSEL) | (1<<UCSZ1)| (1<<UCSZ0);
    252a:	e0 e4       	ldi	r30, 0x40	; 64
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	86 e8       	ldi	r24, 0x86	; 134
    2530:	80 83       	st	Z, r24
	// UBRR is about 2bytes divided to UBRR_High & UBRR_Low
	// Therefore if you have a data more than 1 byte then store this data in  UBRR_High
	// Since URSEL is the first bit in UBRR then it will be set to 0;
	UBRRH = BAUD_PRESCALE >> 8;
    2532:	e0 e4       	ldi	r30, 0x40	; 64
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2538:	e9 e2       	ldi	r30, 0x29	; 41
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	8c e0       	ldi	r24, 0x0C	; 12
    253e:	80 83       	st	Z, r24
}
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	08 95       	ret

00002546 <UART_sendByte>:
void UART_sendByte(uint8 data){
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	0f 92       	push	r0
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	89 83       	std	Y+1, r24	; 0x01
	UDR = data; //Transmit
    2552:	ec e2       	ldi	r30, 0x2C	; 44
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	80 83       	st	Z, r24
	while(bitIsClear(UCSRA,TXC)); // Wait for transmit flag
    255a:	eb e2       	ldi	r30, 0x2B	; 43
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	88 2f       	mov	r24, r24
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	80 74       	andi	r24, 0x40	; 64
    2566:	90 70       	andi	r25, 0x00	; 0
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	b9 f3       	breq	.-18     	; 0x255a <UART_sendByte+0x14>
	setBit(UCSRA,TXC); //Clear flag
    256c:	ab e2       	ldi	r26, 0x2B	; 43
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	eb e2       	ldi	r30, 0x2B	; 43
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	80 64       	ori	r24, 0x40	; 64
    2578:	8c 93       	st	X, r24
}
    257a:	0f 90       	pop	r0
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <UART_recieveByte>:
uint8 UART_recieveByte(){
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
	while(bitIsClear(UCSRA,RXC)){}
    258a:	eb e2       	ldi	r30, 0x2B	; 43
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	88 23       	and	r24, r24
    2592:	dc f7       	brge	.-10     	; 0x258a <UART_recieveByte+0x8>
	setBit(UCSRA,RXC);
    2594:	ab e2       	ldi	r26, 0x2B	; 43
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	eb e2       	ldi	r30, 0x2B	; 43
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	80 68       	ori	r24, 0x80	; 128
    25a0:	8c 93       	st	X, r24
	return UDR;
    25a2:	ec e2       	ldi	r30, 0x2C	; 44
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
}
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <UART_sendString>:
void UART_sendString(uint8 *Str){
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <UART_sendString+0x6>
    25b4:	0f 92       	push	r0
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	9b 83       	std	Y+3, r25	; 0x03
    25bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25be:	19 82       	std	Y+1, r1	; 0x01
    25c0:	0e c0       	rjmp	.+28     	; 0x25de <UART_sendString+0x30>
	while(Str[i] != '\0'){
		UART_sendByte(Str[i]);
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	9b 81       	ldd	r25, Y+3	; 0x03
    25cc:	fc 01       	movw	r30, r24
    25ce:	e2 0f       	add	r30, r18
    25d0:	f3 1f       	adc	r31, r19
    25d2:	80 81       	ld	r24, Z
    25d4:	0e 94 a3 12 	call	0x2546	; 0x2546 <UART_sendByte>
		i++;
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	89 83       	std	Y+1, r24	; 0x01
	setBit(UCSRA,RXC);
	return UDR;
}
void UART_sendString(uint8 *Str){
	uint8 i = 0;
	while(Str[i] != '\0'){
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	9b 81       	ldd	r25, Y+3	; 0x03
    25e8:	fc 01       	movw	r30, r24
    25ea:	e2 0f       	add	r30, r18
    25ec:	f3 1f       	adc	r31, r19
    25ee:	80 81       	ld	r24, Z
    25f0:	88 23       	and	r24, r24
    25f2:	39 f7       	brne	.-50     	; 0x25c2 <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}
}
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <UART_recieveString>:
void UART_recieveString(uint8 * Str){
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	00 d0       	rcall	.+0      	; 0x260a <UART_recieveString+0xa>
    260a:	0f 92       	push	r0
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	9b 83       	std	Y+3, r25	; 0x03
    2612:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2614:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte(); // Checks if there is even a msg
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	9b 81       	ldd	r25, Y+3	; 0x03
    2620:	8c 01       	movw	r16, r24
    2622:	02 0f       	add	r16, r18
    2624:	13 1f       	adc	r17, r19
    2626:	0e 94 c1 12 	call	0x2582	; 0x2582 <UART_recieveByte>
    262a:	f8 01       	movw	r30, r16
    262c:	80 83       	st	Z, r24
    262e:	0f c0       	rjmp	.+30     	; 0x264e <UART_recieveString+0x4e>
	while(Str[i] == '#'){ // The agreed stop symbol because there is no representation in data.
		i++;
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	9b 81       	ldd	r25, Y+3	; 0x03
    2640:	8c 01       	movw	r16, r24
    2642:	02 0f       	add	r16, r18
    2644:	13 1f       	adc	r17, r19
    2646:	0e 94 c1 12 	call	0x2582	; 0x2582 <UART_recieveByte>
    264a:	f8 01       	movw	r30, r16
    264c:	80 83       	st	Z, r24
	}
}
void UART_recieveString(uint8 * Str){
	uint8 i = 0;
	Str[i] = UART_recieveByte(); // Checks if there is even a msg
	while(Str[i] == '#'){ // The agreed stop symbol because there is no representation in data.
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	9b 81       	ldd	r25, Y+3	; 0x03
    2658:	fc 01       	movw	r30, r24
    265a:	e2 0f       	add	r30, r18
    265c:	f3 1f       	adc	r31, r19
    265e:	80 81       	ld	r24, Z
    2660:	83 32       	cpi	r24, 0x23	; 35
    2662:	31 f3       	breq	.-52     	; 0x2630 <UART_recieveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0'; // let the agreed stop sign be the end of the string.
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	fc 01       	movw	r30, r24
    2670:	e2 0f       	add	r30, r18
    2672:	f3 1f       	adc	r31, r19
    2674:	10 82       	st	Z, r1
}
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	1f 91       	pop	r17
    2682:	0f 91       	pop	r16
    2684:	08 95       	ret

00002686 <__prologue_saves__>:
    2686:	2f 92       	push	r2
    2688:	3f 92       	push	r3
    268a:	4f 92       	push	r4
    268c:	5f 92       	push	r5
    268e:	6f 92       	push	r6
    2690:	7f 92       	push	r7
    2692:	8f 92       	push	r8
    2694:	9f 92       	push	r9
    2696:	af 92       	push	r10
    2698:	bf 92       	push	r11
    269a:	cf 92       	push	r12
    269c:	df 92       	push	r13
    269e:	ef 92       	push	r14
    26a0:	ff 92       	push	r15
    26a2:	0f 93       	push	r16
    26a4:	1f 93       	push	r17
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	ca 1b       	sub	r28, r26
    26b0:	db 0b       	sbc	r29, r27
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	09 94       	ijmp

000026be <__epilogue_restores__>:
    26be:	2a 88       	ldd	r2, Y+18	; 0x12
    26c0:	39 88       	ldd	r3, Y+17	; 0x11
    26c2:	48 88       	ldd	r4, Y+16	; 0x10
    26c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    26c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    26c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    26ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    26cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    26ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    26d0:	b9 84       	ldd	r11, Y+9	; 0x09
    26d2:	c8 84       	ldd	r12, Y+8	; 0x08
    26d4:	df 80       	ldd	r13, Y+7	; 0x07
    26d6:	ee 80       	ldd	r14, Y+6	; 0x06
    26d8:	fd 80       	ldd	r15, Y+5	; 0x05
    26da:	0c 81       	ldd	r16, Y+4	; 0x04
    26dc:	1b 81       	ldd	r17, Y+3	; 0x03
    26de:	aa 81       	ldd	r26, Y+2	; 0x02
    26e0:	b9 81       	ldd	r27, Y+1	; 0x01
    26e2:	ce 0f       	add	r28, r30
    26e4:	d1 1d       	adc	r29, r1
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
    26f0:	ed 01       	movw	r28, r26
    26f2:	08 95       	ret

000026f4 <_exit>:
    26f4:	f8 94       	cli

000026f6 <__stop_program>:
    26f6:	ff cf       	rjmp	.-2      	; 0x26f6 <__stop_program>
