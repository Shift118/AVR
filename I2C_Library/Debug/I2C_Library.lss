
I2C_Library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000648  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000809  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  64:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_init>:
#include "i2c.h"

void TWI_init(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	TWBR = 0x02; // Bit Rate: 400.000 kbps using 0 prescaler "TWSR" and F_cpu = 8MHZ;
  74:	e0 e2       	ldi	r30, 0x20	; 32
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	82 e0       	ldi	r24, 0x02	; 2
  7a:	80 83       	st	Z, r24
	TWSR = 0;
  7c:	e1 e2       	ldi	r30, 0x21	; 33
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	10 82       	st	Z, r1
	TWI address bits contain TWI 7-bit address with which it can called by other masters in slave mode.

	Bit 0 â€“ TWGCE: TWI general call enable bit
	TWI general call enable bit when set it enables recognition of general call over the TWI bus
*/
	TWAR = 0b00000010;  // My address for slave mode.
  82:	e2 e2       	ldi	r30, 0x22	; 34
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	80 83       	st	Z, r24
	TWCR = (1<<TWEN); // TWI enable bit
  8a:	e6 e5       	ldi	r30, 0x56	; 86
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	84 e0       	ldi	r24, 0x04	; 4
  90:	80 83       	st	Z, r24
}
  92:	cf 91       	pop	r28
  94:	df 91       	pop	r29
  96:	08 95       	ret

00000098 <TWI_start>:
void TWI_start(){
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // Clear flag for further use , Start bit, Enable I2C bit
  a0:	e6 e5       	ldi	r30, 0x56	; 86
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	84 ea       	ldi	r24, 0xA4	; 164
  a6:	80 83       	st	Z, r24
	while(bitIsClear(TWCR,TWINT)); // While is cleared wait , But when transmit is successful continue.
  a8:	e6 e5       	ldi	r30, 0x56	; 86
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	88 23       	and	r24, r24
  b0:	dc f7       	brge	.-10     	; 0xa8 <TWI_start+0x10>
}
  b2:	cf 91       	pop	r28
  b4:	df 91       	pop	r29
  b6:	08 95       	ret

000000b8 <TWI_stop>:
void TWI_stop(){
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // Clear flag for further use , Stop bit, Enable I2C Bit.
  c0:	e6 e5       	ldi	r30, 0x56	; 86
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	84 e9       	ldi	r24, 0x94	; 148
  c6:	80 83       	st	Z, r24
	// Here I don't care about checking the flag because I have already stopped.
}
  c8:	cf 91       	pop	r28
  ca:	df 91       	pop	r29
  cc:	08 95       	ret

000000ce <TWI_write>:
void TWI_write(uint8 data){
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	0f 92       	push	r0
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
  da:	e3 e2       	ldi	r30, 0x23	; 35
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);// Clear flag for further use, Enable I2C bit
  e2:	e6 e5       	ldi	r30, 0x56	; 86
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	80 83       	st	Z, r24
	while(bitIsClear(TWCR,TWINT));
  ea:	e6 e5       	ldi	r30, 0x56	; 86
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	dc f7       	brge	.-10     	; 0xea <TWI_write+0x1c>
}
  f4:	0f 90       	pop	r0
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <TWI_readWithACK>:
uint8 TWI_readWithACK(){
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 104:	e6 e5       	ldi	r30, 0x56	; 86
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	84 ec       	ldi	r24, 0xC4	; 196
 10a:	80 83       	st	Z, r24
	while(bitIsClear(TWCR,TWINT));
 10c:	e6 e5       	ldi	r30, 0x56	; 86
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	88 23       	and	r24, r24
 114:	dc f7       	brge	.-10     	; 0x10c <TWI_readWithACK+0x10>
	return TWDR;
 116:	e3 e2       	ldi	r30, 0x23	; 35
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
}
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <TWI_readWithNACK>:
uint8 TWI_readWithNACK(){
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
 12a:	e6 e5       	ldi	r30, 0x56	; 86
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	84 e8       	ldi	r24, 0x84	; 132
 130:	80 83       	st	Z, r24
	while(bitIsClear(TWCR,TWINT));
 132:	e6 e5       	ldi	r30, 0x56	; 86
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	88 23       	and	r24, r24
 13a:	dc f7       	brge	.-10     	; 0x132 <TWI_readWithNACK+0x10>
	return TWDR;
 13c:	e3 e2       	ldi	r30, 0x23	; 35
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
}
 142:	cf 91       	pop	r28
 144:	df 91       	pop	r29
 146:	08 95       	ret

00000148 <TWI_getStatus>:
uint8 TWI_getStatus(){
 148:	df 93       	push	r29
 14a:	cf 93       	push	r28
 14c:	0f 92       	push	r0
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	status = TWSR & 0xf8; // I only need the last 5 bit (status bits)
 152:	e1 e2       	ldi	r30, 0x21	; 33
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	88 7f       	andi	r24, 0xF8	; 248
 15a:	89 83       	std	Y+1, r24	; 0x01
	return status;
 15c:	89 81       	ldd	r24, Y+1	; 0x01
}
 15e:	0f 90       	pop	r0
 160:	cf 91       	pop	r28
 162:	df 91       	pop	r29
 164:	08 95       	ret

00000166 <main>:
int main(int argc, char **argv) {
 166:	df 93       	push	r29
 168:	cf 93       	push	r28
 16a:	00 d0       	rcall	.+0      	; 0x16c <main+0x6>
 16c:	00 d0       	rcall	.+0      	; 0x16e <main+0x8>
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	9a 83       	std	Y+2, r25	; 0x02
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	7c 83       	std	Y+4, r23	; 0x04
 178:	6b 83       	std	Y+3, r22	; 0x03
 17a:	ff cf       	rjmp	.-2      	; 0x17a <main+0x14>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
